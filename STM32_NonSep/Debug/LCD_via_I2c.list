
LCD_via_I2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b34  08002b34  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b34  08002b34  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b34  08002b34  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000001c  08002b58  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002b58  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd87  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6d  00000000  00000000  0002bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0002d940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  0002e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016af  00000000  00000000  0002f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8f9  00000000  00000000  00030a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084879  00000000  00000000  0003e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2b81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000c2bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ad0 	.word	0x08002ad0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002ad0 	.word	0x08002ad0

0800014c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000156:	4a38      	ldr	r2, [pc, #224]	; (8000238 <HD44780_Init+0xec>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800015c:	4b37      	ldr	r3, [pc, #220]	; (800023c <HD44780_Init+0xf0>)
 800015e:	2208      	movs	r2, #8
 8000160:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000162:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf4>)
 8000164:	2200      	movs	r2, #0
 8000166:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000168:	4b33      	ldr	r3, [pc, #204]	; (8000238 <HD44780_Init+0xec>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d907      	bls.n	8000180 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000170:	4b33      	ldr	r3, [pc, #204]	; (8000240 <HD44780_Init+0xf4>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	f043 0308 	orr.w	r3, r3, #8
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b31      	ldr	r3, [pc, #196]	; (8000240 <HD44780_Init+0xf4>)
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	e006      	b.n	800018e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000180:	4b2f      	ldr	r3, [pc, #188]	; (8000240 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0304 	orr.w	r3, r3, #4
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b2d      	ldr	r3, [pc, #180]	; (8000240 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800018e:	f000 f985 	bl	800049c <DelayInit>
  HAL_Delay(50);
 8000192:	2032      	movs	r0, #50	; 0x32
 8000194:	f000 fd5c 	bl	8000c50 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000198:	4b28      	ldr	r3, [pc, #160]	; (800023c <HD44780_Init+0xf0>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f943 	bl	8000428 <ExpanderWrite>
  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 fd53 	bl	8000c50 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001aa:	2030      	movs	r0, #48	; 0x30
 80001ac:	f000 f92b 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b4:	f000 f99a 	bl	80004ec <DelayUS>

  Write4Bits(0x03 << 4);
 80001b8:	2030      	movs	r0, #48	; 0x30
 80001ba:	f000 f924 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001be:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c2:	f000 f993 	bl	80004ec <DelayUS>

  Write4Bits(0x03 << 4);
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f91d 	bl	8000406 <Write4Bits>
  DelayUS(4500);
 80001cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d0:	f000 f98c 	bl	80004ec <DelayUS>

  Write4Bits(0x02 << 4);
 80001d4:	2020      	movs	r0, #32
 80001d6:	f000 f916 	bl	8000406 <Write4Bits>
  DelayUS(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f000 f986 	bl	80004ec <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e0:	4b17      	ldr	r3, [pc, #92]	; (8000240 <HD44780_Init+0xf4>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f8ce 	bl	800038c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <HD44780_Init+0xf8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001f6:	f000 f875 	bl	80002e4 <HD44780_Display>
  HD44780_Clear();
 80001fa:	f000 f82b 	bl	8000254 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HD44780_Init+0xfc>)
 8000200:	2202      	movs	r2, #2
 8000202:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <HD44780_Init+0xfc>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	b2db      	uxtb	r3, r3
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f8bc 	bl	800038c <SendCommand>
  DelayUS(4500);
 8000214:	f241 1094 	movw	r0, #4500	; 0x1194
 8000218:	f000 f968 	bl	80004ec <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800021c:	490b      	ldr	r1, [pc, #44]	; (800024c <HD44780_Init+0x100>)
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f876 	bl	8000310 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000224:	490a      	ldr	r1, [pc, #40]	; (8000250 <HD44780_Init+0x104>)
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f872 	bl	8000310 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800022c:	f000 f81d 	bl	800026a <HD44780_Home>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000003b 	.word	0x2000003b
 800023c:	2000003c 	.word	0x2000003c
 8000240:	20000038 	.word	0x20000038
 8000244:	20000039 	.word	0x20000039
 8000248:	2000003a 	.word	0x2000003a
 800024c:	20000000 	.word	0x20000000
 8000250:	20000008 	.word	0x20000008

08000254 <HD44780_Clear>:

void HD44780_Clear()
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 f897 	bl	800038c <SendCommand>
  DelayUS(2000);
 800025e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000262:	f000 f943 	bl	80004ec <DelayUS>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <HD44780_Home>:

void HD44780_Home()
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 f88c 	bl	800038c <SendCommand>
  DelayUS(2000);
 8000274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000278:	f000 f938 	bl	80004ec <DelayUS>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HD44780_SetCursor+0x5c>)
 8000292:	f107 0408 	add.w	r4, r7, #8
 8000296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <HD44780_SetCursor+0x60>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d303      	bcc.n	80002ae <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <HD44780_SetCursor+0x60>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	3318      	adds	r3, #24
 80002b4:	443b      	add	r3, r7
 80002b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4413      	add	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f85d 	bl	800038c <SendCommand>
}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd90      	pop	{r4, r7, pc}
 80002da:	bf00      	nop
 80002dc:	08002ae8 	.word	0x08002ae8
 80002e0:	2000003b 	.word	0x2000003b

080002e4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <HD44780_Display+0x28>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <HD44780_Display+0x28>)
 80002f4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HD44780_Display+0x28>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f843 	bl	800038c <SendCommand>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000039 	.word	0x20000039

08000310 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	6039      	str	r1, [r7, #0]
 800031a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	00db      	lsls	r3, r3, #3
 8000328:	b25b      	sxtb	r3, r3
 800032a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800032e:	b25b      	sxtb	r3, r3
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f82a 	bl	800038c <SendCommand>
  for (int i=0; i<8; i++)
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	e009      	b.n	8000352 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	4413      	add	r3, r2
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	4618      	mov	r0, r3
 8000348:	f000 f82e 	bl	80003a8 <SendChar>
  for (int i=0; i<8; i++)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3301      	adds	r3, #1
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	2b07      	cmp	r3, #7
 8000356:	ddf2      	ble.n	800033e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036a:	e006      	b.n	800037a <HD44780_PrintStr+0x18>
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	607a      	str	r2, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f817 	bl	80003a8 <SendChar>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d1f4      	bne.n	800036c <HD44780_PrintStr+0xa>
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f812 	bl	80003c4 <Send>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 f804 	bl	80003c4 <Send>
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	460a      	mov	r2, r1
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	4613      	mov	r3, r2
 80003d2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	f023 030f 	bic.w	r3, r3, #15
 80003da:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	011b      	lsls	r3, r3, #4
 80003e0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e2:	7bfa      	ldrb	r2, [r7, #15]
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 f80b 	bl	8000406 <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f0:	7bba      	ldrb	r2, [r7, #14]
 80003f2:	79bb      	ldrb	r3, [r7, #6]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f804 	bl	8000406 <Write4Bits>
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f808 	bl	8000428 <ExpanderWrite>
  PulseEnable(value);
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f820 	bl	8000460 <PulseEnable>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af02      	add	r7, sp, #8
 800042e:	4603      	mov	r3, r0
 8000430:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <ExpanderWrite+0x30>)
 8000434:	781a      	ldrb	r2, [r3, #0]
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4313      	orrs	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800043e:	f107 020f 	add.w	r2, r7, #15
 8000442:	230a      	movs	r3, #10
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2301      	movs	r3, #1
 8000448:	219c      	movs	r1, #156	; 0x9c
 800044a:	4804      	ldr	r0, [pc, #16]	; (800045c <ExpanderWrite+0x34>)
 800044c:	f001 f824 	bl	8001498 <HAL_I2C_Master_Transmit>
}
 8000450:	bf00      	nop
 8000452:	3710      	adds	r7, #16
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000003c 	.word	0x2000003c
 800045c:	20000040 	.word	0x20000040

08000460 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ffd8 	bl	8000428 <ExpanderWrite>
  DelayUS(20);
 8000478:	2014      	movs	r0, #20
 800047a:	f000 f837 	bl	80004ec <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	f023 0304 	bic.w	r3, r3, #4
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ffce 	bl	8000428 <ExpanderWrite>
  DelayUS(20);
 800048c:	2014      	movs	r0, #20
 800048e:	f000 f82d 	bl	80004ec <DelayUS>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <DelayInit>:

static void DelayInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <DelayInit+0x48>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4a0f      	ldr	r2, [pc, #60]	; (80004e4 <DelayInit+0x48>)
 80004a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004aa:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004ac:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <DelayInit+0x48>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <DelayInit+0x48>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004b6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <DelayInit+0x4c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <DelayInit+0x4c>)
 80004be:	f023 0301 	bic.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <DelayInit+0x4c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <DelayInit+0x4c>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <DelayInit+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004d6:	bf00      	nop
  __ASM volatile ("NOP");
 80004d8:	bf00      	nop
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	e000edf0 	.word	0xe000edf0
 80004e8:	e0001000 	.word	0xe0001000

080004ec <DelayUS>:

static void DelayUS(uint32_t us) {
 80004ec:	b480      	push	{r7}
 80004ee:	b087      	sub	sp, #28
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <DelayUS+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <DelayUS+0x44>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9a      	lsrs	r2, r3, #18
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <DelayUS+0x48>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <DelayUS+0x48>)
 8000510:	685a      	ldr	r2, [r3, #4]
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	429a      	cmp	r2, r3
 800051e:	d8f6      	bhi.n	800050e <DelayUS+0x22>
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	371c      	adds	r7, #28
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	20000010 	.word	0x20000010
 8000530:	431bde83 	.word	0x431bde83
 8000534:	e0001000 	.word	0xe0001000

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fb26 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f83a 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f8ee 	bl	8000724 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000548:	f000 f872 	bl	8000630 <MX_I2C1_Init>
  MX_TIM2_Init();
 800054c:	f000 f89e 	bl	800068c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000550:	4814      	ldr	r0, [pc, #80]	; (80005a4 <main+0x6c>)
 8000552:	f001 fefd 	bl	8002350 <HAL_TIM_Base_Start_IT>


  HD44780_Init(2);
 8000556:	2002      	movs	r0, #2
 8000558:	f7ff fdf8 	bl	800014c <HD44780_Init>
  HD44780_Clear();
 800055c:	f7ff fe7a 	bl	8000254 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000560:	2100      	movs	r1, #0
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff fe8c 	bl	8000280 <HD44780_SetCursor>
  HD44780_PrintStr("HELLO WORLD");
 8000568:	480f      	ldr	r0, [pc, #60]	; (80005a8 <main+0x70>)
 800056a:	f7ff fefa 	bl	8000362 <HD44780_PrintStr>
  HD44780_SetCursor(0,1);
 800056e:	2101      	movs	r1, #1
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fe85 	bl	8000280 <HD44780_SetCursor>
  HD44780_PrintStr("FROM BK");
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <main+0x74>)
 8000578:	f7ff fef3 	bl	8000362 <HD44780_PrintStr>
  HAL_Delay(2000);
 800057c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000580:	f000 fb66 	bl	8000c50 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f000 f91b 	bl	80007c0 <setTimer1>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (timer1_flag == 1){
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <main+0x78>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d1fb      	bne.n	800058a <main+0x52>
		  HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 8000592:	2120      	movs	r1, #32
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <main+0x7c>)
 8000596:	f000 fe21 	bl	80011dc <HAL_GPIO_TogglePin>
		  setTimer1(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f000 f910 	bl	80007c0 <setTimer1>
	  if (timer1_flag == 1){
 80005a0:	e7f3      	b.n	800058a <main+0x52>
 80005a2:	bf00      	nop
 80005a4:	20000094 	.word	0x20000094
 80005a8:	08002af8 	.word	0x08002af8
 80005ac:	08002b04 	.word	0x08002b04
 80005b0:	200000e0 	.word	0x200000e0
 80005b4:	40010800 	.word	0x40010800

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b090      	sub	sp, #64	; 0x40
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2228      	movs	r2, #40	; 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fa7a 	bl	8002ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	2301      	movs	r3, #1
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fa58 	bl	8001aa4 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005fa:	f000 f8db 	bl	80007b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fcc6 	bl	8001fa8 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000622:	f000 f8c7 	bl	80007b4 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3740      	adds	r7, #64	; 0x40
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f000 fdcf 	bl	8001210 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 f89c 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000040 	.word	0x20000040
 8000684:	40005400 	.word	0x40005400
 8000688:	000186a0 	.word	0x000186a0

0800068c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_TIM2_Init+0x94>)
 80006aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_TIM2_Init+0x94>)
 80006b2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80006b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_TIM2_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_TIM2_Init+0x94>)
 80006c0:	2209      	movs	r2, #9
 80006c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_TIM2_Init+0x94>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_TIM2_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <MX_TIM2_Init+0x94>)
 80006d2:	f001 fded 	bl	80022b0 <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006dc:	f000 f86a 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4619      	mov	r1, r3
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_TIM2_Init+0x94>)
 80006ee:	f001 ff83 	bl	80025f8 <HAL_TIM_ConfigClockSource>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 f85c 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_TIM2_Init+0x94>)
 800070a:	f002 f94b 	bl	80029a4 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000714:	f000 f84e 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000094 	.word	0x20000094

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_GPIO_Init+0x74>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_GPIO_Init+0x74>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_GPIO_Init+0x74>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_GPIO_Init+0x74>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a10      	ldr	r2, [pc, #64]	; (8000798 <MX_GPIO_Init+0x74>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_GPIO_Init+0x74>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2120      	movs	r1, #32
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <MX_GPIO_Init+0x78>)
 800076e:	f000 fd1d 	bl	80011ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_Pin */
  GPIO_InitStruct.Pin = RED_Pin;
 8000772:	2320      	movs	r3, #32
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0x78>)
 800078a:	f000 fb93 	bl	8000eb4 <HAL_GPIO_Init>

}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000
 800079c:	40010800 	.word	0x40010800

080007a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	timerRun();
 80007a8:	f000 f81e 	bl	80007e8 <timerRun>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80007c8:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <setTimer1+0x20>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <setTimer1+0x24>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200000dc 	.word	0x200000dc
 80007e4:	200000e0 	.word	0x200000e0

080007e8 <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80007ec:	4b51      	ldr	r3, [pc, #324]	; (8000934 <timerRun+0x14c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dd0b      	ble.n	800080c <timerRun+0x24>
		timer1_counter--;
 80007f4:	4b4f      	ldr	r3, [pc, #316]	; (8000934 <timerRun+0x14c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	4a4e      	ldr	r2, [pc, #312]	; (8000934 <timerRun+0x14c>)
 80007fc:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 80007fe:	4b4d      	ldr	r3, [pc, #308]	; (8000934 <timerRun+0x14c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d102      	bne.n	800080c <timerRun+0x24>
			timer1_flag = 1;
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <timerRun+0x150>)
 8000808:	2201      	movs	r2, #1
 800080a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 800080c:	4b4b      	ldr	r3, [pc, #300]	; (800093c <timerRun+0x154>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	dd0b      	ble.n	800082c <timerRun+0x44>
		timer2_counter--;
 8000814:	4b49      	ldr	r3, [pc, #292]	; (800093c <timerRun+0x154>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3b01      	subs	r3, #1
 800081a:	4a48      	ldr	r2, [pc, #288]	; (800093c <timerRun+0x154>)
 800081c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 800081e:	4b47      	ldr	r3, [pc, #284]	; (800093c <timerRun+0x154>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <timerRun+0x44>
			timer2_flag = 1;
 8000826:	4b46      	ldr	r3, [pc, #280]	; (8000940 <timerRun+0x158>)
 8000828:	2201      	movs	r2, #1
 800082a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 800082c:	4b45      	ldr	r3, [pc, #276]	; (8000944 <timerRun+0x15c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	dd0b      	ble.n	800084c <timerRun+0x64>
		timer3_counter--;
 8000834:	4b43      	ldr	r3, [pc, #268]	; (8000944 <timerRun+0x15c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3b01      	subs	r3, #1
 800083a:	4a42      	ldr	r2, [pc, #264]	; (8000944 <timerRun+0x15c>)
 800083c:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 800083e:	4b41      	ldr	r3, [pc, #260]	; (8000944 <timerRun+0x15c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d102      	bne.n	800084c <timerRun+0x64>
			timer3_flag = 1;
 8000846:	4b40      	ldr	r3, [pc, #256]	; (8000948 <timerRun+0x160>)
 8000848:	2201      	movs	r2, #1
 800084a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 800084c:	4b3f      	ldr	r3, [pc, #252]	; (800094c <timerRun+0x164>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	dd0b      	ble.n	800086c <timerRun+0x84>
		timer4_counter--;
 8000854:	4b3d      	ldr	r3, [pc, #244]	; (800094c <timerRun+0x164>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	3b01      	subs	r3, #1
 800085a:	4a3c      	ldr	r2, [pc, #240]	; (800094c <timerRun+0x164>)
 800085c:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <timerRun+0x164>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d102      	bne.n	800086c <timerRun+0x84>
			timer4_flag = 1;
 8000866:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <timerRun+0x168>)
 8000868:	2201      	movs	r2, #1
 800086a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 800086c:	4b39      	ldr	r3, [pc, #228]	; (8000954 <timerRun+0x16c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	dd0b      	ble.n	800088c <timerRun+0xa4>
		timer5_counter--;
 8000874:	4b37      	ldr	r3, [pc, #220]	; (8000954 <timerRun+0x16c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3b01      	subs	r3, #1
 800087a:	4a36      	ldr	r2, [pc, #216]	; (8000954 <timerRun+0x16c>)
 800087c:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 800087e:	4b35      	ldr	r3, [pc, #212]	; (8000954 <timerRun+0x16c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d102      	bne.n	800088c <timerRun+0xa4>
			timer5_flag = 1;
 8000886:	4b34      	ldr	r3, [pc, #208]	; (8000958 <timerRun+0x170>)
 8000888:	2201      	movs	r2, #1
 800088a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 800088c:	4b33      	ldr	r3, [pc, #204]	; (800095c <timerRun+0x174>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	dd0b      	ble.n	80008ac <timerRun+0xc4>
		timer6_counter--;
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <timerRun+0x174>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a30      	ldr	r2, [pc, #192]	; (800095c <timerRun+0x174>)
 800089c:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 800089e:	4b2f      	ldr	r3, [pc, #188]	; (800095c <timerRun+0x174>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d102      	bne.n	80008ac <timerRun+0xc4>
			timer6_flag = 1;
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <timerRun+0x178>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <timerRun+0x17c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	dd0b      	ble.n	80008cc <timerRun+0xe4>
		timer7_counter--;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <timerRun+0x17c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	4a2a      	ldr	r2, [pc, #168]	; (8000964 <timerRun+0x17c>)
 80008bc:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <timerRun+0x17c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d102      	bne.n	80008cc <timerRun+0xe4>
			timer7_flag = 1;
 80008c6:	4b28      	ldr	r3, [pc, #160]	; (8000968 <timerRun+0x180>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 80008cc:	4b27      	ldr	r3, [pc, #156]	; (800096c <timerRun+0x184>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	dd0b      	ble.n	80008ec <timerRun+0x104>
		timer8_counter--;
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <timerRun+0x184>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3b01      	subs	r3, #1
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <timerRun+0x184>)
 80008dc:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <timerRun+0x184>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d102      	bne.n	80008ec <timerRun+0x104>
			timer8_flag = 1;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <timerRun+0x188>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <timerRun+0x18c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dd0b      	ble.n	800090c <timerRun+0x124>
		timer9_counter--;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <timerRun+0x18c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <timerRun+0x18c>)
 80008fc:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <timerRun+0x18c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <timerRun+0x124>
			timer9_flag = 1;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <timerRun+0x190>)
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <timerRun+0x194>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dd0b      	ble.n	800092c <timerRun+0x144>
		timer10_counter--;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <timerRun+0x194>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <timerRun+0x194>)
 800091c:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <timerRun+0x194>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <timerRun+0x144>
			timer10_flag = 1;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <timerRun+0x198>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	200000dc 	.word	0x200000dc
 8000938:	200000e0 	.word	0x200000e0
 800093c:	200000e4 	.word	0x200000e4
 8000940:	200000e8 	.word	0x200000e8
 8000944:	200000ec 	.word	0x200000ec
 8000948:	200000f0 	.word	0x200000f0
 800094c:	200000f4 	.word	0x200000f4
 8000950:	200000f8 	.word	0x200000f8
 8000954:	200000fc 	.word	0x200000fc
 8000958:	20000100 	.word	0x20000100
 800095c:	20000104 	.word	0x20000104
 8000960:	20000108 	.word	0x20000108
 8000964:	2000010c 	.word	0x2000010c
 8000968:	20000110 	.word	0x20000110
 800096c:	20000114 	.word	0x20000114
 8000970:	20000118 	.word	0x20000118
 8000974:	2000011c 	.word	0x2000011c
 8000978:	20000120 	.word	0x20000120
 800097c:	20000124 	.word	0x20000124
 8000980:	20000128 	.word	0x20000128

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_MspInit+0x5c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <HAL_MspInit+0x5c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_MspInit+0x5c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x5c>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_MspInit+0x5c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x5c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_MspInit+0x60>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_MspInit+0x60>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000

080009e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <HAL_I2C_MspInit+0x90>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d132      	bne.n	8000a6e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a26:	2312      	movs	r3, #18
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <HAL_I2C_MspInit+0x98>)
 8000a36:	f000 fa3d 	bl	8000eb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_I2C_MspInit+0x9c>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a50:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <HAL_I2C_MspInit+0x9c>)
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_I2C_MspInit+0x94>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010c00 	.word	0x40010c00
 8000a84:	40010000 	.word	0x40010000

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a98:	d113      	bne.n	8000ac2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_TIM_Base_MspInit+0x44>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <HAL_TIM_Base_MspInit+0x44>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	61d3      	str	r3, [r2, #28]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_TIM_Base_MspInit+0x44>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	201c      	movs	r0, #28
 8000ab8:	f000 f9c5 	bl	8000e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000abc:	201c      	movs	r0, #28
 8000abe:	f000 f9de 	bl	8000e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <UsageFault_Handler+0x4>

08000aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f000 f87f 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM2_IRQHandler+0x10>)
 8000b26:	f001 fc5f 	bl	80023e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000094 	.word	0x20000094

08000b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	; (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	; (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b66:	f7ff ffe5 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f001 ff85 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6e:	f7ff fce3 	bl	8000538 <main>
  bx lr
 8000b72:	4770      	bx	lr
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b7c:	08002b3c 	.word	0x08002b3c
  ldr r2, =_sbss
 8000b80:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b84:	20000130 	.word	0x20000130

08000b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_2_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x28>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x28>)
 8000b96:	f043 0310 	orr.w	r3, r3, #16
 8000b9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f947 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff feec 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f95f 	bl	8000e9a <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 f927 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000010 	.word	0x20000010
 8000c10:	20000018 	.word	0x20000018
 8000c14:	20000014 	.word	0x20000014

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000018 	.word	0x20000018
 8000c38:	2000012c 	.word	0x2000012c

08000c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	2000012c 	.word	0x2000012c

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff fff0 	bl	8000c3c <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_Delay+0x44>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c76:	bf00      	nop
 8000c78:	f7ff ffe0 	bl	8000c3c <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000018 	.word	0x20000018

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4906      	ldr	r1, [pc, #24]	; (8000d30 <__NVIC_EnableIRQ+0x34>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff90 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff2d 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff42 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff90 	bl	8000d88 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5f 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff35 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffa2 	bl	8000dec <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	e161      	b.n	800118c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8150 	bne.w	8001186 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4a97      	ldr	r2, [pc, #604]	; (8001148 <HAL_GPIO_Init+0x294>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d05e      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000ef0:	4a95      	ldr	r2, [pc, #596]	; (8001148 <HAL_GPIO_Init+0x294>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d875      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000ef6:	4a95      	ldr	r2, [pc, #596]	; (800114c <HAL_GPIO_Init+0x298>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d058      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000efc:	4a93      	ldr	r2, [pc, #588]	; (800114c <HAL_GPIO_Init+0x298>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d86f      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f02:	4a93      	ldr	r2, [pc, #588]	; (8001150 <HAL_GPIO_Init+0x29c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d052      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000f08:	4a91      	ldr	r2, [pc, #580]	; (8001150 <HAL_GPIO_Init+0x29c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d869      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f0e:	4a91      	ldr	r2, [pc, #580]	; (8001154 <HAL_GPIO_Init+0x2a0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d04c      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000f14:	4a8f      	ldr	r2, [pc, #572]	; (8001154 <HAL_GPIO_Init+0x2a0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d863      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f1a:	4a8f      	ldr	r2, [pc, #572]	; (8001158 <HAL_GPIO_Init+0x2a4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d046      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
 8000f20:	4a8d      	ldr	r2, [pc, #564]	; (8001158 <HAL_GPIO_Init+0x2a4>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d85d      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f26:	2b12      	cmp	r3, #18
 8000f28:	d82a      	bhi.n	8000f80 <HAL_GPIO_Init+0xcc>
 8000f2a:	2b12      	cmp	r3, #18
 8000f2c:	d859      	bhi.n	8000fe2 <HAL_GPIO_Init+0x12e>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <HAL_GPIO_Init+0x80>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000faf 	.word	0x08000faf
 8000f38:	08000f89 	.word	0x08000f89
 8000f3c:	08000f9b 	.word	0x08000f9b
 8000f40:	08000fdd 	.word	0x08000fdd
 8000f44:	08000fe3 	.word	0x08000fe3
 8000f48:	08000fe3 	.word	0x08000fe3
 8000f4c:	08000fe3 	.word	0x08000fe3
 8000f50:	08000fe3 	.word	0x08000fe3
 8000f54:	08000fe3 	.word	0x08000fe3
 8000f58:	08000fe3 	.word	0x08000fe3
 8000f5c:	08000fe3 	.word	0x08000fe3
 8000f60:	08000fe3 	.word	0x08000fe3
 8000f64:	08000fe3 	.word	0x08000fe3
 8000f68:	08000fe3 	.word	0x08000fe3
 8000f6c:	08000fe3 	.word	0x08000fe3
 8000f70:	08000fe3 	.word	0x08000fe3
 8000f74:	08000fe3 	.word	0x08000fe3
 8000f78:	08000f91 	.word	0x08000f91
 8000f7c:	08000fa5 	.word	0x08000fa5
 8000f80:	4a76      	ldr	r2, [pc, #472]	; (800115c <HAL_GPIO_Init+0x2a8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f86:	e02c      	b.n	8000fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e029      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	3304      	adds	r3, #4
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e024      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	623b      	str	r3, [r7, #32]
          break;
 8000fa2:	e01f      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	330c      	adds	r3, #12
 8000faa:	623b      	str	r3, [r7, #32]
          break;
 8000fac:	e01a      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d102      	bne.n	8000fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e013      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d105      	bne.n	8000fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	611a      	str	r2, [r3, #16]
          break;
 8000fce:	e009      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	615a      	str	r2, [r3, #20]
          break;
 8000fda:	e003      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
          break;
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x130>
          break;
 8000fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d801      	bhi.n	8000fee <HAL_GPIO_Init+0x13a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	e001      	b.n	8000ff2 <HAL_GPIO_Init+0x13e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2bff      	cmp	r3, #255	; 0xff
 8000ff8:	d802      	bhi.n	8001000 <HAL_GPIO_Init+0x14c>
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0x152>
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	3b08      	subs	r3, #8
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	210f      	movs	r1, #15
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	6a39      	ldr	r1, [r7, #32]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 80a9 	beq.w	8001186 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001034:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <HAL_GPIO_Init+0x2ac>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a49      	ldr	r2, [pc, #292]	; (8001160 <HAL_GPIO_Init+0x2ac>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_GPIO_Init+0x2ac>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800104c:	4a45      	ldr	r2, [pc, #276]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <HAL_GPIO_Init+0x2b4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d00d      	beq.n	8001094 <HAL_GPIO_Init+0x1e0>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a3c      	ldr	r2, [pc, #240]	; (800116c <HAL_GPIO_Init+0x2b8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d007      	beq.n	8001090 <HAL_GPIO_Init+0x1dc>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a3b      	ldr	r2, [pc, #236]	; (8001170 <HAL_GPIO_Init+0x2bc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d101      	bne.n	800108c <HAL_GPIO_Init+0x1d8>
 8001088:	2302      	movs	r3, #2
 800108a:	e004      	b.n	8001096 <HAL_GPIO_Init+0x1e2>
 800108c:	2303      	movs	r3, #3
 800108e:	e002      	b.n	8001096 <HAL_GPIO_Init+0x1e2>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_GPIO_Init+0x1e2>
 8001094:	2300      	movs	r3, #0
 8001096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001098:	f002 0203 	and.w	r2, r2, #3
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	4093      	lsls	r3, r2
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010a6:	492f      	ldr	r1, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	492b      	ldr	r1, [pc, #172]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	600b      	str	r3, [r1, #0]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4927      	ldr	r1, [pc, #156]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4921      	ldr	r1, [pc, #132]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	491d      	ldr	r1, [pc, #116]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8001100:	4013      	ands	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	4917      	ldr	r1, [pc, #92]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	608b      	str	r3, [r1, #8]
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	43db      	mvns	r3, r3
 8001126:	4913      	ldr	r1, [pc, #76]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 8001128:	4013      	ands	r3, r2
 800112a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01f      	beq.n	8001178 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	490d      	ldr	r1, [pc, #52]	; (8001174 <HAL_GPIO_Init+0x2c0>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	60cb      	str	r3, [r1, #12]
 8001144:	e01f      	b.n	8001186 <HAL_GPIO_Init+0x2d2>
 8001146:	bf00      	nop
 8001148:	10320000 	.word	0x10320000
 800114c:	10310000 	.word	0x10310000
 8001150:	10220000 	.word	0x10220000
 8001154:	10210000 	.word	0x10210000
 8001158:	10120000 	.word	0x10120000
 800115c:	10110000 	.word	0x10110000
 8001160:	40021000 	.word	0x40021000
 8001164:	40010000 	.word	0x40010000
 8001168:	40010800 	.word	0x40010800
 800116c:	40010c00 	.word	0x40010c00
 8001170:	40011000 	.word	0x40011000
 8001174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_GPIO_Init+0x2f4>)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	43db      	mvns	r3, r3
 8001180:	4909      	ldr	r1, [pc, #36]	; (80011a8 <HAL_GPIO_Init+0x2f4>)
 8001182:	4013      	ands	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3301      	adds	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f ae96 	bne.w	8000ec8 <HAL_GPIO_Init+0x14>
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	372c      	adds	r7, #44	; 0x2c
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011c8:	e003      	b.n	80011d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	611a      	str	r2, [r3, #16]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43d9      	mvns	r1, r3
 80011fa:	887b      	ldrh	r3, [r7, #2]
 80011fc:	400b      	ands	r3, r1
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	611a      	str	r2, [r3, #16]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
	...

08001210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e12b      	b.n	800147a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fbd6 	bl	80009e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2224      	movs	r2, #36	; 0x24
 8001240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001274:	f000 ffea 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8001278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4a81      	ldr	r2, [pc, #516]	; (8001484 <HAL_I2C_Init+0x274>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d807      	bhi.n	8001294 <HAL_I2C_Init+0x84>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4a80      	ldr	r2, [pc, #512]	; (8001488 <HAL_I2C_Init+0x278>)
 8001288:	4293      	cmp	r3, r2
 800128a:	bf94      	ite	ls
 800128c:	2301      	movls	r3, #1
 800128e:	2300      	movhi	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	e006      	b.n	80012a2 <HAL_I2C_Init+0x92>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4a7d      	ldr	r2, [pc, #500]	; (800148c <HAL_I2C_Init+0x27c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	bf94      	ite	ls
 800129c:	2301      	movls	r3, #1
 800129e:	2300      	movhi	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0e7      	b.n	800147a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4a78      	ldr	r2, [pc, #480]	; (8001490 <HAL_I2C_Init+0x280>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0c9b      	lsrs	r3, r3, #18
 80012b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a6a      	ldr	r2, [pc, #424]	; (8001484 <HAL_I2C_Init+0x274>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d802      	bhi.n	80012e4 <HAL_I2C_Init+0xd4>
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3301      	adds	r3, #1
 80012e2:	e009      	b.n	80012f8 <HAL_I2C_Init+0xe8>
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	4a69      	ldr	r2, [pc, #420]	; (8001494 <HAL_I2C_Init+0x284>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	099b      	lsrs	r3, r3, #6
 80012f6:	3301      	adds	r3, #1
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800130a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	495c      	ldr	r1, [pc, #368]	; (8001484 <HAL_I2C_Init+0x274>)
 8001314:	428b      	cmp	r3, r1
 8001316:	d819      	bhi.n	800134c <HAL_I2C_Init+0x13c>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1e59      	subs	r1, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fbb1 f3f3 	udiv	r3, r1, r3
 8001326:	1c59      	adds	r1, r3, #1
 8001328:	f640 73fc 	movw	r3, #4092	; 0xffc
 800132c:	400b      	ands	r3, r1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00a      	beq.n	8001348 <HAL_I2C_Init+0x138>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1e59      	subs	r1, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001340:	3301      	adds	r3, #1
 8001342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001346:	e051      	b.n	80013ec <HAL_I2C_Init+0x1dc>
 8001348:	2304      	movs	r3, #4
 800134a:	e04f      	b.n	80013ec <HAL_I2C_Init+0x1dc>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d111      	bne.n	8001378 <HAL_I2C_Init+0x168>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1e58      	subs	r0, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6859      	ldr	r1, [r3, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	440b      	add	r3, r1
 8001362:	fbb0 f3f3 	udiv	r3, r0, r3
 8001366:	3301      	adds	r3, #1
 8001368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	e012      	b.n	800139e <HAL_I2C_Init+0x18e>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1e58      	subs	r0, r3, #1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	0099      	lsls	r1, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	fbb0 f3f3 	udiv	r3, r0, r3
 800138e:	3301      	adds	r3, #1
 8001390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001394:	2b00      	cmp	r3, #0
 8001396:	bf0c      	ite	eq
 8001398:	2301      	moveq	r3, #1
 800139a:	2300      	movne	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_I2C_Init+0x196>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e022      	b.n	80013ec <HAL_I2C_Init+0x1dc>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10e      	bne.n	80013cc <HAL_I2C_Init+0x1bc>
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1e58      	subs	r0, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6859      	ldr	r1, [r3, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	440b      	add	r3, r1
 80013bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c0:	3301      	adds	r3, #1
 80013c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ca:	e00f      	b.n	80013ec <HAL_I2C_Init+0x1dc>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e58      	subs	r0, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	0099      	lsls	r1, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	6809      	ldr	r1, [r1, #0]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69da      	ldr	r2, [r3, #28]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	431a      	orrs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800141a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6911      	ldr	r1, [r2, #16]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68d2      	ldr	r2, [r2, #12]
 8001426:	4311      	orrs	r1, r2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	430b      	orrs	r3, r1
 800142e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2220      	movs	r2, #32
 8001466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	000186a0 	.word	0x000186a0
 8001488:	001e847f 	.word	0x001e847f
 800148c:	003d08ff 	.word	0x003d08ff
 8001490:	431bde83 	.word	0x431bde83
 8001494:	10624dd3 	.word	0x10624dd3

08001498 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	461a      	mov	r2, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	4613      	mov	r3, r2
 80014aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff fbc6 	bl	8000c3c <HAL_GetTick>
 80014b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	f040 80e0 	bne.w	8001680 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2319      	movs	r3, #25
 80014c6:	2201      	movs	r2, #1
 80014c8:	4970      	ldr	r1, [pc, #448]	; (800168c <HAL_I2C_Master_Transmit+0x1f4>)
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f964 	bl	8001798 <I2C_WaitOnFlagUntilTimeout>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
 80014d8:	e0d3      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_I2C_Master_Transmit+0x50>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e0cc      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d007      	beq.n	800150e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f042 0201 	orr.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800151c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2221      	movs	r2, #33	; 0x21
 8001522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2210      	movs	r2, #16
 800152a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	893a      	ldrh	r2, [r7, #8]
 800153e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4a50      	ldr	r2, [pc, #320]	; (8001690 <HAL_I2C_Master_Transmit+0x1f8>)
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001550:	8979      	ldrh	r1, [r7, #10]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	6a3a      	ldr	r2, [r7, #32]
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f89c 	bl	8001694 <I2C_MasterRequestWrite>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e08d      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800157c:	e066      	b.n	800164c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	6a39      	ldr	r1, [r7, #32]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 f9de 	bl	8001944 <I2C_WaitOnTXEFlagUntilTimeout>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00d      	beq.n	80015aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2b04      	cmp	r3, #4
 8001594:	d107      	bne.n	80015a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06b      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	3b01      	subs	r3, #1
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d11b      	bne.n	8001620 <HAL_I2C_Master_Transmit+0x188>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d017      	beq.n	8001620 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	781a      	ldrb	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b01      	subs	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	6a39      	ldr	r1, [r7, #32]
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f9ce 	bl	80019c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00d      	beq.n	800164c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	2b04      	cmp	r3, #4
 8001636:	d107      	bne.n	8001648 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001646:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e01a      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d194      	bne.n	800157e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e000      	b.n	8001682 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001680:	2302      	movs	r3, #2
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	00100002 	.word	0x00100002
 8001690:	ffff0000 	.word	0xffff0000

08001694 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af02      	add	r7, sp, #8
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	460b      	mov	r3, r1
 80016a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d006      	beq.n	80016be <I2C_MasterRequestWrite+0x2a>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d003      	beq.n	80016be <I2C_MasterRequestWrite+0x2a>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016bc:	d108      	bne.n	80016d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e00b      	b.n	80016e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	2b12      	cmp	r3, #18
 80016d6:	d107      	bne.n	80016e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f84f 	bl	8001798 <I2C_WaitOnFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00d      	beq.n	800171c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800170e:	d103      	bne.n	8001718 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e035      	b.n	8001788 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001724:	d108      	bne.n	8001738 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001726:	897b      	ldrh	r3, [r7, #10]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	e01b      	b.n	8001770 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001738:	897b      	ldrh	r3, [r7, #10]
 800173a:	11db      	asrs	r3, r3, #7
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 0306 	and.w	r3, r3, #6
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f063 030f 	orn	r3, r3, #15
 8001748:	b2da      	uxtb	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	490e      	ldr	r1, [pc, #56]	; (8001790 <I2C_MasterRequestWrite+0xfc>)
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f875 	bl	8001846 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e010      	b.n	8001788 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001766:	897b      	ldrh	r3, [r7, #10]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4907      	ldr	r1, [pc, #28]	; (8001794 <I2C_MasterRequestWrite+0x100>)
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f865 	bl	8001846 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	00010008 	.word	0x00010008
 8001794:	00010002 	.word	0x00010002

08001798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017a8:	e025      	b.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d021      	beq.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017b2:	f7ff fa43 	bl	8000c3c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d302      	bcc.n	80017c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d116      	bne.n	80017f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2220      	movs	r2, #32
 80017d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f043 0220 	orr.w	r2, r3, #32
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e023      	b.n	800183e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0c1b      	lsrs	r3, r3, #16
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10d      	bne.n	800181c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4013      	ands	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	e00c      	b.n	8001836 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4013      	ands	r3, r2
 8001828:	b29b      	uxth	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	429a      	cmp	r2, r3
 800183a:	d0b6      	beq.n	80017aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001854:	e051      	b.n	80018fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001864:	d123      	bne.n	80018ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001874:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800187e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2220      	movs	r2, #32
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f043 0204 	orr.w	r2, r3, #4
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e046      	b.n	800193c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d021      	beq.n	80018fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b6:	f7ff f9c1 	bl	8000c3c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d302      	bcc.n	80018cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d116      	bne.n	80018fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f043 0220 	orr.w	r2, r3, #32
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e020      	b.n	800193c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10c      	bne.n	800191e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4013      	ands	r3, r2
 8001910:	b29b      	uxth	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	bf14      	ite	ne
 8001916:	2301      	movne	r3, #1
 8001918:	2300      	moveq	r3, #0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	e00b      	b.n	8001936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	43da      	mvns	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4013      	ands	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d18d      	bne.n	8001856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001950:	e02d      	b.n	80019ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f878 	bl	8001a48 <I2C_IsAcknowledgeFailed>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e02d      	b.n	80019be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d021      	beq.n	80019ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196a:	f7ff f967 	bl	8000c3c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	429a      	cmp	r2, r3
 8001978:	d302      	bcc.n	8001980 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d116      	bne.n	80019ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f043 0220 	orr.w	r2, r3, #32
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e007      	b.n	80019be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	2b80      	cmp	r3, #128	; 0x80
 80019ba:	d1ca      	bne.n	8001952 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80019d2:	e02d      	b.n	8001a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f837 	bl	8001a48 <I2C_IsAcknowledgeFailed>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e02d      	b.n	8001a40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ea:	d021      	beq.n	8001a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ec:	f7ff f926 	bl	8000c3c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d302      	bcc.n	8001a02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d116      	bne.n	8001a30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f043 0220 	orr.w	r2, r3, #32
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e007      	b.n	8001a40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d1ca      	bne.n	80019d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d11b      	bne.n	8001a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f043 0204 	orr.w	r2, r3, #4
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e272      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8087 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac4:	4b92      	ldr	r3, [pc, #584]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d00c      	beq.n	8001aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad0:	4b8f      	ldr	r3, [pc, #572]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d112      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5e>
 8001adc:	4b8c      	ldr	r3, [pc, #560]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d10b      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aea:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d06c      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x12c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d168      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e24c      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x76>
 8001b0c:	4b80      	ldr	r3, [pc, #512]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a7f      	ldr	r2, [pc, #508]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e02e      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x98>
 8001b22:	4b7b      	ldr	r3, [pc, #492]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7a      	ldr	r2, [pc, #488]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a77      	ldr	r2, [pc, #476]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e01d      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0xbc>
 8001b46:	4b72      	ldr	r3, [pc, #456]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a71      	ldr	r2, [pc, #452]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a6e      	ldr	r2, [pc, #440]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001b60:	4b6b      	ldr	r3, [pc, #428]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6a      	ldr	r2, [pc, #424]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a67      	ldr	r2, [pc, #412]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d013      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f85c 	bl	8000c3c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff f858 	bl	8000c3c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e200      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	4b5d      	ldr	r3, [pc, #372]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0xe4>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f848 	bl	8000c3c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f844 	bl	8000c3c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1ec      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x10c>
 8001bce:	e000      	b.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bde:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d11c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x18c>
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d116      	bne.n	8001c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x176>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e1c0      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4939      	ldr	r1, [pc, #228]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	e03a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c38:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3e:	f7fe fffd 	bl	8000c3c <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c46:	f7fe fff9 	bl	8000c3c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1a1      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4927      	ldr	r1, [pc, #156]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7fe ffdc 	bl	8000c3c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7fe ffd8 	bl	8000c3c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e180      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d03a      	beq.n	8001d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d019      	beq.n	8001cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe ffbc 	bl	8000c3c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7fe ffb8 	bl	8000c3c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e160      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f000 fac4 	bl	8002274 <RCC_Delay>
 8001cec:	e01c      	b.n	8001d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7fe ffa2 	bl	8000c3c <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfa:	e00f      	b.n	8001d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7fe ff9e 	bl	8000c3c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d908      	bls.n	8001d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e146      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	42420000 	.word	0x42420000
 8001d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b92      	ldr	r3, [pc, #584]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e9      	bne.n	8001cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a6 	beq.w	8001e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a87      	ldr	r2, [pc, #540]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b85      	ldr	r3, [pc, #532]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b82      	ldr	r3, [pc, #520]	; (8001f6c <HAL_RCC_OscConfig+0x4c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6e:	4b7f      	ldr	r3, [pc, #508]	; (8001f6c <HAL_RCC_OscConfig+0x4c8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7e      	ldr	r2, [pc, #504]	; (8001f6c <HAL_RCC_OscConfig+0x4c8>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7fe ff5f 	bl	8000c3c <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7fe ff5b 	bl	8000c3c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b64      	cmp	r3, #100	; 0x64
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e103      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b75      	ldr	r3, [pc, #468]	; (8001f6c <HAL_RCC_OscConfig+0x4c8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x312>
 8001da8:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a6e      	ldr	r2, [pc, #440]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e02d      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x334>
 8001dbe:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a69      	ldr	r2, [pc, #420]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a66      	ldr	r2, [pc, #408]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	e01c      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x356>
 8001de0:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a60      	ldr	r2, [pc, #384]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	4b5e      	ldr	r3, [pc, #376]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a5d      	ldr	r2, [pc, #372]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e00b      	b.n	8001e12 <HAL_RCC_OscConfig+0x36e>
 8001dfa:	4b5b      	ldr	r3, [pc, #364]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a5a      	ldr	r2, [pc, #360]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a57      	ldr	r2, [pc, #348]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7fe ff0f 	bl	8000c3c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe ff0b 	bl	8000c3c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0b1      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e38:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ee      	beq.n	8001e22 <HAL_RCC_OscConfig+0x37e>
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7fe fef9 	bl	8000c3c <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe fef5 	bl	8000c3c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e09b      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e64:	4b40      	ldr	r3, [pc, #256]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1ee      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d105      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8087 	beq.w	8001f9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d061      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d146      	bne.n	8001f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea0:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_RCC_OscConfig+0x4cc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fec9 	bl	8000c3c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7fe fec5 	bl	8000c3c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e06d      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed4:	d108      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ed6:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4921      	ldr	r1, [pc, #132]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a19      	ldr	r1, [r3, #32]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	491b      	ldr	r1, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe fe99 	bl	8000c3c <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7fe fe95 	bl	8000c3c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e03d      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46a>
 8001f2c:	e035      	b.n	8001f9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_RCC_OscConfig+0x4cc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe fe82 	bl	8000c3c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe fe7e 	bl	8000c3c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e026      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x498>
 8001f5a:	e01e      	b.n	8001f9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e019      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x500>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40021000 	.word	0x40021000

08001fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0d0      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d910      	bls.n	8001fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0207 	bic.w	r2, r3, #7
 8001fd2:	4965      	ldr	r1, [pc, #404]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a58      	ldr	r2, [pc, #352]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800200e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002026:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d040      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d115      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d109      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e073      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e06b      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4936      	ldr	r1, [pc, #216]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7fe fdd0 	bl	8000c3c <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7fe fdcc 	bl	8000c3c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e053      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d210      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 0207 	bic.w	r2, r3, #7
 80020de:	4922      	ldr	r1, [pc, #136]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002122:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1cc>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1d0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fd2e 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40022000 	.word	0x40022000
 800216c:	40021000 	.word	0x40021000
 8002170:	08002b1c 	.word	0x08002b1c
 8002174:	20000010 	.word	0x20000010
 8002178:	20000014 	.word	0x20000014

0800217c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b490      	push	{r4, r7}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002182:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_RCC_GetSysClockFreq+0xac>)
 8002184:	1d3c      	adds	r4, r7, #4
 8002186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800218c:	f240 2301 	movw	r3, #513	; 0x201
 8002190:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x40>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x46>
 80021ba:	e02b      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021be:	623b      	str	r3, [r7, #32]
      break;
 80021c0:	e02b      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3328      	adds	r3, #40	; 0x28
 80021cc:	443b      	add	r3, r7
 80021ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0c5b      	lsrs	r3, r3, #17
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	3328      	adds	r3, #40	; 0x28
 80021ea:	443b      	add	r3, r7
 80021ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f6:	fb03 f202 	mul.w	r2, r3, r2
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	e004      	b.n	800220e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	623b      	str	r3, [r7, #32]
      break;
 8002212:	e002      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002216:	623b      	str	r3, [r7, #32]
      break;
 8002218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221a:	6a3b      	ldr	r3, [r7, #32]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bc90      	pop	{r4, r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	08002b0c 	.word	0x08002b0c
 800222c:	40021000 	.word	0x40021000
 8002230:	007a1200 	.word	0x007a1200
 8002234:	003d0900 	.word	0x003d0900

08002238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <HAL_RCC_GetHCLKFreq+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	20000010 	.word	0x20000010

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002250:	f7ff fff2 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	08002b2c 	.word	0x08002b2c

08002274 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <RCC_Delay+0x34>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <RCC_Delay+0x38>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0a5b      	lsrs	r3, r3, #9
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002290:	bf00      	nop
  }
  while (Delay --);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	60fa      	str	r2, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f9      	bne.n	8002290 <RCC_Delay+0x1c>
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000010 	.word	0x20000010
 80022ac:	10624dd3 	.word	0x10624dd3

080022b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e041      	b.n	8002346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fbd6 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f000 fa6a 	bl	80027c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d001      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e035      	b.n	80023d4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_TIM_Base_Start_IT+0x90>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_TIM_Base_Start_IT+0x4e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d004      	beq.n	800239e <HAL_TIM_Base_Start_IT+0x4e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <HAL_TIM_Base_Start_IT+0x94>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d111      	bne.n	80023c2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d010      	beq.n	80023d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c0:	e007      	b.n	80023d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0201 	orr.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40000400 	.word	0x40000400

080023e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d122      	bne.n	8002444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b02      	cmp	r3, #2
 800240a:	d11b      	bne.n	8002444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0202 	mvn.w	r2, #2
 8002414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f9b1 	bl	8002792 <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f9a4 	bl	8002780 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f9b3 	bl	80027a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d122      	bne.n	8002498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b04      	cmp	r3, #4
 800245e:	d11b      	bne.n	8002498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0204 	mvn.w	r2, #4
 8002468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2202      	movs	r2, #2
 800246e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f987 	bl	8002792 <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f97a 	bl	8002780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f989 	bl	80027a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d122      	bne.n	80024ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d11b      	bne.n	80024ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0208 	mvn.w	r2, #8
 80024bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2204      	movs	r2, #4
 80024c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f95d 	bl	8002792 <HAL_TIM_IC_CaptureCallback>
 80024d8:	e005      	b.n	80024e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f950 	bl	8002780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f95f 	bl	80027a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d122      	bne.n	8002540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b10      	cmp	r3, #16
 8002506:	d11b      	bne.n	8002540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0210 	mvn.w	r2, #16
 8002510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2208      	movs	r2, #8
 8002516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f933 	bl	8002792 <HAL_TIM_IC_CaptureCallback>
 800252c:	e005      	b.n	800253a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f926 	bl	8002780 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f935 	bl	80027a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10e      	bne.n	800256c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d107      	bne.n	800256c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0201 	mvn.w	r2, #1
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe f91a 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d10e      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002584:	2b80      	cmp	r3, #128	; 0x80
 8002586:	d107      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fa67 	bl	8002a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8f9 	bl	80027b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0220 	mvn.w	r2, #32
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa32 	bl	8002a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_TIM_ConfigClockSource+0x18>
 800260c:	2302      	movs	r3, #2
 800260e:	e0b3      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x180>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800262e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002636:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002648:	d03e      	beq.n	80026c8 <HAL_TIM_ConfigClockSource+0xd0>
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264e:	f200 8087 	bhi.w	8002760 <HAL_TIM_ConfigClockSource+0x168>
 8002652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002656:	f000 8085 	beq.w	8002764 <HAL_TIM_ConfigClockSource+0x16c>
 800265a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265e:	d87f      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x168>
 8002660:	2b70      	cmp	r3, #112	; 0x70
 8002662:	d01a      	beq.n	800269a <HAL_TIM_ConfigClockSource+0xa2>
 8002664:	2b70      	cmp	r3, #112	; 0x70
 8002666:	d87b      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x168>
 8002668:	2b60      	cmp	r3, #96	; 0x60
 800266a:	d050      	beq.n	800270e <HAL_TIM_ConfigClockSource+0x116>
 800266c:	2b60      	cmp	r3, #96	; 0x60
 800266e:	d877      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x168>
 8002670:	2b50      	cmp	r3, #80	; 0x50
 8002672:	d03c      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0xf6>
 8002674:	2b50      	cmp	r3, #80	; 0x50
 8002676:	d873      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x168>
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d058      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x136>
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d86f      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x168>
 8002680:	2b30      	cmp	r3, #48	; 0x30
 8002682:	d064      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x156>
 8002684:	2b30      	cmp	r3, #48	; 0x30
 8002686:	d86b      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x168>
 8002688:	2b20      	cmp	r3, #32
 800268a:	d060      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x156>
 800268c:	2b20      	cmp	r3, #32
 800268e:	d867      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x168>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d05c      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x156>
 8002694:	2b10      	cmp	r3, #16
 8002696:	d05a      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002698:	e062      	b.n	8002760 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f000 f95c 	bl	8002966 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	609a      	str	r2, [r3, #8]
      break;
 80026c6:	e04e      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f000 f945 	bl	8002966 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ea:	609a      	str	r2, [r3, #8]
      break;
 80026ec:	e03b      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f000 f8bc 	bl	8002878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2150      	movs	r1, #80	; 0x50
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f913 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 800270c:	e02b      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	f000 f8da 	bl	80028d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2160      	movs	r1, #96	; 0x60
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f903 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 800272c:	e01b      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	461a      	mov	r2, r3
 800273c:	f000 f89c 	bl	8002878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f8f3 	bl	8002932 <TIM_ITRx_SetConfig>
      break;
 800274c:	e00b      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f000 f8ea 	bl	8002932 <TIM_ITRx_SetConfig>
        break;
 800275e:	e002      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002760:	bf00      	nop
 8002762:	e000      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002764:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a25      	ldr	r2, [pc, #148]	; (8002870 <TIM_Base_SetConfig+0xa8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d007      	beq.n	80027f0 <TIM_Base_SetConfig+0x28>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e6:	d003      	beq.n	80027f0 <TIM_Base_SetConfig+0x28>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a22      	ldr	r2, [pc, #136]	; (8002874 <TIM_Base_SetConfig+0xac>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d108      	bne.n	8002802 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <TIM_Base_SetConfig+0xa8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d007      	beq.n	800281a <TIM_Base_SetConfig+0x52>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d003      	beq.n	800281a <TIM_Base_SetConfig+0x52>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a17      	ldr	r2, [pc, #92]	; (8002874 <TIM_Base_SetConfig+0xac>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d108      	bne.n	800282c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a07      	ldr	r2, [pc, #28]	; (8002870 <TIM_Base_SetConfig+0xa8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	615a      	str	r2, [r3, #20]
}
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40000400 	.word	0x40000400

08002878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f023 0201 	bic.w	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f023 030a 	bic.w	r3, r3, #10
 80028b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	621a      	str	r2, [r3, #32]
}
 80028ca:	bf00      	nop
 80028cc:	371c      	adds	r7, #28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 0210 	bic.w	r2, r3, #16
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	031b      	lsls	r3, r3, #12
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	621a      	str	r2, [r3, #32]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002932:	b480      	push	{r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002948:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	f043 0307 	orr.w	r3, r3, #7
 8002954:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	609a      	str	r2, [r3, #8]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002966:	b480      	push	{r7}
 8002968:	b087      	sub	sp, #28
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002980:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	021a      	lsls	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4313      	orrs	r3, r2
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e041      	b.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a08:	d004      	beq.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d10c      	bne.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400

08002a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	4d0c      	ldr	r5, [pc, #48]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7e:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a80:	1b64      	subs	r4, r4, r5
 8002a82:	10a4      	asrs	r4, r4, #2
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	f000 f822 	bl	8002ad0 <_init>
 8002a8c:	2600      	movs	r6, #0
 8002a8e:	4d0a      	ldr	r5, [pc, #40]	; (8002ab8 <__libc_init_array+0x40>)
 8002a90:	4c0a      	ldr	r4, [pc, #40]	; (8002abc <__libc_init_array+0x44>)
 8002a92:	1b64      	subs	r4, r4, r5
 8002a94:	10a4      	asrs	r4, r4, #2
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08002b34 	.word	0x08002b34
 8002ab4:	08002b34 	.word	0x08002b34
 8002ab8:	08002b34 	.word	0x08002b34
 8002abc:	08002b38 	.word	0x08002b38

08002ac0 <memset>:
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4402      	add	r2, r0
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d100      	bne.n	8002aca <memset+0xa>
 8002ac8:	4770      	bx	lr
 8002aca:	f803 1b01 	strb.w	r1, [r3], #1
 8002ace:	e7f9      	b.n	8002ac4 <memset+0x4>

08002ad0 <_init>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	bf00      	nop
 8002ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad6:	bc08      	pop	{r3}
 8002ad8:	469e      	mov	lr, r3
 8002ada:	4770      	bx	lr

08002adc <_fini>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	bf00      	nop
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr


lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002764  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028ac  080028ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028ac  080028ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028ac  080028ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080028c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080028c0  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbca  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2d  00000000  00000000  0002bbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  0002e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d96  00000000  00000000  0002f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8b8  00000000  00000000  000460b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084356  00000000  00000000  0005496e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8cc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000355c  00000000  00000000  000d8d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002858 	.word	0x08002858

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002858 	.word	0x08002858

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1d      	ldr	r3, [pc, #116]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a1c      	ldr	r2, [pc, #112]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1a      	ldr	r3, [pc, #104]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b17      	ldr	r3, [pc, #92]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a16      	ldr	r2, [pc, #88]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b14      	ldr	r3, [pc, #80]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a10      	ldr	r2, [pc, #64]	; (80001d8 <MX_GPIO_Init+0x8c>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0e      	ldr	r3, [pc, #56]	; (80001d8 <MX_GPIO_Init+0x8c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2102      	movs	r1, #2
 80001ac:	480b      	ldr	r0, [pc, #44]	; (80001dc <MX_GPIO_Init+0x90>)
 80001ae:	f000 fedb 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001b2:	2302      	movs	r3, #2
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b6:	2301      	movs	r3, #1
 80001b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ba:	2300      	movs	r3, #0
 80001bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001be:	2302      	movs	r3, #2
 80001c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001c2:	f107 0310 	add.w	r3, r7, #16
 80001c6:	4619      	mov	r1, r3
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <MX_GPIO_Init+0x90>)
 80001ca:	f000 fd51 	bl	8000c70 <HAL_GPIO_Init>

}
 80001ce:	bf00      	nop
 80001d0:	3720      	adds	r7, #32
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40010800 	.word	0x40010800

080001e0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af02      	add	r7, sp, #8
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f023 030f 	bic.w	r3, r3, #15
 80001f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	011b      	lsls	r3, r3, #4
 80001f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	f043 030c 	orr.w	r3, r3, #12
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	f043 0308 	orr.w	r3, r3, #8
 8000208:	b2db      	uxtb	r3, r3
 800020a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	f043 030c 	orr.w	r3, r3, #12
 8000212:	b2db      	uxtb	r3, r3
 8000214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000216:	7bbb      	ldrb	r3, [r7, #14]
 8000218:	f043 0308 	orr.w	r3, r3, #8
 800021c:	b2db      	uxtb	r3, r3
 800021e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000220:	f107 0208 	add.w	r2, r7, #8
 8000224:	2364      	movs	r3, #100	; 0x64
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2304      	movs	r3, #4
 800022a:	214e      	movs	r1, #78	; 0x4e
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <lcd_send_cmd+0x5c>)
 800022e:	f000 fff7 	bl	8001220 <HAL_I2C_Master_Transmit>
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000028 	.word	0x20000028

08000240 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af02      	add	r7, sp, #8
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f023 030f 	bic.w	r3, r3, #15
 8000250:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	011b      	lsls	r3, r3, #4
 8000256:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000258:	7bfb      	ldrb	r3, [r7, #15]
 800025a:	f043 030d 	orr.w	r3, r3, #13
 800025e:	b2db      	uxtb	r3, r3
 8000260:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000262:	7bfb      	ldrb	r3, [r7, #15]
 8000264:	f043 0309 	orr.w	r3, r3, #9
 8000268:	b2db      	uxtb	r3, r3
 800026a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800026c:	7bbb      	ldrb	r3, [r7, #14]
 800026e:	f043 030d 	orr.w	r3, r3, #13
 8000272:	b2db      	uxtb	r3, r3
 8000274:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000276:	7bbb      	ldrb	r3, [r7, #14]
 8000278:	f043 0309 	orr.w	r3, r3, #9
 800027c:	b2db      	uxtb	r3, r3
 800027e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000280:	f107 0208 	add.w	r2, r7, #8
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	9300      	str	r3, [sp, #0]
 8000288:	2304      	movs	r3, #4
 800028a:	214e      	movs	r1, #78	; 0x4e
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <lcd_send_data+0x5c>)
 800028e:	f000 ffc7 	bl	8001220 <HAL_I2C_Master_Transmit>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028

080002a0 <lcd_init>:

void lcd_init (void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002a4:	2032      	movs	r0, #50	; 0x32
 80002a6:	f000 fbb1 	bl	8000a0c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002aa:	2030      	movs	r0, #48	; 0x30
 80002ac:	f7ff ff98 	bl	80001e0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002b0:	2005      	movs	r0, #5
 80002b2:	f000 fbab 	bl	8000a0c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002b6:	2030      	movs	r0, #48	; 0x30
 80002b8:	f7ff ff92 	bl	80001e0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fba5 	bl	8000a0c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002c2:	2030      	movs	r0, #48	; 0x30
 80002c4:	f7ff ff8c 	bl	80001e0 <lcd_send_cmd>
	HAL_Delay(10);
 80002c8:	200a      	movs	r0, #10
 80002ca:	f000 fb9f 	bl	8000a0c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002ce:	2020      	movs	r0, #32
 80002d0:	f7ff ff86 	bl	80001e0 <lcd_send_cmd>
	HAL_Delay(10);
 80002d4:	200a      	movs	r0, #10
 80002d6:	f000 fb99 	bl	8000a0c <HAL_Delay>

  // dislay initialisation
  // lcd cmd meaning: http://www.firmcodes.com/microcontrollers/8051-3/interfacing-lcd-with-8051/lcd-commands-and-understanding-of-lcd/
	lcd_send_cmd (0x28); // init 2 lines and 5x7 matrix 4-bit mode
 80002da:	2028      	movs	r0, #40	; 0x28
 80002dc:	f7ff ff80 	bl	80001e0 <lcd_send_cmd>
	HAL_Delay(1);
 80002e0:	2001      	movs	r0, #1
 80002e2:	f000 fb93 	bl	8000a0c <HAL_Delay>
	lcd_send_cmd (0x08); // display off Cursor off
 80002e6:	2008      	movs	r0, #8
 80002e8:	f7ff ff7a 	bl	80001e0 <lcd_send_cmd>
	HAL_Delay(1);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f000 fb8d 	bl	8000a0c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80002f2:	2001      	movs	r0, #1
 80002f4:	f7ff ff74 	bl	80001e0 <lcd_send_cmd>
	HAL_Delay(1);
 80002f8:	2001      	movs	r0, #1
 80002fa:	f000 fb87 	bl	8000a0c <HAL_Delay>
	HAL_Delay(1);
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 fb84 	bl	8000a0c <HAL_Delay>
	lcd_send_cmd (0x06); // shift cursor to right
 8000304:	2006      	movs	r0, #6
 8000306:	f7ff ff6b 	bl	80001e0 <lcd_send_cmd>
	HAL_Delay(1);
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fb7e 	bl	8000a0c <HAL_Delay>
	lcd_send_cmd (0x0C); // display on cursor off
 8000310:	200c      	movs	r0, #12
 8000312:	f7ff ff65 	bl	80001e0 <lcd_send_cmd>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}

0800031a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000322:	e006      	b.n	8000332 <lcd_send_string+0x18>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	607a      	str	r2, [r7, #4]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff87 	bl	8000240 <lcd_send_data>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f4      	bne.n	8000324 <lcd_send_string+0xa>
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <lcd_clear>:

void lcd_clear (void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800034a:	2080      	movs	r0, #128	; 0x80
 800034c:	f7ff ff48 	bl	80001e0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	e005      	b.n	8000362 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000356:	2020      	movs	r0, #32
 8000358:	f7ff ff72 	bl	8000240 <lcd_send_data>
	for (int i=0; i<70; i++)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2b45      	cmp	r3, #69	; 0x45
 8000366:	ddf6      	ble.n	8000356 <lcd_clear+0x12>
	}
}
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	6039      	str	r1, [r7, #0]
    switch (row)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d003      	beq.n	800038a <lcd_put_cur+0x18>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d005      	beq.n	8000394 <lcd_put_cur+0x22>
 8000388:	e009      	b.n	800039e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000390:	603b      	str	r3, [r7, #0]
            break;
 8000392:	e004      	b.n	800039e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800039a:	603b      	str	r3, [r7, #0]
            break;
 800039c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff1c 	bl	80001e0 <lcd_send_cmd>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_I2C1_Init+0x50>)
 80003b6:	4a13      	ldr	r2, [pc, #76]	; (8000404 <MX_I2C1_Init+0x54>)
 80003b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_I2C1_Init+0x50>)
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_I2C1_Init+0x58>)
 80003be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_I2C1_Init+0x50>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_I2C1_Init+0x50>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_I2C1_Init+0x50>)
 80003ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <MX_I2C1_Init+0x50>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_I2C1_Init+0x50>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <MX_I2C1_Init+0x50>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_I2C1_Init+0x50>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ec:	4804      	ldr	r0, [pc, #16]	; (8000400 <MX_I2C1_Init+0x50>)
 80003ee:	f000 fdd3 	bl	8000f98 <HAL_I2C_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003f8:	f000 f8d3 	bl	80005a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000028 	.word	0x20000028
 8000404:	40005400 	.word	0x40005400
 8000408:	000186a0 	.word	0x000186a0

0800040c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08a      	sub	sp, #40	; 0x28
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0314 	add.w	r3, r7, #20
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a1d      	ldr	r2, [pc, #116]	; (800049c <HAL_I2C_MspInit+0x90>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d132      	bne.n	8000492 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <HAL_I2C_MspInit+0x94>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <HAL_I2C_MspInit+0x94>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <HAL_I2C_MspInit+0x94>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	613b      	str	r3, [r7, #16]
 8000442:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000444:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800044a:	2312      	movs	r3, #18
 800044c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800044e:	2301      	movs	r3, #1
 8000450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	4812      	ldr	r0, [pc, #72]	; (80004a4 <HAL_I2C_MspInit+0x98>)
 800045a:	f000 fc09 	bl	8000c70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800045e:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_I2C_MspInit+0x9c>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	627b      	str	r3, [r7, #36]	; 0x24
 8000464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000466:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800046a:	627b      	str	r3, [r7, #36]	; 0x24
 800046c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	627b      	str	r3, [r7, #36]	; 0x24
 8000474:	4a0c      	ldr	r2, [pc, #48]	; (80004a8 <HAL_I2C_MspInit+0x9c>)
 8000476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000478:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_I2C_MspInit+0x94>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <HAL_I2C_MspInit+0x94>)
 8000480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <HAL_I2C_MspInit+0x94>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000492:	bf00      	nop
 8000494:	3728      	adds	r7, #40	; 0x28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40005400 	.word	0x40005400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010c00 	.word	0x40010c00
 80004a8:	40010000 	.word	0x40010000

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa4a 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f826 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f7ff fe48 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004bc:	f7ff ff78 	bl	80003b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80004c0:	f000 f9ac 	bl	800081c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <main+0x4c>)
 80004c6:	f001 fe07 	bl	80020d8 <HAL_TIM_Base_Start_IT>

  lcd_init ();
 80004ca:	f7ff fee9 	bl	80002a0 <lcd_init>

  lcd_send_string ("FROM BK");
 80004ce:	480b      	ldr	r0, [pc, #44]	; (80004fc <main+0x50>)
 80004d0:	f7ff ff23 	bl	800031a <lcd_send_string>

  HAL_Delay(1000);
 80004d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d8:	f000 fa98 	bl	8000a0c <HAL_Delay>

  lcd_put_cur(1, 0);
 80004dc:	2100      	movs	r1, #0
 80004de:	2001      	movs	r0, #1
 80004e0:	f7ff ff47 	bl	8000372 <lcd_put_cur>

  lcd_send_string("WITH LOVE");
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <main+0x54>)
 80004e6:	f7ff ff18 	bl	800031a <lcd_send_string>

  HAL_Delay(2000);
 80004ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004ee:	f000 fa8d 	bl	8000a0c <HAL_Delay>

  lcd_clear ();
 80004f2:	f7ff ff27 	bl	8000344 <lcd_clear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x4a>
 80004f8:	200000cc 	.word	0x200000cc
 80004fc:	08002870 	.word	0x08002870
 8000500:	08002878 	.word	0x08002878

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b090      	sub	sp, #64	; 0x40
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 f998 	bl	8002848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000526:	2301      	movs	r3, #1
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000538:	2302      	movs	r3, #2
 800053a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000542:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	4618      	mov	r0, r3
 800054e:	f001 f96d 	bl	800182c <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000558:	f000 f823 	bl	80005a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000560:	2302      	movs	r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2102      	movs	r1, #2
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fbda 	bl	8001d30 <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000582:	f000 f80e 	bl	80005a2 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3740      	adds	r7, #64	; 0x40
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
	timerRun();
 8000596:	f000 f809 	bl	80005ac <timerRun>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a6:	b672      	cpsid	i
}
 80005a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005aa:	e7fe      	b.n	80005aa <Error_Handler+0x8>

080005ac <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80005b0:	4b51      	ldr	r3, [pc, #324]	; (80006f8 <timerRun+0x14c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dd0b      	ble.n	80005d0 <timerRun+0x24>
		timer1_counter--;
 80005b8:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <timerRun+0x14c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3b01      	subs	r3, #1
 80005be:	4a4e      	ldr	r2, [pc, #312]	; (80006f8 <timerRun+0x14c>)
 80005c0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 80005c2:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <timerRun+0x14c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d102      	bne.n	80005d0 <timerRun+0x24>
			timer1_flag = 1;
 80005ca:	4b4c      	ldr	r3, [pc, #304]	; (80006fc <timerRun+0x150>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 80005d0:	4b4b      	ldr	r3, [pc, #300]	; (8000700 <timerRun+0x154>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dd0b      	ble.n	80005f0 <timerRun+0x44>
		timer2_counter--;
 80005d8:	4b49      	ldr	r3, [pc, #292]	; (8000700 <timerRun+0x154>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a48      	ldr	r2, [pc, #288]	; (8000700 <timerRun+0x154>)
 80005e0:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <timerRun+0x154>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <timerRun+0x44>
			timer2_flag = 1;
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <timerRun+0x158>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 80005f0:	4b45      	ldr	r3, [pc, #276]	; (8000708 <timerRun+0x15c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dd0b      	ble.n	8000610 <timerRun+0x64>
		timer3_counter--;
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <timerRun+0x15c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	4a42      	ldr	r2, [pc, #264]	; (8000708 <timerRun+0x15c>)
 8000600:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000602:	4b41      	ldr	r3, [pc, #260]	; (8000708 <timerRun+0x15c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d102      	bne.n	8000610 <timerRun+0x64>
			timer3_flag = 1;
 800060a:	4b40      	ldr	r3, [pc, #256]	; (800070c <timerRun+0x160>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <timerRun+0x164>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	dd0b      	ble.n	8000630 <timerRun+0x84>
		timer4_counter--;
 8000618:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <timerRun+0x164>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3b01      	subs	r3, #1
 800061e:	4a3c      	ldr	r2, [pc, #240]	; (8000710 <timerRun+0x164>)
 8000620:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <timerRun+0x164>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d102      	bne.n	8000630 <timerRun+0x84>
			timer4_flag = 1;
 800062a:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <timerRun+0x168>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <timerRun+0x16c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	dd0b      	ble.n	8000650 <timerRun+0xa4>
		timer5_counter--;
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <timerRun+0x16c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3b01      	subs	r3, #1
 800063e:	4a36      	ldr	r2, [pc, #216]	; (8000718 <timerRun+0x16c>)
 8000640:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8000642:	4b35      	ldr	r3, [pc, #212]	; (8000718 <timerRun+0x16c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <timerRun+0xa4>
			timer5_flag = 1;
 800064a:	4b34      	ldr	r3, [pc, #208]	; (800071c <timerRun+0x170>)
 800064c:	2201      	movs	r2, #1
 800064e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <timerRun+0x174>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	dd0b      	ble.n	8000670 <timerRun+0xc4>
		timer6_counter--;
 8000658:	4b31      	ldr	r3, [pc, #196]	; (8000720 <timerRun+0x174>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3b01      	subs	r3, #1
 800065e:	4a30      	ldr	r2, [pc, #192]	; (8000720 <timerRun+0x174>)
 8000660:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <timerRun+0x174>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d102      	bne.n	8000670 <timerRun+0xc4>
			timer6_flag = 1;
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <timerRun+0x178>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8000670:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <timerRun+0x17c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	dd0b      	ble.n	8000690 <timerRun+0xe4>
		timer7_counter--;
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <timerRun+0x17c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <timerRun+0x17c>)
 8000680:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 8000682:	4b29      	ldr	r3, [pc, #164]	; (8000728 <timerRun+0x17c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <timerRun+0xe4>
			timer7_flag = 1;
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <timerRun+0x180>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <timerRun+0x184>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	dd0b      	ble.n	80006b0 <timerRun+0x104>
		timer8_counter--;
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <timerRun+0x184>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a24      	ldr	r2, [pc, #144]	; (8000730 <timerRun+0x184>)
 80006a0:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <timerRun+0x184>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d102      	bne.n	80006b0 <timerRun+0x104>
			timer8_flag = 1;
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <timerRun+0x188>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <timerRun+0x18c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dd0b      	ble.n	80006d0 <timerRun+0x124>
		timer9_counter--;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <timerRun+0x18c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b01      	subs	r3, #1
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <timerRun+0x18c>)
 80006c0:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <timerRun+0x18c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d102      	bne.n	80006d0 <timerRun+0x124>
			timer9_flag = 1;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <timerRun+0x190>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <timerRun+0x194>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	dd0b      	ble.n	80006f0 <timerRun+0x144>
		timer10_counter--;
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <timerRun+0x194>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3b01      	subs	r3, #1
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <timerRun+0x194>)
 80006e0:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <timerRun+0x194>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d102      	bne.n	80006f0 <timerRun+0x144>
			timer10_flag = 1;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <timerRun+0x198>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
		}
	}
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	20000080 	.word	0x20000080
 8000700:	20000084 	.word	0x20000084
 8000704:	20000088 	.word	0x20000088
 8000708:	2000008c 	.word	0x2000008c
 800070c:	20000090 	.word	0x20000090
 8000710:	20000094 	.word	0x20000094
 8000714:	20000098 	.word	0x20000098
 8000718:	2000009c 	.word	0x2000009c
 800071c:	200000a0 	.word	0x200000a0
 8000720:	200000a4 	.word	0x200000a4
 8000724:	200000a8 	.word	0x200000a8
 8000728:	200000ac 	.word	0x200000ac
 800072c:	200000b0 	.word	0x200000b0
 8000730:	200000b4 	.word	0x200000b4
 8000734:	200000b8 	.word	0x200000b8
 8000738:	200000bc 	.word	0x200000bc
 800073c:	200000c0 	.word	0x200000c0
 8000740:	200000c4 	.word	0x200000c4
 8000744:	200000c8 	.word	0x200000c8

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <HAL_MspInit+0x5c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x5c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_MspInit+0x60>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_MspInit+0x60>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr

080007ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 f8ef 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <TIM2_IRQHandler+0x10>)
 8000802:	f001 fcb5 	bl	8002170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000cc 	.word	0x200000cc

08000810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	463b      	mov	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_TIM2_Init+0x94>)
 800083a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000842:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_TIM2_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000850:	2263      	movs	r2, #99	; 0x63
 8000852:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_TIM2_Init+0x94>)
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <MX_TIM2_Init+0x94>)
 8000862:	f001 fbe9 	bl	8002038 <HAL_TIM_Base_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800086c:	f7ff fe99 	bl	80005a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_TIM2_Init+0x94>)
 800087e:	f001 fd7f 	bl	8002380 <HAL_TIM_ConfigClockSource>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000888:	f7ff fe8b 	bl	80005a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_TIM2_Init+0x94>)
 800089a:	f001 ff47 	bl	800272c <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008a4:	f7ff fe7d 	bl	80005a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000cc 	.word	0x200000cc

080008b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c4:	d113      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	201c      	movs	r0, #28
 80008e4:	f000 f98d 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e8:	201c      	movs	r0, #28
 80008ea:	f000 f9a6 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f7ff ff75 	bl	8000810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f001 ff6b 	bl	8002800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fdbf 	bl	80004ac <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000938:	080028b4 	.word	0x080028b4
  ldr r2, =_sbss
 800093c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000940:	20000118 	.word	0x20000118

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f947 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fef0 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f95f 	bl	8000c56 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f927 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000114 	.word	0x20000114

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000114 	.word	0x20000114

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4906      	ldr	r1, [pc, #24]	; (8000aec <__NVIC_EnableIRQ+0x34>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff90 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff2d 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff42 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff90 	bl	8000b44 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5f 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff35 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b08b      	sub	sp, #44	; 0x2c
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e161      	b.n	8000f48 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c84:	2201      	movs	r2, #1
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8150 	bne.w	8000f42 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a97      	ldr	r2, [pc, #604]	; (8000f04 <HAL_GPIO_Init+0x294>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d05e      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cac:	4a95      	ldr	r2, [pc, #596]	; (8000f04 <HAL_GPIO_Init+0x294>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d875      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cb2:	4a95      	ldr	r2, [pc, #596]	; (8000f08 <HAL_GPIO_Init+0x298>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d058      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cb8:	4a93      	ldr	r2, [pc, #588]	; (8000f08 <HAL_GPIO_Init+0x298>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d86f      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cbe:	4a93      	ldr	r2, [pc, #588]	; (8000f0c <HAL_GPIO_Init+0x29c>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d052      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cc4:	4a91      	ldr	r2, [pc, #580]	; (8000f0c <HAL_GPIO_Init+0x29c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d869      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cca:	4a91      	ldr	r2, [pc, #580]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d04c      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cd0:	4a8f      	ldr	r2, [pc, #572]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d863      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cd6:	4a8f      	ldr	r2, [pc, #572]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d046      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cdc:	4a8d      	ldr	r2, [pc, #564]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d85d      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d82a      	bhi.n	8000d3c <HAL_GPIO_Init+0xcc>
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d859      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cea:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <HAL_GPIO_Init+0x80>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d45 	.word	0x08000d45
 8000cf8:	08000d57 	.word	0x08000d57
 8000cfc:	08000d99 	.word	0x08000d99
 8000d00:	08000d9f 	.word	0x08000d9f
 8000d04:	08000d9f 	.word	0x08000d9f
 8000d08:	08000d9f 	.word	0x08000d9f
 8000d0c:	08000d9f 	.word	0x08000d9f
 8000d10:	08000d9f 	.word	0x08000d9f
 8000d14:	08000d9f 	.word	0x08000d9f
 8000d18:	08000d9f 	.word	0x08000d9f
 8000d1c:	08000d9f 	.word	0x08000d9f
 8000d20:	08000d9f 	.word	0x08000d9f
 8000d24:	08000d9f 	.word	0x08000d9f
 8000d28:	08000d9f 	.word	0x08000d9f
 8000d2c:	08000d9f 	.word	0x08000d9f
 8000d30:	08000d9f 	.word	0x08000d9f
 8000d34:	08000d4d 	.word	0x08000d4d
 8000d38:	08000d61 	.word	0x08000d61
 8000d3c:	4a76      	ldr	r2, [pc, #472]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d42:	e02c      	b.n	8000d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e029      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	3304      	adds	r3, #4
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e024      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e01f      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	330c      	adds	r3, #12
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e01a      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d72:	2304      	movs	r3, #4
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e013      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d105      	bne.n	8000d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d80:	2308      	movs	r3, #8
 8000d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	611a      	str	r2, [r3, #16]
          break;
 8000d8a:	e009      	b.n	8000da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	615a      	str	r2, [r3, #20]
          break;
 8000d96:	e003      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          break;
 8000d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2bff      	cmp	r3, #255	; 0xff
 8000da4:	d801      	bhi.n	8000daa <HAL_GPIO_Init+0x13a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <HAL_GPIO_Init+0x13e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3304      	adds	r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d802      	bhi.n	8000dbc <HAL_GPIO_Init+0x14c>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x152>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	3b08      	subs	r3, #8
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	210f      	movs	r1, #15
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	6a39      	ldr	r1, [r7, #32]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80a9 	beq.w	8000f42 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df0:	4b4a      	ldr	r3, [pc, #296]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <HAL_GPIO_Init+0x2b4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00d      	beq.n	8000e50 <HAL_GPIO_Init+0x1e0>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3c      	ldr	r2, [pc, #240]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d007      	beq.n	8000e4c <HAL_GPIO_Init+0x1dc>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3b      	ldr	r2, [pc, #236]	; (8000f2c <HAL_GPIO_Init+0x2bc>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d101      	bne.n	8000e48 <HAL_GPIO_Init+0x1d8>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e004      	b.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e002      	b.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e000      	b.n	8000e52 <HAL_GPIO_Init+0x1e2>
 8000e50:	2300      	movs	r3, #0
 8000e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e54:	f002 0203 	and.w	r2, r2, #3
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	4093      	lsls	r3, r2
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e62:	492f      	ldr	r1, [pc, #188]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d006      	beq.n	8000e8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	492b      	ldr	r1, [pc, #172]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	600b      	str	r3, [r1, #0]
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4927      	ldr	r1, [pc, #156]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000e94:	4013      	ands	r3, r2
 8000e96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	4921      	ldr	r1, [pc, #132]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	604b      	str	r3, [r1, #4]
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	491d      	ldr	r1, [pc, #116]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	4917      	ldr	r1, [pc, #92]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	608b      	str	r3, [r1, #8]
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4913      	ldr	r1, [pc, #76]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d01f      	beq.n	8000f34 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	490d      	ldr	r1, [pc, #52]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	60cb      	str	r3, [r1, #12]
 8000f00:	e01f      	b.n	8000f42 <HAL_GPIO_Init+0x2d2>
 8000f02:	bf00      	nop
 8000f04:	10320000 	.word	0x10320000
 8000f08:	10310000 	.word	0x10310000
 8000f0c:	10220000 	.word	0x10220000
 8000f10:	10210000 	.word	0x10210000
 8000f14:	10120000 	.word	0x10120000
 8000f18:	10110000 	.word	0x10110000
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_GPIO_Init+0x2f4>)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	4909      	ldr	r1, [pc, #36]	; (8000f64 <HAL_GPIO_Init+0x2f4>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	3301      	adds	r3, #1
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f47f ae96 	bne.w	8000c84 <HAL_GPIO_Init+0x14>
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	372c      	adds	r7, #44	; 0x2c
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	611a      	str	r2, [r3, #16]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e12b      	b.n	8001202 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d106      	bne.n	8000fc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fa24 	bl	800040c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2224      	movs	r2, #36	; 0x24
 8000fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0201 	bic.w	r2, r2, #1
 8000fda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ffa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ffc:	f000 ffea 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8001000:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4a81      	ldr	r2, [pc, #516]	; (800120c <HAL_I2C_Init+0x274>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d807      	bhi.n	800101c <HAL_I2C_Init+0x84>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4a80      	ldr	r2, [pc, #512]	; (8001210 <HAL_I2C_Init+0x278>)
 8001010:	4293      	cmp	r3, r2
 8001012:	bf94      	ite	ls
 8001014:	2301      	movls	r3, #1
 8001016:	2300      	movhi	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	e006      	b.n	800102a <HAL_I2C_Init+0x92>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4a7d      	ldr	r2, [pc, #500]	; (8001214 <HAL_I2C_Init+0x27c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	bf94      	ite	ls
 8001024:	2301      	movls	r3, #1
 8001026:	2300      	movhi	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0e7      	b.n	8001202 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4a78      	ldr	r2, [pc, #480]	; (8001218 <HAL_I2C_Init+0x280>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9b      	lsrs	r3, r3, #18
 800103c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	430a      	orrs	r2, r1
 8001050:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a6a      	ldr	r2, [pc, #424]	; (800120c <HAL_I2C_Init+0x274>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d802      	bhi.n	800106c <HAL_I2C_Init+0xd4>
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3301      	adds	r3, #1
 800106a:	e009      	b.n	8001080 <HAL_I2C_Init+0xe8>
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001072:	fb02 f303 	mul.w	r3, r2, r3
 8001076:	4a69      	ldr	r2, [pc, #420]	; (800121c <HAL_I2C_Init+0x284>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	099b      	lsrs	r3, r3, #6
 800107e:	3301      	adds	r3, #1
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	430b      	orrs	r3, r1
 8001086:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001092:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	495c      	ldr	r1, [pc, #368]	; (800120c <HAL_I2C_Init+0x274>)
 800109c:	428b      	cmp	r3, r1
 800109e:	d819      	bhi.n	80010d4 <HAL_I2C_Init+0x13c>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1e59      	subs	r1, r3, #1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ae:	1c59      	adds	r1, r3, #1
 80010b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010b4:	400b      	ands	r3, r1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00a      	beq.n	80010d0 <HAL_I2C_Init+0x138>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1e59      	subs	r1, r3, #1
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c8:	3301      	adds	r3, #1
 80010ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ce:	e051      	b.n	8001174 <HAL_I2C_Init+0x1dc>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e04f      	b.n	8001174 <HAL_I2C_Init+0x1dc>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d111      	bne.n	8001100 <HAL_I2C_Init+0x168>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1e58      	subs	r0, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6859      	ldr	r1, [r3, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	440b      	add	r3, r1
 80010ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	e012      	b.n	8001126 <HAL_I2C_Init+0x18e>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1e58      	subs	r0, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	0099      	lsls	r1, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	fbb0 f3f3 	udiv	r3, r0, r3
 8001116:	3301      	adds	r3, #1
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_Init+0x196>
 800112a:	2301      	movs	r3, #1
 800112c:	e022      	b.n	8001174 <HAL_I2C_Init+0x1dc>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10e      	bne.n	8001154 <HAL_I2C_Init+0x1bc>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1e58      	subs	r0, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6859      	ldr	r1, [r3, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	440b      	add	r3, r1
 8001144:	fbb0 f3f3 	udiv	r3, r0, r3
 8001148:	3301      	adds	r3, #1
 800114a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800114e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001152:	e00f      	b.n	8001174 <HAL_I2C_Init+0x1dc>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1e58      	subs	r0, r3, #1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6859      	ldr	r1, [r3, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	0099      	lsls	r1, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	fbb0 f3f3 	udiv	r3, r0, r3
 800116a:	3301      	adds	r3, #1
 800116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	6809      	ldr	r1, [r1, #0]
 8001178:	4313      	orrs	r3, r2
 800117a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69da      	ldr	r2, [r3, #28]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6911      	ldr	r1, [r2, #16]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68d2      	ldr	r2, [r2, #12]
 80011ae:	4311      	orrs	r1, r2
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2220      	movs	r2, #32
 80011ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	000186a0 	.word	0x000186a0
 8001210:	001e847f 	.word	0x001e847f
 8001214:	003d08ff 	.word	0x003d08ff
 8001218:	431bde83 	.word	0x431bde83
 800121c:	10624dd3 	.word	0x10624dd3

08001220 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af02      	add	r7, sp, #8
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	461a      	mov	r2, r3
 800122c:	460b      	mov	r3, r1
 800122e:	817b      	strh	r3, [r7, #10]
 8001230:	4613      	mov	r3, r2
 8001232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fbe0 	bl	80009f8 <HAL_GetTick>
 8001238:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b20      	cmp	r3, #32
 8001244:	f040 80e0 	bne.w	8001408 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2319      	movs	r3, #25
 800124e:	2201      	movs	r2, #1
 8001250:	4970      	ldr	r1, [pc, #448]	; (8001414 <HAL_I2C_Master_Transmit+0x1f4>)
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 f964 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800125e:	2302      	movs	r3, #2
 8001260:	e0d3      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_I2C_Master_Transmit+0x50>
 800126c:	2302      	movs	r3, #2
 800126e:	e0cc      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b01      	cmp	r3, #1
 8001284:	d007      	beq.n	8001296 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0201 	orr.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2221      	movs	r2, #33	; 0x21
 80012aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2210      	movs	r2, #16
 80012b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	893a      	ldrh	r2, [r7, #8]
 80012c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4a50      	ldr	r2, [pc, #320]	; (8001418 <HAL_I2C_Master_Transmit+0x1f8>)
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012d8:	8979      	ldrh	r1, [r7, #10]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	6a3a      	ldr	r2, [r7, #32]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f89c 	bl	800141c <I2C_MasterRequestWrite>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e08d      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001304:	e066      	b.n	80013d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	6a39      	ldr	r1, [r7, #32]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 f9de 	bl	80016cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00d      	beq.n	8001332 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2b04      	cmp	r3, #4
 800131c:	d107      	bne.n	800132e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800132c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06b      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134c:	b29b      	uxth	r3, r3
 800134e:	3b01      	subs	r3, #1
 8001350:	b29a      	uxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135a:	3b01      	subs	r3, #1
 800135c:	b29a      	uxth	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b04      	cmp	r3, #4
 800136e:	d11b      	bne.n	80013a8 <HAL_I2C_Master_Transmit+0x188>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	d017      	beq.n	80013a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001392:	b29b      	uxth	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	6a39      	ldr	r1, [r7, #32]
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 f9ce 	bl	800174e <I2C_WaitOnBTFFlagUntilTimeout>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00d      	beq.n	80013d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d107      	bne.n	80013d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e01a      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d194      	bne.n	8001306 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2220      	movs	r2, #32
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	e000      	b.n	800140a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001408:	2302      	movs	r3, #2
  }
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	00100002 	.word	0x00100002
 8001418:	ffff0000 	.word	0xffff0000

0800141c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af02      	add	r7, sp, #8
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	460b      	mov	r3, r1
 800142a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b08      	cmp	r3, #8
 8001436:	d006      	beq.n	8001446 <I2C_MasterRequestWrite+0x2a>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d003      	beq.n	8001446 <I2C_MasterRequestWrite+0x2a>
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001444:	d108      	bne.n	8001458 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e00b      	b.n	8001470 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	2b12      	cmp	r3, #18
 800145e:	d107      	bne.n	8001470 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800146e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f84f 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00d      	beq.n	80014a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001496:	d103      	bne.n	80014a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e035      	b.n	8001510 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014ac:	d108      	bne.n	80014c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014ae:	897b      	ldrh	r3, [r7, #10]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	e01b      	b.n	80014f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014c0:	897b      	ldrh	r3, [r7, #10]
 80014c2:	11db      	asrs	r3, r3, #7
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0306 	and.w	r3, r3, #6
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	f063 030f 	orn	r3, r3, #15
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	490e      	ldr	r1, [pc, #56]	; (8001518 <I2C_MasterRequestWrite+0xfc>)
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f875 	bl	80015ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e010      	b.n	8001510 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014ee:	897b      	ldrh	r3, [r7, #10]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <I2C_MasterRequestWrite+0x100>)
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f865 	bl	80015ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	00010008 	.word	0x00010008
 800151c:	00010002 	.word	0x00010002

08001520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	4613      	mov	r3, r2
 800152e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001530:	e025      	b.n	800157e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001538:	d021      	beq.n	800157e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153a:	f7ff fa5d 	bl	80009f8 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d302      	bcc.n	8001550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d116      	bne.n	800157e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2220      	movs	r2, #32
 800155a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f043 0220 	orr.w	r2, r3, #32
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e023      	b.n	80015c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10d      	bne.n	80015a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	43da      	mvns	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4013      	ands	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	e00c      	b.n	80015be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4013      	ands	r3, r2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf0c      	ite	eq
 80015b6:	2301      	moveq	r3, #1
 80015b8:	2300      	movne	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d0b6      	beq.n	8001532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015dc:	e051      	b.n	8001682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ec:	d123      	bne.n	8001636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001606:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2220      	movs	r2, #32
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f043 0204 	orr.w	r2, r3, #4
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e046      	b.n	80016c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d021      	beq.n	8001682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163e:	f7ff f9db 	bl	80009f8 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	d302      	bcc.n	8001654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d116      	bne.n	8001682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2220      	movs	r2, #32
 800165e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f043 0220 	orr.w	r2, r3, #32
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e020      	b.n	80016c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	d10c      	bne.n	80016a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4013      	ands	r3, r2
 8001698:	b29b      	uxth	r3, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	e00b      	b.n	80016be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	43da      	mvns	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	4013      	ands	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d18d      	bne.n	80015de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016d8:	e02d      	b.n	8001736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f878 	bl	80017d0 <I2C_IsAcknowledgeFailed>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e02d      	b.n	8001746 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f0:	d021      	beq.n	8001736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f2:	f7ff f981 	bl	80009f8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d302      	bcc.n	8001708 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d116      	bne.n	8001736 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2220      	movs	r2, #32
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f043 0220 	orr.w	r2, r3, #32
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e007      	b.n	8001746 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001740:	2b80      	cmp	r3, #128	; 0x80
 8001742:	d1ca      	bne.n	80016da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800175a:	e02d      	b.n	80017b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 f837 	bl	80017d0 <I2C_IsAcknowledgeFailed>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e02d      	b.n	80017c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001772:	d021      	beq.n	80017b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001774:	f7ff f940 	bl	80009f8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	429a      	cmp	r2, r3
 8001782:	d302      	bcc.n	800178a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2220      	movs	r2, #32
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f043 0220 	orr.w	r2, r3, #32
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e007      	b.n	80017c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d1ca      	bne.n	800175c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d11b      	bne.n	8001820 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f043 0204 	orr.w	r2, r3, #4
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e272      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8087 	beq.w	800195a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800184c:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d00c      	beq.n	8001872 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001858:	4b8f      	ldr	r3, [pc, #572]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d112      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
 8001864:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d10b      	bne.n	800188a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001872:	4b89      	ldr	r3, [pc, #548]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d06c      	beq.n	8001958 <HAL_RCC_OscConfig+0x12c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d168      	bne.n	8001958 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e24c      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x76>
 8001894:	4b80      	ldr	r3, [pc, #512]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a7f      	ldr	r2, [pc, #508]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e02e      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x98>
 80018aa:	4b7b      	ldr	r3, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7a      	ldr	r2, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a77      	ldr	r2, [pc, #476]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0xbc>
 80018ce:	4b72      	ldr	r3, [pc, #456]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a71      	ldr	r2, [pc, #452]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6e      	ldr	r2, [pc, #440]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xd4>
 80018e8:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6a      	ldr	r2, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff f876 	bl	80009f8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff f872 	bl	80009f8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e200      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xe4>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff f862 	bl	80009f8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff f85e 	bl	80009f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1ec      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x10c>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x18c>
 800197e:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b43      	ldr	r3, [pc, #268]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x176>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1c0      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4939      	ldr	r1, [pc, #228]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e03a      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff f817 	bl	80009f8 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff f813 	bl	80009f8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1a1      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4927      	ldr	r1, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_RCC_OscConfig+0x270>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7fe fff6 	bl	80009f8 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a10:	f7fe fff2 	bl	80009f8 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e180      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d03a      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d019      	beq.n	8001a76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7fe ffd6 	bl	80009f8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7fe ffd2 	bl	80009f8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e160      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f000 fac4 	bl	8001ffc <RCC_Delay>
 8001a74:	e01c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7fe ffbc 	bl	80009f8 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a82:	e00f      	b.n	8001aa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7fe ffb8 	bl	80009f8 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d908      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e146      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	42420000 	.word	0x42420000
 8001aa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1e9      	bne.n	8001a84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a6 	beq.w	8001c0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b88      	ldr	r3, [pc, #544]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	4a87      	ldr	r2, [pc, #540]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	61d3      	str	r3, [r2, #28]
 8001ada:	4b85      	ldr	r3, [pc, #532]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aea:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <HAL_RCC_OscConfig+0x4c8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af6:	4b7f      	ldr	r3, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x4c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7e      	ldr	r2, [pc, #504]	; (8001cf4 <HAL_RCC_OscConfig+0x4c8>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b02:	f7fe ff79 	bl	80009f8 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0a:	f7fe ff75 	bl	80009f8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b64      	cmp	r3, #100	; 0x64
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e103      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	4b75      	ldr	r3, [pc, #468]	; (8001cf4 <HAL_RCC_OscConfig+0x4c8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x312>
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	e02d      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x334>
 8001b46:	4b6a      	ldr	r3, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a69      	ldr	r2, [pc, #420]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a66      	ldr	r2, [pc, #408]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
 8001b5e:	e01c      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d10c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x356>
 8001b68:	4b61      	ldr	r3, [pc, #388]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	e00b      	b.n	8001b9a <HAL_RCC_OscConfig+0x36e>
 8001b82:	4b5b      	ldr	r3, [pc, #364]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a5a      	ldr	r2, [pc, #360]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a57      	ldr	r2, [pc, #348]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d015      	beq.n	8001bce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7fe ff29 	bl	80009f8 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe ff25 	bl	80009f8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0b1      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ee      	beq.n	8001baa <HAL_RCC_OscConfig+0x37e>
 8001bcc:	e014      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7fe ff13 	bl	80009f8 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7fe ff0f 	bl	80009f8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e09b      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ee      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d105      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a3b      	ldr	r2, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8087 	beq.w	8001d22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c14:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d061      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d146      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c28:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_RCC_OscConfig+0x4cc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7fe fee3 	bl	80009f8 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7fe fedf 	bl	80009f8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e06d      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4921      	ldr	r1, [pc, #132]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a19      	ldr	r1, [r3, #32]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	430b      	orrs	r3, r1
 8001c82:	491b      	ldr	r1, [pc, #108]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe feb3 	bl	80009f8 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe feaf 	bl	80009f8 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e03d      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x46a>
 8001cb4:	e035      	b.n	8001d22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe fe9c 	bl	80009f8 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe fe98 	bl	80009f8 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e026      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x498>
 8001ce2:	e01e      	b.n	8001d22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e019      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x500>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d106      	bne.n	8001d1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0d0      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d910      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b67      	ldr	r3, [pc, #412]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 0207 	bic.w	r2, r3, #7
 8001d5a:	4965      	ldr	r1, [pc, #404]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0b8      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d8c:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	494d      	ldr	r1, [pc, #308]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d040      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d115      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e07f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e073      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06b      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4936      	ldr	r1, [pc, #216]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e20:	f7fe fdea 	bl	80009f8 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7fe fde6 	bl	80009f8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e053      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 020c 	and.w	r2, r3, #12
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1eb      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d210      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0207 	bic.w	r2, r3, #7
 8001e66:	4922      	ldr	r1, [pc, #136]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e032      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4916      	ldr	r1, [pc, #88]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ebe:	f000 f821 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	490a      	ldr	r1, [pc, #40]	; (8001ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed0:	5ccb      	ldrb	r3, [r1, r3]
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1cc>)
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1d0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fd48 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08002894 	.word	0x08002894
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	b490      	push	{r4, r7}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f0c:	1d3c      	adds	r4, r7, #4
 8001f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f14:	f240 2301 	movw	r3, #513	; 0x201
 8001f18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f2e:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x40>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x46>
 8001f42:	e02b      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f46:	623b      	str	r3, [r7, #32]
      break;
 8001f48:	e02b      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	0c9b      	lsrs	r3, r3, #18
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3328      	adds	r3, #40	; 0x28
 8001f54:	443b      	add	r3, r7
 8001f56:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f5a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0c5b      	lsrs	r3, r3, #17
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	3328      	adds	r3, #40	; 0x28
 8001f72:	443b      	add	r3, r7
 8001f74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f78:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f7e:	fb03 f202 	mul.w	r2, r3, r2
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8a:	e004      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	623b      	str	r3, [r7, #32]
      break;
 8001f9a:	e002      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f9e:	623b      	str	r3, [r7, #32]
      break;
 8001fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc90      	pop	{r4, r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	08002884 	.word	0x08002884
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	007a1200 	.word	0x007a1200
 8001fbc:	003d0900 	.word	0x003d0900

08001fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd8:	f7ff fff2 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4903      	ldr	r1, [pc, #12]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	080028a4 	.word	0x080028a4

08001ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <RCC_Delay+0x34>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <RCC_Delay+0x38>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0a5b      	lsrs	r3, r3, #9
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002018:	bf00      	nop
  }
  while (Delay --);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	60fa      	str	r2, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <RCC_Delay+0x1c>
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000000 	.word	0x20000000
 8002034:	10624dd3 	.word	0x10624dd3

08002038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e041      	b.n	80020ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fc28 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3304      	adds	r3, #4
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f000 fa6a 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d001      	beq.n	80020f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e035      	b.n	800215c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <HAL_TIM_Base_Start_IT+0x90>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_TIM_Base_Start_IT+0x4e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211a:	d004      	beq.n	8002126 <HAL_TIM_Base_Start_IT+0x4e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_TIM_Base_Start_IT+0x94>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d111      	bne.n	800214a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b06      	cmp	r3, #6
 8002136:	d010      	beq.n	800215a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002148:	e007      	b.n	800215a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40012c00 	.word	0x40012c00
 800216c:	40000400 	.word	0x40000400

08002170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d122      	bne.n	80021cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b02      	cmp	r3, #2
 8002192:	d11b      	bne.n	80021cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0202 	mvn.w	r2, #2
 800219c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f9b1 	bl	800251a <HAL_TIM_IC_CaptureCallback>
 80021b8:	e005      	b.n	80021c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f9a4 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f9b3 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d122      	bne.n	8002220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d11b      	bne.n	8002220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0204 	mvn.w	r2, #4
 80021f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f987 	bl	800251a <HAL_TIM_IC_CaptureCallback>
 800220c:	e005      	b.n	800221a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f97a 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f989 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b08      	cmp	r3, #8
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0208 	mvn.w	r2, #8
 8002244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2204      	movs	r2, #4
 800224a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f95d 	bl	800251a <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f950 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f95f 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b10      	cmp	r3, #16
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b10      	cmp	r3, #16
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0210 	mvn.w	r2, #16
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2208      	movs	r2, #8
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f933 	bl	800251a <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f926 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f935 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d107      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0201 	mvn.w	r2, #1
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe f94d 	bl	800058e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	2b80      	cmp	r3, #128	; 0x80
 8002300:	d10e      	bne.n	8002320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d107      	bne.n	8002320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa67 	bl	80027ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d10e      	bne.n	800234c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b40      	cmp	r3, #64	; 0x40
 800233a:	d107      	bne.n	800234c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8f9 	bl	800253e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b20      	cmp	r3, #32
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b20      	cmp	r3, #32
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0220 	mvn.w	r2, #32
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa32 	bl	80027dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_TIM_ConfigClockSource+0x18>
 8002394:	2302      	movs	r3, #2
 8002396:	e0b3      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x180>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d0:	d03e      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0xd0>
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d6:	f200 8087 	bhi.w	80024e8 <HAL_TIM_ConfigClockSource+0x168>
 80023da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023de:	f000 8085 	beq.w	80024ec <HAL_TIM_ConfigClockSource+0x16c>
 80023e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e6:	d87f      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x168>
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d01a      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0xa2>
 80023ec:	2b70      	cmp	r3, #112	; 0x70
 80023ee:	d87b      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x168>
 80023f0:	2b60      	cmp	r3, #96	; 0x60
 80023f2:	d050      	beq.n	8002496 <HAL_TIM_ConfigClockSource+0x116>
 80023f4:	2b60      	cmp	r3, #96	; 0x60
 80023f6:	d877      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x168>
 80023f8:	2b50      	cmp	r3, #80	; 0x50
 80023fa:	d03c      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0xf6>
 80023fc:	2b50      	cmp	r3, #80	; 0x50
 80023fe:	d873      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x168>
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d058      	beq.n	80024b6 <HAL_TIM_ConfigClockSource+0x136>
 8002404:	2b40      	cmp	r3, #64	; 0x40
 8002406:	d86f      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x168>
 8002408:	2b30      	cmp	r3, #48	; 0x30
 800240a:	d064      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x156>
 800240c:	2b30      	cmp	r3, #48	; 0x30
 800240e:	d86b      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x168>
 8002410:	2b20      	cmp	r3, #32
 8002412:	d060      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x156>
 8002414:	2b20      	cmp	r3, #32
 8002416:	d867      	bhi.n	80024e8 <HAL_TIM_ConfigClockSource+0x168>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d05c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x156>
 800241c:	2b10      	cmp	r3, #16
 800241e:	d05a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002420:	e062      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6899      	ldr	r1, [r3, #8]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f000 f95c 	bl	80026ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002444:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	609a      	str	r2, [r3, #8]
      break;
 800244e:	e04e      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f000 f945 	bl	80026ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002472:	609a      	str	r2, [r3, #8]
      break;
 8002474:	e03b      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	461a      	mov	r2, r3
 8002484:	f000 f8bc 	bl	8002600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2150      	movs	r1, #80	; 0x50
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f913 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 8002494:	e02b      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f000 f8da 	bl	800265c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2160      	movs	r1, #96	; 0x60
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f903 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 80024b4:	e01b      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f000 f89c 	bl	8002600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f8f3 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 80024d4:	e00b      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	4610      	mov	r0, r2
 80024e2:	f000 f8ea 	bl	80026ba <TIM_ITRx_SetConfig>
        break;
 80024e6:	e002      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024e8:	bf00      	nop
 80024ea:	e000      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <TIM_Base_SetConfig+0xa8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d007      	beq.n	8002578 <TIM_Base_SetConfig+0x28>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256e:	d003      	beq.n	8002578 <TIM_Base_SetConfig+0x28>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a22      	ldr	r2, [pc, #136]	; (80025fc <TIM_Base_SetConfig+0xac>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d108      	bne.n	800258a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <TIM_Base_SetConfig+0xa8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <TIM_Base_SetConfig+0x52>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d003      	beq.n	80025a2 <TIM_Base_SetConfig+0x52>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a17      	ldr	r2, [pc, #92]	; (80025fc <TIM_Base_SetConfig+0xac>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d108      	bne.n	80025b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <TIM_Base_SetConfig+0xa8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d103      	bne.n	80025e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	615a      	str	r2, [r3, #20]
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40000400 	.word	0x40000400

08002600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f023 0201 	bic.w	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800262a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f023 030a 	bic.w	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	621a      	str	r2, [r3, #32]
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f023 0210 	bic.w	r2, r3, #16
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	031b      	lsls	r3, r3, #12
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f043 0307 	orr.w	r3, r3, #7
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	021a      	lsls	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	431a      	orrs	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	609a      	str	r2, [r3, #8]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002740:	2302      	movs	r3, #2
 8002742:	e041      	b.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002790:	d004      	beq.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d10c      	bne.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400

080027dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	2600      	movs	r6, #0
 8002804:	4d0c      	ldr	r5, [pc, #48]	; (8002838 <__libc_init_array+0x38>)
 8002806:	4c0d      	ldr	r4, [pc, #52]	; (800283c <__libc_init_array+0x3c>)
 8002808:	1b64      	subs	r4, r4, r5
 800280a:	10a4      	asrs	r4, r4, #2
 800280c:	42a6      	cmp	r6, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	f000 f822 	bl	8002858 <_init>
 8002814:	2600      	movs	r6, #0
 8002816:	4d0a      	ldr	r5, [pc, #40]	; (8002840 <__libc_init_array+0x40>)
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <__libc_init_array+0x44>)
 800281a:	1b64      	subs	r4, r4, r5
 800281c:	10a4      	asrs	r4, r4, #2
 800281e:	42a6      	cmp	r6, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	f855 3b04 	ldr.w	r3, [r5], #4
 8002828:	4798      	blx	r3
 800282a:	3601      	adds	r6, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002832:	4798      	blx	r3
 8002834:	3601      	adds	r6, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	080028ac 	.word	0x080028ac
 800283c:	080028ac 	.word	0x080028ac
 8002840:	080028ac 	.word	0x080028ac
 8002844:	080028b0 	.word	0x080028b0

08002848 <memset>:
 8002848:	4603      	mov	r3, r0
 800284a:	4402      	add	r2, r0
 800284c:	4293      	cmp	r3, r2
 800284e:	d100      	bne.n	8002852 <memset+0xa>
 8002850:	4770      	bx	lr
 8002852:	f803 1b01 	strb.w	r1, [r3], #1
 8002856:	e7f9      	b.n	800284c <memset+0x4>

08002858 <_init>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	bf00      	nop
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr

08002864 <_fini>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	bf00      	nop
 8002868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286a:	bc08      	pop	{r3}
 800286c:	469e      	mov	lr, r3
 800286e:	4770      	bx	lr

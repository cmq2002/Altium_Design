
lcd16x2_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800577c  0800577c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800577c  0800577c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800577c  0800577c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000070  080057f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  080057f4  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e939  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a8  00000000  00000000  0002e9d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00031e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003011  00000000  00000000  00032ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001220d  00000000  00000000  00035cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac85  00000000  00000000  00047ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2b43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004468  00000000  00000000  000d2b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080056d8 	.word	0x080056d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080056d8 	.word	0x080056d8

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b29      	ldr	r3, [pc, #164]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a28      	ldr	r2, [pc, #160]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b26      	ldr	r3, [pc, #152]	; (8000208 <MX_GPIO_Init+0xbc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b23      	ldr	r3, [pc, #140]	; (8000208 <MX_GPIO_Init+0xbc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a22      	ldr	r2, [pc, #136]	; (8000208 <MX_GPIO_Init+0xbc>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b20      	ldr	r3, [pc, #128]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1c      	ldr	r2, [pc, #112]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <MX_GPIO_Init+0xbc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_10_Pin|LED3_11_Pin|LED_RED_Pin|LED3_00_Pin
 80001a8:	2200      	movs	r2, #0
 80001aa:	2173      	movs	r1, #115	; 0x73
 80001ac:	4817      	ldr	r0, [pc, #92]	; (800020c <MX_GPIO_Init+0xc0>)
 80001ae:	f000 ffdb 	bl	8001168 <HAL_GPIO_WritePin>
                          |LED3_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LED3_10_Pin|LED3_11_Pin|LED_RED_Pin|LED3_00_Pin
 80001b2:	2373      	movs	r3, #115	; 0x73
 80001b4:	613b      	str	r3, [r7, #16]
                          |LED3_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b6:	2301      	movs	r3, #1
 80001b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ba:	2300      	movs	r3, #0
 80001bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001be:	2302      	movs	r3, #2
 80001c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001c2:	f107 0310 	add.w	r3, r7, #16
 80001c6:	4619      	mov	r1, r3
 80001c8:	4810      	ldr	r0, [pc, #64]	; (800020c <MX_GPIO_Init+0xc0>)
 80001ca:	f000 fe51 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button0_Pin;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 80001dc:	f107 0310 	add.w	r3, r7, #16
 80001e0:	4619      	mov	r1, r3
 80001e2:	480a      	ldr	r0, [pc, #40]	; (800020c <MX_GPIO_Init+0xc0>)
 80001e4:	f000 fe44 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80001e8:	2320      	movs	r3, #32
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ec:	2300      	movs	r3, #0
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f0:	2301      	movs	r3, #1
 80001f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4805      	ldr	r0, [pc, #20]	; (8000210 <MX_GPIO_Init+0xc4>)
 80001fc:	f000 fe38 	bl	8000e70 <HAL_GPIO_Init>

}
 8000200:	bf00      	nop
 8000202:	3720      	adds	r7, #32
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40021000 	.word	0x40021000
 800020c:	40010800 	.word	0x40010800
 8000210:	40010c00 	.word	0x40010c00

08000214 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <MX_I2C1_Init+0x50>)
 800021a:	4a13      	ldr	r2, [pc, #76]	; (8000268 <MX_I2C1_Init+0x54>)
 800021c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_I2C1_Init+0x50>)
 8000220:	4a12      	ldr	r2, [pc, #72]	; (800026c <MX_I2C1_Init+0x58>)
 8000222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <MX_I2C1_Init+0x50>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_I2C1_Init+0x50>)
 800022c:	2200      	movs	r2, #0
 800022e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_I2C1_Init+0x50>)
 8000232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <MX_I2C1_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <MX_I2C1_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <MX_I2C1_Init+0x50>)
 8000246:	2200      	movs	r2, #0
 8000248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_I2C1_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <MX_I2C1_Init+0x50>)
 8000252:	f000 ffa1 	bl	8001198 <HAL_I2C_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800025c:	f000 f950 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	2000008c 	.word	0x2000008c
 8000268:	40005400 	.word	0x40005400
 800026c:	000186a0 	.word	0x000186a0

08000270 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a25      	ldr	r2, [pc, #148]	; (8000320 <HAL_I2C_MspInit+0xb0>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d142      	bne.n	8000316 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <HAL_I2C_MspInit+0xb4>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a23      	ldr	r2, [pc, #140]	; (8000324 <HAL_I2C_MspInit+0xb4>)
 8000296:	f043 0308 	orr.w	r3, r3, #8
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b21      	ldr	r3, [pc, #132]	; (8000324 <HAL_I2C_MspInit+0xb4>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0308 	and.w	r3, r3, #8
 80002a4:	613b      	str	r3, [r7, #16]
 80002a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80002a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80002ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002ae:	2312      	movs	r3, #18
 80002b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b6:	f107 0314 	add.w	r3, r7, #20
 80002ba:	4619      	mov	r1, r3
 80002bc:	481a      	ldr	r0, [pc, #104]	; (8000328 <HAL_I2C_MspInit+0xb8>)
 80002be:	f000 fdd7 	bl	8000e70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <HAL_I2C_MspInit+0xbc>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24
 80002c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80002ce:	627b      	str	r3, [r7, #36]	; 0x24
 80002d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d2:	f043 0302 	orr.w	r3, r3, #2
 80002d6:	627b      	str	r3, [r7, #36]	; 0x24
 80002d8:	4a14      	ldr	r2, [pc, #80]	; (800032c <HAL_I2C_MspInit+0xbc>)
 80002da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002dc:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <HAL_I2C_MspInit+0xb4>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	4a10      	ldr	r2, [pc, #64]	; (8000324 <HAL_I2C_MspInit+0xb4>)
 80002e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002e8:	61d3      	str	r3, [r2, #28]
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <HAL_I2C_MspInit+0xb4>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	201f      	movs	r0, #31
 80002fc:	f000 fcc5 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000300:	201f      	movs	r0, #31
 8000302:	f000 fcde 	bl	8000cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	2020      	movs	r0, #32
 800030c:	f000 fcbd 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000310:	2020      	movs	r0, #32
 8000312:	f000 fcd6 	bl	8000cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000316:	bf00      	nop
 8000318:	3728      	adds	r7, #40	; 0x28
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40005400 	.word	0x40005400
 8000324:	40021000 	.word	0x40021000
 8000328:	40010c00 	.word	0x40010c00
 800032c:	40010000 	.word	0x40010000

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b5b0      	push	{r4, r5, r7, lr}
 8000332:	b094      	sub	sp, #80	; 0x50
 8000334:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t Buffer[25] = {0};
 8000336:	2300      	movs	r3, #0
 8000338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800033a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]
 800034a:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 800034c:	4b3d      	ldr	r3, [pc, #244]	; (8000444 <main+0x114>)
 800034e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8000350:	4b3d      	ldr	r3, [pc, #244]	; (8000448 <main+0x118>)
 8000352:	f107 040c 	add.w	r4, r7, #12
 8000356:	461d      	mov	r5, r3
 8000358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800035a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800035c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000360:	c403      	stmia	r4!, {r0, r1}
 8000362:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8000364:	4a39      	ldr	r2, [pc, #228]	; (800044c <main+0x11c>)
 8000366:	463b      	mov	r3, r7
 8000368:	ca07      	ldmia	r2, {r0, r1, r2}
 800036a:	c303      	stmia	r3!, {r0, r1}
 800036c:	801a      	strh	r2, [r3, #0]
 800036e:	3302      	adds	r3, #2
 8000370:	0c12      	lsrs	r2, r2, #16
 8000372:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000374:	f000 fb2c 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000378:	f000 f872 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f7ff fee6 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000380:	f000 fa14 	bl	80007ac <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000384:	f000 fa82 	bl	800088c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000388:	f7ff ff44 	bl	8000214 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800038c:	4830      	ldr	r0, [pc, #192]	; (8000450 <main+0x120>)
 800038e:	f003 fc8b 	bl	8003ca8 <HAL_TIM_Base_Start_IT>
  uint8_t i = 0, ret;
 8000392:	2300      	movs	r3, #0
 8000394:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47



  HAL_Delay(1000);
 8000398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039c:	f000 fb7a 	bl	8000a94 <HAL_Delay>

  /*-[ I2C Bus Scanning ]-*/
  HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 1000);
 80003a0:	f107 010c 	add.w	r1, r7, #12
 80003a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003a8:	221a      	movs	r2, #26
 80003aa:	482a      	ldr	r0, [pc, #168]	; (8000454 <main+0x124>)
 80003ac:	f004 f85d 	bl	800446a <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80003b0:	2301      	movs	r3, #1
 80003b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80003b6:	e035      	b.n	8000424 <main+0xf4>
  {
      //ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 0xFF);
	  ret = HAL_I2C_Master_Transmit(&hi2c1, 0x27 << 1 + 1, 0x00, 4, HAL_MAX_DELAY);
 80003b8:	f04f 33ff 	mov.w	r3, #4294967295
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2304      	movs	r3, #4
 80003c0:	2200      	movs	r2, #0
 80003c2:	219c      	movs	r1, #156	; 0x9c
 80003c4:	4824      	ldr	r0, [pc, #144]	; (8000458 <main+0x128>)
 80003c6:	f001 f82b 	bl	8001420 <HAL_I2C_Master_Transmit>
 80003ca:	4603      	mov	r3, r0
 80003cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      if (ret != HAL_OK) /* No ACK Received At That Address */
 80003d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d008      	beq.n	80003ea <main+0xba>
      {
          HAL_UART_Transmit(&huart2, Space, sizeof(Space), 1000);
 80003d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80003dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e0:	2204      	movs	r2, #4
 80003e2:	481c      	ldr	r0, [pc, #112]	; (8000454 <main+0x124>)
 80003e4:	f004 f841 	bl	800446a <HAL_UART_Transmit>
 80003e8:	e013      	b.n	8000412 <main+0xe2>
      }
      else if(ret == HAL_OK)
 80003ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d10f      	bne.n	8000412 <main+0xe2>
      {
          sprintf(Buffer, "0x%X", i);
 80003f2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80003f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003fa:	4918      	ldr	r1, [pc, #96]	; (800045c <main+0x12c>)
 80003fc:	4618      	mov	r0, r3
 80003fe:	f004 fcf1 	bl	8004de4 <siprintf>
          HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 1000);
 8000402:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800040a:	2219      	movs	r2, #25
 800040c:	4811      	ldr	r0, [pc, #68]	; (8000454 <main+0x124>)
 800040e:	f004 f82c 	bl	800446a <HAL_UART_Transmit>
      }
      HAL_Delay(1000);
 8000412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000416:	f000 fb3d 	bl	8000a94 <HAL_Delay>
  for(i=1; i<128; i++)
 800041a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800041e:	3301      	adds	r3, #1
 8000420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000424:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000428:	2b00      	cmp	r3, #0
 800042a:	dac5      	bge.n	80003b8 <main+0x88>
  }
  HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 1000);
 800042c:	4639      	mov	r1, r7
 800042e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000432:	220b      	movs	r2, #11
 8000434:	4807      	ldr	r0, [pc, #28]	; (8000454 <main+0x124>)
 8000436:	f004 f818 	bl	800446a <HAL_UART_Transmit>
 800043a:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */


  /* USER CODE END 3 */
}
 800043c:	4618      	mov	r0, r3
 800043e:	3748      	adds	r7, #72	; 0x48
 8000440:	46bd      	mov	sp, r7
 8000442:	bdb0      	pop	{r4, r5, r7, pc}
 8000444:	00202d20 	.word	0x00202d20
 8000448:	080056f8 	.word	0x080056f8
 800044c:	08005714 	.word	0x08005714
 8000450:	20000420 	.word	0x20000420
 8000454:	20000468 	.word	0x20000468
 8000458:	2000008c 	.word	0x2000008c
 800045c:	080056f0 	.word	0x080056f0

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b090      	sub	sp, #64	; 0x40
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	2228      	movs	r2, #40	; 0x28
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f004 fcb0 	bl	8004dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000482:	2301      	movs	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000490:	2301      	movs	r3, #1
 8000492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000494:	2302      	movs	r3, #2
 8000496:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800049e:	2300      	movs	r3, #0
 80004a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 ff94 	bl	80033d4 <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004b2:	f000 f825 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	230f      	movs	r3, #15
 80004b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	2302      	movs	r3, #2
 80004bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80004be:	2380      	movs	r3, #128	; 0x80
 80004c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f003 fa01 	bl	80038d8 <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004dc:	f000 f810 	bl	8000500 <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3740      	adds	r7, #64	; 0x40
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	timerRun();
 80004f0:	f000 f86c 	bl	80005cc <timerRun>
	SCH_Update();
 80004f4:	f000 f80a 	bl	800050c <SCH_Update>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	e7fe      	b.n	8000508 <Error_Handler+0x8>
	...

0800050c <SCH_Update>:
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++;
	}
}

void SCH_Update(void){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
	for(int i = 0; i < current_index_task; i++){
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e048      	b.n	80005aa <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0){
 8000518:	492a      	ldr	r1, [pc, #168]	; (80005c4 <SCH_Update+0xb8>)
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	4613      	mov	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	4413      	add	r3, r2
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	440b      	add	r3, r1
 8000526:	3304      	adds	r3, #4
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d013      	beq.n	8000556 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay --;
 800052e:	4925      	ldr	r1, [pc, #148]	; (80005c4 <SCH_Update+0xb8>)
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4613      	mov	r3, r2
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	4413      	add	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	3304      	adds	r3, #4
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	1e59      	subs	r1, r3, #1
 8000542:	4820      	ldr	r0, [pc, #128]	; (80005c4 <SCH_Update+0xb8>)
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4613      	mov	r3, r2
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4403      	add	r3, r0
 8000550:	3304      	adds	r3, #4
 8000552:	6019      	str	r1, [r3, #0]
 8000554:	e026      	b.n	80005a4 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000556:	491b      	ldr	r1, [pc, #108]	; (80005c4 <SCH_Update+0xb8>)
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	440b      	add	r3, r1
 8000564:	3308      	adds	r3, #8
 8000566:	6819      	ldr	r1, [r3, #0]
 8000568:	4816      	ldr	r0, [pc, #88]	; (80005c4 <SCH_Update+0xb8>)
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4613      	mov	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	4413      	add	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4403      	add	r3, r0
 8000576:	3304      	adds	r3, #4
 8000578:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 800057a:	4912      	ldr	r1, [pc, #72]	; (80005c4 <SCH_Update+0xb8>)
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4613      	mov	r3, r2
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	440b      	add	r3, r1
 8000588:	330c      	adds	r3, #12
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	b2d8      	uxtb	r0, r3
 8000590:	490c      	ldr	r1, [pc, #48]	; (80005c4 <SCH_Update+0xb8>)
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4613      	mov	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	4413      	add	r3, r2
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	440b      	add	r3, r1
 800059e:	330c      	adds	r3, #12
 80005a0:	4602      	mov	r2, r0
 80005a2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < current_index_task; i++){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <SCH_Update+0xbc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4293      	cmp	r3, r2
 80005b4:	dbb0      	blt.n	8000518 <SCH_Update+0xc>
		}
	}
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200000e0 	.word	0x200000e0
 80005c8:	20000400 	.word	0x20000400

080005cc <timerRun>:

void setTimer2(int duration){
	timer2_counter = duration/ TIMER_CYCLE;
	timer2_flag = 0;
}
void timerRun(){
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <timerRun+0x6c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dd0b      	ble.n	80005f0 <timerRun+0x24>
			timer0_counter--;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <timerRun+0x6c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a16      	ldr	r2, [pc, #88]	; (8000638 <timerRun+0x6c>)
 80005e0:	6013      	str	r3, [r2, #0]
			if(timer0_counter <= 0){
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <timerRun+0x6c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	dc02      	bgt.n	80005f0 <timerRun+0x24>
				timer0_flag = 1;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <timerRun+0x70>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer1_counter > 0){
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <timerRun+0x74>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dd0b      	ble.n	8000610 <timerRun+0x44>
		timer1_counter--;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <timerRun+0x74>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3b01      	subs	r3, #1
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <timerRun+0x74>)
 8000600:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <timerRun+0x74>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	dc02      	bgt.n	8000610 <timerRun+0x44>
			timer1_flag = 1;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <timerRun+0x78>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <timerRun+0x7c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	dd0b      	ble.n	8000630 <timerRun+0x64>
				timer2_counter--;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <timerRun+0x7c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3b01      	subs	r3, #1
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <timerRun+0x7c>)
 8000620:	6013      	str	r3, [r2, #0]
				if(timer2_counter <= 0){
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <timerRun+0x7c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	dc02      	bgt.n	8000630 <timerRun+0x64>
					timer2_flag = 1;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <timerRun+0x80>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
				}
			}
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000404 	.word	0x20000404
 800063c:	20000408 	.word	0x20000408
 8000640:	2000040c 	.word	0x2000040c
 8000644:	20000410 	.word	0x20000410
 8000648:	20000414 	.word	0x20000414
 800064c:	20000418 	.word	0x20000418

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_MspInit+0x40>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <HAL_MspInit+0x40>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <HAL_MspInit+0x40>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_MspInit+0x40>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_MspInit+0x40>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_MspInit+0x40>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006da:	f000 f9bf 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <TIM2_IRQHandler+0x10>)
 80006ea:	f003 fb29 	bl	8003d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000420 	.word	0x20000420

080006f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <I2C1_EV_IRQHandler+0x10>)
 80006fe:	f000 ff8d 	bl	800161c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000008c 	.word	0x2000008c

0800070c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <I2C1_ER_IRQHandler+0x10>)
 8000712:	f001 f8f4 	bl	80018fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000008c 	.word	0x2000008c

08000720 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <USART2_IRQHandler+0x10>)
 8000726:	f003 ff33 	bl	8004590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000468 	.word	0x20000468

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f004 fb0c 	bl	8004d80 <__errno>
 8000768:	4603      	mov	r3, r0
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20002800 	.word	0x20002800
 8000794:	00000400 	.word	0x00000400
 8000798:	2000041c 	.word	0x2000041c
 800079c:	200004c0 	.word	0x200004c0

080007a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_TIM2_Init+0x94>)
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_TIM2_Init+0x94>)
 80007d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_TIM2_Init+0x94>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_TIM2_Init+0x94>)
 80007e0:	2209      	movs	r2, #9
 80007e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_TIM2_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_TIM2_Init+0x94>)
 80007ec:	2280      	movs	r2, #128	; 0x80
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f0:	4813      	ldr	r0, [pc, #76]	; (8000840 <MX_TIM2_Init+0x94>)
 80007f2:	f003 fa09 	bl	8003c08 <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007fc:	f7ff fe80 	bl	8000500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_TIM2_Init+0x94>)
 800080e:	f003 fb9f 	bl	8003f50 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000818:	f7ff fe72 	bl	8000500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_TIM2_Init+0x94>)
 800082a:	f003 fd67 	bl	80042fc <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000834:	f7ff fe64 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000420 	.word	0x20000420

08000844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000854:	d113      	bne.n	800087e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_TIM_Base_MspInit+0x44>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <HAL_TIM_Base_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_TIM_Base_MspInit+0x44>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	201c      	movs	r0, #28
 8000874:	f000 fa09 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000878:	201c      	movs	r0, #28
 800087a:	f000 fa22 	bl	8000cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_USART2_UART_Init+0x50>)
 8000894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 8000898:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800089c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	220c      	movs	r2, #12
 80008b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f003 fd84 	bl	80043d0 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ce:	f7ff fe17 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000468 	.word	0x20000468
 80008dc:	40004400 	.word	0x40004400

080008e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <HAL_UART_MspInit+0x98>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d137      	bne.n	8000970 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <HAL_UART_MspInit+0x9c>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	4a1d      	ldr	r2, [pc, #116]	; (800097c <HAL_UART_MspInit+0x9c>)
 8000906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090a:	61d3      	str	r3, [r2, #28]
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <HAL_UART_MspInit+0x9c>)
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_UART_MspInit+0x9c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a17      	ldr	r2, [pc, #92]	; (800097c <HAL_UART_MspInit+0x9c>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_UART_MspInit+0x9c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000930:	2304      	movs	r3, #4
 8000932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	480f      	ldr	r0, [pc, #60]	; (8000980 <HAL_UART_MspInit+0xa0>)
 8000944:	f000 fa94 	bl	8000e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000948:	2308      	movs	r3, #8
 800094a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_UART_MspInit+0xa0>)
 800095c:	f000 fa88 	bl	8000e70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2026      	movs	r0, #38	; 0x26
 8000966:	f000 f990 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800096a:	2026      	movs	r0, #38	; 0x26
 800096c:	f000 f9a9 	bl	8000cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40004400 	.word	0x40004400
 800097c:	40021000 	.word	0x40021000
 8000980:	40010800 	.word	0x40010800

08000984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009aa:	f7ff fef9 	bl	80007a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ae:	f004 f9ed 	bl	8004d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009b2:	f7ff fcbd 	bl	8000330 <main>
  bx lr
 80009b6:	4770      	bx	lr
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009c0:	08005784 	.word	0x08005784
  ldr r2, =_sbss
 80009c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009c8:	200004c0 	.word	0x200004c0

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x28>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x28>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f947 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff fe30 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f95f 	bl	8000cde <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f927 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x20>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a03      	ldr	r2, [pc, #12]	; (8000a7c <HAL_IncTick+0x20>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	200004ac 	.word	0x200004ac

08000a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <HAL_GetTick+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	200004ac 	.word	0x200004ac

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff fff0 	bl	8000a80 <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffe0 	bl	8000a80 <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	db0b      	blt.n	8000b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	f003 021f 	and.w	r2, r3, #31
 8000b58:	4906      	ldr	r1, [pc, #24]	; (8000b74 <__NVIC_EnableIRQ+0x34>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	095b      	lsrs	r3, r3, #5
 8000b60:	2001      	movs	r0, #1
 8000b62:	fa00 f202 	lsl.w	r2, r0, r2
 8000b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff90 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff2d 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff42 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff90 	bl	8000bcc <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5f 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff35 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ffa2 	bl	8000c30 <SysTick_Config>
 8000cec:	4603      	mov	r3, r0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d008      	beq.n	8000d1e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e020      	b.n	8000d60 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 020e 	bic.w	r2, r2, #14
 8000d2c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f022 0201 	bic.w	r2, r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d005      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2204      	movs	r2, #4
 8000d86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e051      	b.n	8000e32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 020e 	bic.w	r2, r2, #14
 8000d9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0201 	bic.w	r2, r2, #1
 8000dac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <HAL_DMA_Abort_IT+0xd0>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d029      	beq.n	8000e0c <HAL_DMA_Abort_IT+0xa0>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <HAL_DMA_Abort_IT+0xd4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d022      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x9c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <HAL_DMA_Abort_IT+0xd8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d01a      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x96>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a1d      	ldr	r2, [pc, #116]	; (8000e48 <HAL_DMA_Abort_IT+0xdc>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d012      	beq.n	8000dfc <HAL_DMA_Abort_IT+0x90>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <HAL_DMA_Abort_IT+0xe0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d00a      	beq.n	8000df6 <HAL_DMA_Abort_IT+0x8a>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_DMA_Abort_IT+0xe4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d102      	bne.n	8000df0 <HAL_DMA_Abort_IT+0x84>
 8000dea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dee:	e00e      	b.n	8000e0e <HAL_DMA_Abort_IT+0xa2>
 8000df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000df4:	e00b      	b.n	8000e0e <HAL_DMA_Abort_IT+0xa2>
 8000df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfa:	e008      	b.n	8000e0e <HAL_DMA_Abort_IT+0xa2>
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	e005      	b.n	8000e0e <HAL_DMA_Abort_IT+0xa2>
 8000e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e06:	e002      	b.n	8000e0e <HAL_DMA_Abort_IT+0xa2>
 8000e08:	2310      	movs	r3, #16
 8000e0a:	e000      	b.n	8000e0e <HAL_DMA_Abort_IT+0xa2>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <HAL_DMA_Abort_IT+0xe8>)
 8000e10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	4798      	blx	r3
    } 
  }
  return status;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40020008 	.word	0x40020008
 8000e40:	4002001c 	.word	0x4002001c
 8000e44:	40020030 	.word	0x40020030
 8000e48:	40020044 	.word	0x40020044
 8000e4c:	40020058 	.word	0x40020058
 8000e50:	4002006c 	.word	0x4002006c
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b08b      	sub	sp, #44	; 0x2c
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e161      	b.n	8001148 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e84:	2201      	movs	r2, #1
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8150 	bne.w	8001142 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4a97      	ldr	r2, [pc, #604]	; (8001104 <HAL_GPIO_Init+0x294>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d05e      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eac:	4a95      	ldr	r2, [pc, #596]	; (8001104 <HAL_GPIO_Init+0x294>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d875      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eb2:	4a95      	ldr	r2, [pc, #596]	; (8001108 <HAL_GPIO_Init+0x298>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d058      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eb8:	4a93      	ldr	r2, [pc, #588]	; (8001108 <HAL_GPIO_Init+0x298>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d86f      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ebe:	4a93      	ldr	r2, [pc, #588]	; (800110c <HAL_GPIO_Init+0x29c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d052      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ec4:	4a91      	ldr	r2, [pc, #580]	; (800110c <HAL_GPIO_Init+0x29c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d869      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eca:	4a91      	ldr	r2, [pc, #580]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d04c      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ed0:	4a8f      	ldr	r2, [pc, #572]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d863      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ed6:	4a8f      	ldr	r2, [pc, #572]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d046      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000edc:	4a8d      	ldr	r2, [pc, #564]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d85d      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d82a      	bhi.n	8000f3c <HAL_GPIO_Init+0xcc>
 8000ee6:	2b12      	cmp	r3, #18
 8000ee8:	d859      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <HAL_GPIO_Init+0x80>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f6b 	.word	0x08000f6b
 8000ef4:	08000f45 	.word	0x08000f45
 8000ef8:	08000f57 	.word	0x08000f57
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f9f 	.word	0x08000f9f
 8000f04:	08000f9f 	.word	0x08000f9f
 8000f08:	08000f9f 	.word	0x08000f9f
 8000f0c:	08000f9f 	.word	0x08000f9f
 8000f10:	08000f9f 	.word	0x08000f9f
 8000f14:	08000f9f 	.word	0x08000f9f
 8000f18:	08000f9f 	.word	0x08000f9f
 8000f1c:	08000f9f 	.word	0x08000f9f
 8000f20:	08000f9f 	.word	0x08000f9f
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f9f 	.word	0x08000f9f
 8000f2c:	08000f9f 	.word	0x08000f9f
 8000f30:	08000f9f 	.word	0x08000f9f
 8000f34:	08000f4d 	.word	0x08000f4d
 8000f38:	08000f61 	.word	0x08000f61
 8000f3c:	4a76      	ldr	r2, [pc, #472]	; (8001118 <HAL_GPIO_Init+0x2a8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f42:	e02c      	b.n	8000f9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e029      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e024      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e01f      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	330c      	adds	r3, #12
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e01a      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f72:	2304      	movs	r3, #4
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e013      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d105      	bne.n	8000f8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f80:	2308      	movs	r3, #8
 8000f82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	611a      	str	r2, [r3, #16]
          break;
 8000f8a:	e009      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	615a      	str	r2, [r3, #20]
          break;
 8000f96:	e003      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          break;
 8000f9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d801      	bhi.n	8000faa <HAL_GPIO_Init+0x13a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	e001      	b.n	8000fae <HAL_GPIO_Init+0x13e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d802      	bhi.n	8000fbc <HAL_GPIO_Init+0x14c>
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x152>
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	3b08      	subs	r3, #8
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	210f      	movs	r1, #15
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	6a39      	ldr	r1, [r7, #32]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80a9 	beq.w	8001142 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001008:	4a45      	ldr	r2, [pc, #276]	; (8001120 <HAL_GPIO_Init+0x2b0>)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3d      	ldr	r2, [pc, #244]	; (8001124 <HAL_GPIO_Init+0x2b4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d00d      	beq.n	8001050 <HAL_GPIO_Init+0x1e0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d007      	beq.n	800104c <HAL_GPIO_Init+0x1dc>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a3b      	ldr	r2, [pc, #236]	; (800112c <HAL_GPIO_Init+0x2bc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_GPIO_Init+0x1d8>
 8001044:	2302      	movs	r3, #2
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x1e2>
 8001048:	2303      	movs	r3, #3
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x1e2>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x1e2>
 8001050:	2300      	movs	r3, #0
 8001052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001062:	492f      	ldr	r1, [pc, #188]	; (8001120 <HAL_GPIO_Init+0x2b0>)
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	492b      	ldr	r1, [pc, #172]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4927      	ldr	r1, [pc, #156]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 8001094:	4013      	ands	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	4921      	ldr	r1, [pc, #132]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	491d      	ldr	r1, [pc, #116]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010bc:	4013      	ands	r3, r2
 80010be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d006      	beq.n	80010da <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	4917      	ldr	r1, [pc, #92]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	608b      	str	r3, [r1, #8]
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4913      	ldr	r1, [pc, #76]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010e4:	4013      	ands	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01f      	beq.n	8001134 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	490d      	ldr	r1, [pc, #52]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	60cb      	str	r3, [r1, #12]
 8001100:	e01f      	b.n	8001142 <HAL_GPIO_Init+0x2d2>
 8001102:	bf00      	nop
 8001104:	10320000 	.word	0x10320000
 8001108:	10310000 	.word	0x10310000
 800110c:	10220000 	.word	0x10220000
 8001110:	10210000 	.word	0x10210000
 8001114:	10120000 	.word	0x10120000
 8001118:	10110000 	.word	0x10110000
 800111c:	40021000 	.word	0x40021000
 8001120:	40010000 	.word	0x40010000
 8001124:	40010800 	.word	0x40010800
 8001128:	40010c00 	.word	0x40010c00
 800112c:	40011000 	.word	0x40011000
 8001130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_GPIO_Init+0x2f4>)
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	43db      	mvns	r3, r3
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <HAL_GPIO_Init+0x2f4>)
 800113e:	4013      	ands	r3, r2
 8001140:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3301      	adds	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae96 	bne.w	8000e84 <HAL_GPIO_Init+0x14>
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	372c      	adds	r7, #44	; 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e12b      	b.n	8001402 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d106      	bne.n	80011c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff f856 	bl	8000270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2224      	movs	r2, #36	; 0x24
 80011c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011fc:	f002 fcbe 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8001200:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4a81      	ldr	r2, [pc, #516]	; (800140c <HAL_I2C_Init+0x274>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d807      	bhi.n	800121c <HAL_I2C_Init+0x84>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4a80      	ldr	r2, [pc, #512]	; (8001410 <HAL_I2C_Init+0x278>)
 8001210:	4293      	cmp	r3, r2
 8001212:	bf94      	ite	ls
 8001214:	2301      	movls	r3, #1
 8001216:	2300      	movhi	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	e006      	b.n	800122a <HAL_I2C_Init+0x92>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4a7d      	ldr	r2, [pc, #500]	; (8001414 <HAL_I2C_Init+0x27c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	bf94      	ite	ls
 8001224:	2301      	movls	r3, #1
 8001226:	2300      	movhi	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0e7      	b.n	8001402 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4a78      	ldr	r2, [pc, #480]	; (8001418 <HAL_I2C_Init+0x280>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	430a      	orrs	r2, r1
 8001250:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a6a      	ldr	r2, [pc, #424]	; (800140c <HAL_I2C_Init+0x274>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d802      	bhi.n	800126c <HAL_I2C_Init+0xd4>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3301      	adds	r3, #1
 800126a:	e009      	b.n	8001280 <HAL_I2C_Init+0xe8>
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	4a69      	ldr	r2, [pc, #420]	; (800141c <HAL_I2C_Init+0x284>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	099b      	lsrs	r3, r3, #6
 800127e:	3301      	adds	r3, #1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	430b      	orrs	r3, r1
 8001286:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	495c      	ldr	r1, [pc, #368]	; (800140c <HAL_I2C_Init+0x274>)
 800129c:	428b      	cmp	r3, r1
 800129e:	d819      	bhi.n	80012d4 <HAL_I2C_Init+0x13c>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1e59      	subs	r1, r3, #1
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ae:	1c59      	adds	r1, r3, #1
 80012b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012b4:	400b      	ands	r3, r1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00a      	beq.n	80012d0 <HAL_I2C_Init+0x138>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1e59      	subs	r1, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c8:	3301      	adds	r3, #1
 80012ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ce:	e051      	b.n	8001374 <HAL_I2C_Init+0x1dc>
 80012d0:	2304      	movs	r3, #4
 80012d2:	e04f      	b.n	8001374 <HAL_I2C_Init+0x1dc>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d111      	bne.n	8001300 <HAL_I2C_Init+0x168>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1e58      	subs	r0, r3, #1
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6859      	ldr	r1, [r3, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	440b      	add	r3, r1
 80012ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	e012      	b.n	8001326 <HAL_I2C_Init+0x18e>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1e58      	subs	r0, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6859      	ldr	r1, [r3, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	0099      	lsls	r1, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	fbb0 f3f3 	udiv	r3, r0, r3
 8001316:	3301      	adds	r3, #1
 8001318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_I2C_Init+0x196>
 800132a:	2301      	movs	r3, #1
 800132c:	e022      	b.n	8001374 <HAL_I2C_Init+0x1dc>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10e      	bne.n	8001354 <HAL_I2C_Init+0x1bc>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1e58      	subs	r0, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6859      	ldr	r1, [r3, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	440b      	add	r3, r1
 8001344:	fbb0 f3f3 	udiv	r3, r0, r3
 8001348:	3301      	adds	r3, #1
 800134a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001352:	e00f      	b.n	8001374 <HAL_I2C_Init+0x1dc>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1e58      	subs	r0, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6859      	ldr	r1, [r3, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	0099      	lsls	r1, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	fbb0 f3f3 	udiv	r3, r0, r3
 800136a:	3301      	adds	r3, #1
 800136c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	6809      	ldr	r1, [r1, #0]
 8001378:	4313      	orrs	r3, r2
 800137a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69da      	ldr	r2, [r3, #28]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6911      	ldr	r1, [r2, #16]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68d2      	ldr	r2, [r2, #12]
 80013ae:	4311      	orrs	r1, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2220      	movs	r2, #32
 80013ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	000186a0 	.word	0x000186a0
 8001410:	001e847f 	.word	0x001e847f
 8001414:	003d08ff 	.word	0x003d08ff
 8001418:	431bde83 	.word	0x431bde83
 800141c:	10624dd3 	.word	0x10624dd3

08001420 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	461a      	mov	r2, r3
 800142c:	460b      	mov	r3, r1
 800142e:	817b      	strh	r3, [r7, #10]
 8001430:	4613      	mov	r3, r2
 8001432:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff fb24 	bl	8000a80 <HAL_GetTick>
 8001438:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b20      	cmp	r3, #32
 8001444:	f040 80e0 	bne.w	8001608 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2319      	movs	r3, #25
 800144e:	2201      	movs	r2, #1
 8001450:	4970      	ldr	r1, [pc, #448]	; (8001614 <HAL_I2C_Master_Transmit+0x1f4>)
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f001 fdec 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800145e:	2302      	movs	r3, #2
 8001460:	e0d3      	b.n	800160a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_I2C_Master_Transmit+0x50>
 800146c:	2302      	movs	r3, #2
 800146e:	e0cc      	b.n	800160a <HAL_I2C_Master_Transmit+0x1ea>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b01      	cmp	r3, #1
 8001484:	d007      	beq.n	8001496 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0201 	orr.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2221      	movs	r2, #33	; 0x21
 80014aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2210      	movs	r2, #16
 80014b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	893a      	ldrh	r2, [r7, #8]
 80014c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4a50      	ldr	r2, [pc, #320]	; (8001618 <HAL_I2C_Master_Transmit+0x1f8>)
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014d8:	8979      	ldrh	r1, [r7, #10]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	6a3a      	ldr	r2, [r7, #32]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f001 fc7c 	bl	8002ddc <I2C_MasterRequestWrite>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e08d      	b.n	800160a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001504:	e066      	b.n	80015d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	6a39      	ldr	r1, [r7, #32]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f001 fe66 	bl	80031dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00d      	beq.n	8001532 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	2b04      	cmp	r3, #4
 800151c:	d107      	bne.n	800152e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800152c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e06b      	b.n	800160a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154c:	b29b      	uxth	r3, r3
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155a:	3b01      	subs	r3, #1
 800155c:	b29a      	uxth	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b04      	cmp	r3, #4
 800156e:	d11b      	bne.n	80015a8 <HAL_I2C_Master_Transmit+0x188>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d017      	beq.n	80015a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	3b01      	subs	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	6a39      	ldr	r1, [r7, #32]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f001 fe56 	bl	800325e <I2C_WaitOnBTFFlagUntilTimeout>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00d      	beq.n	80015d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d107      	bne.n	80015d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e01a      	b.n	800160a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d194      	bne.n	8001506 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001608:	2302      	movs	r3, #2
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	00100002 	.word	0x00100002
 8001618:	ffff0000 	.word	0xffff0000

0800161c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800163c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001644:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b10      	cmp	r3, #16
 800164a:	d003      	beq.n	8001654 <HAL_I2C_EV_IRQHandler+0x38>
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b40      	cmp	r3, #64	; 0x40
 8001650:	f040 80c1 	bne.w	80017d6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_I2C_EV_IRQHandler+0x6e>
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001674:	d003      	beq.n	800167e <HAL_I2C_EV_IRQHandler+0x62>
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800167c:	d101      	bne.n	8001682 <HAL_I2C_EV_IRQHandler+0x66>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_I2C_EV_IRQHandler+0x68>
 8001682:	2300      	movs	r3, #0
 8001684:	2b01      	cmp	r3, #1
 8001686:	f000 8132 	beq.w	80018ee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00c      	beq.n	80016ae <HAL_I2C_EV_IRQHandler+0x92>
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	0a5b      	lsrs	r3, r3, #9
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f001 fe7d 	bl	80033a0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fd77 	bl	800219a <I2C_Master_SB>
 80016ac:	e092      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d009      	beq.n	80016ce <HAL_I2C_EV_IRQHandler+0xb2>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	0a5b      	lsrs	r3, r3, #9
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fdec 	bl	80022a4 <I2C_Master_ADD10>
 80016cc:	e082      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_I2C_EV_IRQHandler+0xd2>
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	0a5b      	lsrs	r3, r3, #9
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fe05 	bl	80022f6 <I2C_Master_ADDR>
 80016ec:	e072      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d03b      	beq.n	8001772 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001708:	f000 80f3 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	09db      	lsrs	r3, r3, #7
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00f      	beq.n	8001738 <HAL_I2C_EV_IRQHandler+0x11c>
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	0a9b      	lsrs	r3, r3, #10
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_I2C_EV_IRQHandler+0x11c>
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f9f1 	bl	8001b18 <I2C_MasterTransmit_TXE>
 8001736:	e04d      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80d6 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	0a5b      	lsrs	r3, r3, #9
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80cf 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	2b21      	cmp	r3, #33	; 0x21
 8001758:	d103      	bne.n	8001762 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fa78 	bl	8001c50 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001760:	e0c7      	b.n	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b40      	cmp	r3, #64	; 0x40
 8001766:	f040 80c4 	bne.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fae6 	bl	8001d3c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001770:	e0bf      	b.n	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001780:	f000 80b7 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00f      	beq.n	80017b0 <HAL_I2C_EV_IRQHandler+0x194>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	0a9b      	lsrs	r3, r3, #10
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <HAL_I2C_EV_IRQHandler+0x194>
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d103      	bne.n	80017b0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fb5b 	bl	8001e64 <I2C_MasterReceive_RXNE>
 80017ae:	e011      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 809a 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	0a5b      	lsrs	r3, r3, #9
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8093 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fbfa 	bl	8001fc6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d2:	e08e      	b.n	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80017d4:	e08d      	b.n	80018f2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e007      	b.n	80017f8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d012      	beq.n	800182a <HAL_I2C_EV_IRQHandler+0x20e>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	0a5b      	lsrs	r3, r3, #9
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00c      	beq.n	800182a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 ffbe 	bl	80027a4 <I2C_Slave_ADDR>
 8001828:	e066      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_I2C_EV_IRQHandler+0x22e>
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	0a5b      	lsrs	r3, r3, #9
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fff8 	bl	8002838 <I2C_Slave_STOPF>
 8001848:	e056      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	2b21      	cmp	r3, #33	; 0x21
 800184e:	d002      	beq.n	8001856 <HAL_I2C_EV_IRQHandler+0x23a>
 8001850:	7bbb      	ldrb	r3, [r7, #14]
 8001852:	2b29      	cmp	r3, #41	; 0x29
 8001854:	d125      	bne.n	80018a2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	09db      	lsrs	r3, r3, #7
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00f      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x266>
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	0a9b      	lsrs	r3, r3, #10
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x266>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fed6 	bl	800262c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001880:	e039      	b.n	80018f6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d033      	beq.n	80018f6 <HAL_I2C_EV_IRQHandler+0x2da>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	0a5b      	lsrs	r3, r3, #9
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d02d      	beq.n	80018f6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 ff03 	bl	80026a6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018a0:	e029      	b.n	80018f6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	099b      	lsrs	r3, r3, #6
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00f      	beq.n	80018ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	0a9b      	lsrs	r3, r3, #10
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 ff0d 	bl	80026e6 <I2C_SlaveReceive_RXNE>
 80018cc:	e014      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00e      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	0a5b      	lsrs	r3, r3, #9
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 ff3b 	bl	8002762 <I2C_SlaveReceive_BTF>
 80018ec:	e004      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80018ee:	bf00      	nop
 80018f0:	e002      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b08a      	sub	sp, #40	; 0x28
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001920:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d016      	beq.n	800195c <HAL_I2C_ER_IRQHandler+0x5e>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d010      	beq.n	800195c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800194a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	0a5b      	lsrs	r3, r3, #9
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <HAL_I2C_ER_IRQHandler+0x88>
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001984:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	0a9b      	lsrs	r3, r3, #10
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03f      	beq.n	8001a12 <HAL_I2C_ER_IRQHandler+0x114>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d039      	beq.n	8001a12 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800199e:	7efb      	ldrb	r3, [r7, #27]
 80019a0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80019b8:	7ebb      	ldrb	r3, [r7, #26]
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d112      	bne.n	80019e4 <HAL_I2C_ER_IRQHandler+0xe6>
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10f      	bne.n	80019e4 <HAL_I2C_ER_IRQHandler+0xe6>
 80019c4:	7cfb      	ldrb	r3, [r7, #19]
 80019c6:	2b21      	cmp	r3, #33	; 0x21
 80019c8:	d008      	beq.n	80019dc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80019ca:	7cfb      	ldrb	r3, [r7, #19]
 80019cc:	2b29      	cmp	r3, #41	; 0x29
 80019ce:	d005      	beq.n	80019dc <HAL_I2C_ER_IRQHandler+0xde>
 80019d0:	7cfb      	ldrb	r3, [r7, #19]
 80019d2:	2b28      	cmp	r3, #40	; 0x28
 80019d4:	d106      	bne.n	80019e4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b21      	cmp	r3, #33	; 0x21
 80019da:	d103      	bne.n	80019e4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f001 f85b 	bl	8002a98 <I2C_Slave_AF>
 80019e2:	e016      	b.n	8001a12 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019ec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80019f6:	7efb      	ldrb	r3, [r7, #27]
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d002      	beq.n	8001a02 <HAL_I2C_ER_IRQHandler+0x104>
 80019fc:	7efb      	ldrb	r3, [r7, #27]
 80019fe:	2b40      	cmp	r3, #64	; 0x40
 8001a00:	d107      	bne.n	8001a12 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a10:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	0adb      	lsrs	r3, r3, #11
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00e      	beq.n	8001a3c <HAL_I2C_ER_IRQHandler+0x13e>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001a3a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d008      	beq.n	8001a54 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f001 f892 	bl	8002b78 <I2C_ITError>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b26:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b2e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d150      	bne.n	8001be0 <I2C_MasterTransmit_TXE+0xc8>
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
 8001b40:	2b21      	cmp	r3, #33	; 0x21
 8001b42:	d14d      	bne.n	8001be0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d01d      	beq.n	8001b86 <I2C_MasterTransmit_TXE+0x6e>
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d01a      	beq.n	8001b86 <I2C_MasterTransmit_TXE+0x6e>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b56:	d016      	beq.n	8001b86 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b66:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2211      	movs	r2, #17
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff6c 	bl	8001a5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b84:	e060      	b.n	8001c48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b94:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d107      	bne.n	8001bd0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff81 	bl	8001ad0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bce:	e03b      	b.n	8001c48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff3f 	bl	8001a5c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bde:	e033      	b.n	8001c48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b21      	cmp	r3, #33	; 0x21
 8001be4:	d005      	beq.n	8001bf2 <I2C_MasterTransmit_TXE+0xda>
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	d12d      	bne.n	8001c48 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	2b22      	cmp	r3, #34	; 0x22
 8001bf0:	d12a      	bne.n	8001c48 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d108      	bne.n	8001c0e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001c0c:	e01c      	b.n	8001c48 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	d103      	bne.n	8001c22 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f88e 	bl	8001d3c <I2C_MemoryTransmit_TXE_BTF>
}
 8001c20:	e012      	b.n	8001c48 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	781a      	ldrb	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c46:	e7ff      	b.n	8001c48 <I2C_MasterTransmit_TXE+0x130>
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b21      	cmp	r3, #33	; 0x21
 8001c68:	d164      	bne.n	8001d34 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d012      	beq.n	8001c9a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001c98:	e04c      	b.n	8001d34 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d01d      	beq.n	8001cdc <I2C_MasterTransmit_BTF+0x8c>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d01a      	beq.n	8001cdc <I2C_MasterTransmit_BTF+0x8c>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cac:	d016      	beq.n	8001cdc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cbc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2211      	movs	r2, #17
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fec1 	bl	8001a5c <HAL_I2C_MasterTxCpltCallback>
}
 8001cda:	e02b      	b.n	8001d34 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cfa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d107      	bne.n	8001d26 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fed6 	bl	8001ad0 <HAL_I2C_MemTxCpltCallback>
}
 8001d24:	e006      	b.n	8001d34 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fe94 	bl	8001a5c <HAL_I2C_MasterTxCpltCallback>
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11d      	bne.n	8001d90 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d10b      	bne.n	8001d74 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6c:	1c9a      	adds	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001d72:	e073      	b.n	8001e5c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	121b      	asrs	r3, r3, #8
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d8e:	e065      	b.n	8001e5c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10b      	bne.n	8001db0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dae:	e055      	b.n	8001e5c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d151      	bne.n	8001e5c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b22      	cmp	r3, #34	; 0x22
 8001dbc:	d10d      	bne.n	8001dda <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dcc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001dd8:	e040      	b.n	8001e5c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d015      	beq.n	8001e10 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b21      	cmp	r3, #33	; 0x21
 8001de8:	d112      	bne.n	8001e10 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e0e:	e025      	b.n	8001e5c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d120      	bne.n	8001e5c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b21      	cmp	r3, #33	; 0x21
 8001e1e:	d11d      	bne.n	8001e5c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e2e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fe3a 	bl	8001ad0 <HAL_I2C_MemTxCpltCallback>
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b22      	cmp	r3, #34	; 0x22
 8001e76:	f040 80a2 	bne.w	8001fbe <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d921      	bls.n	8001ecc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	f040 8082 	bne.w	8001fbe <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001eca:	e078      	b.n	8001fbe <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d074      	beq.n	8001fbe <I2C_MasterReceive_RXNE+0x15a>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d002      	beq.n	8001ee0 <I2C_MasterReceive_RXNE+0x7c>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d16e      	bne.n	8001fbe <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f001 f9fd 	bl	80032e0 <I2C_WaitOnSTOPRequestThroughIT>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d142      	bne.n	8001f72 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001efa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d10a      	bne.n	8001f5c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fdc4 	bl	8001ae2 <HAL_I2C_MemRxCpltCallback>
}
 8001f5a:	e030      	b.n	8001fbe <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2212      	movs	r2, #18
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fd7f 	bl	8001a6e <HAL_I2C_MasterRxCpltCallback>
}
 8001f70:	e025      	b.n	8001fbe <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f80:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fd9b 	bl	8001af4 <HAL_I2C_ErrorCallback>
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d11b      	bne.n	8002016 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002014:	e0bd      	b.n	8002192 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b03      	cmp	r3, #3
 800201e:	d129      	bne.n	8002074 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00a      	beq.n	800204c <I2C_MasterReceive_BTF+0x86>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d007      	beq.n	800204c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002072:	e08e      	b.n	8002192 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d176      	bne.n	800216c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d002      	beq.n	800208a <I2C_MasterReceive_BTF+0xc4>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b10      	cmp	r3, #16
 8002088:	d108      	bne.n	800209c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e019      	b.n	80020d0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d002      	beq.n	80020a8 <I2C_MasterReceive_BTF+0xe2>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d108      	bne.n	80020ba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e00a      	b.n	80020d0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d007      	beq.n	80020d0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800212a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b40      	cmp	r3, #64	; 0x40
 800213e:	d10a      	bne.n	8002156 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fcc7 	bl	8001ae2 <HAL_I2C_MemRxCpltCallback>
}
 8002154:	e01d      	b.n	8002192 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2212      	movs	r2, #18
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fc82 	bl	8001a6e <HAL_I2C_MasterRxCpltCallback>
}
 800216a:	e012      	b.n	8002192 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b40      	cmp	r3, #64	; 0x40
 80021ac:	d117      	bne.n	80021de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80021c8:	e067      	b.n	800229a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	611a      	str	r2, [r3, #16]
}
 80021dc:	e05d      	b.n	800229a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021e6:	d133      	bne.n	8002250 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b21      	cmp	r3, #33	; 0x21
 80021f2:	d109      	bne.n	8002208 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002204:	611a      	str	r2, [r3, #16]
 8002206:	e008      	b.n	800221a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221e:	2b00      	cmp	r3, #0
 8002220:	d004      	beq.n	800222c <I2C_Master_SB+0x92>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	2b00      	cmp	r3, #0
 800222a:	d108      	bne.n	800223e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	2b00      	cmp	r3, #0
 8002232:	d032      	beq.n	800229a <I2C_Master_SB+0x100>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	d02d      	beq.n	800229a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224c:	605a      	str	r2, [r3, #4]
}
 800224e:	e024      	b.n	800229a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10e      	bne.n	8002276 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	b29b      	uxth	r3, r3
 800225e:	11db      	asrs	r3, r3, #7
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f003 0306 	and.w	r3, r3, #6
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f063 030f 	orn	r3, r3, #15
 800226c:	b2da      	uxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	611a      	str	r2, [r3, #16]
}
 8002274:	e011      	b.n	800229a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	2b01      	cmp	r3, #1
 800227c:	d10d      	bne.n	800229a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	b29b      	uxth	r3, r3
 8002284:	11db      	asrs	r3, r3, #7
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f003 0306 	and.w	r3, r3, #6
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f063 030e 	orn	r3, r3, #14
 8002292:	b2da      	uxtb	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	611a      	str	r2, [r3, #16]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <I2C_Master_ADD10+0x26>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d108      	bne.n	80022dc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <I2C_Master_ADD10+0x48>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ea:	605a      	str	r2, [r3, #4]
  }
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b091      	sub	sp, #68	; 0x44
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b22      	cmp	r3, #34	; 0x22
 800231e:	f040 8174 	bne.w	800260a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <I2C_Master_ADDR+0x54>
 800232a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d10b      	bne.n	800234a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	633b      	str	r3, [r7, #48]	; 0x30
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	e16b      	b.n	8002622 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11d      	bne.n	800238e <I2C_Master_ADDR+0x98>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800235a:	d118      	bne.n	800238e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235c:	2300      	movs	r3, #0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002380:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	651a      	str	r2, [r3, #80]	; 0x50
 800238c:	e149      	b.n	8002622 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d113      	bne.n	80023c0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002398:	2300      	movs	r3, #0
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e120      	b.n	8002602 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	f040 808a 	bne.w	80024e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80023cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023d2:	d137      	bne.n	8002444 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f2:	d113      	bne.n	800241c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002402:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	e0f2      	b.n	8002602 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	623b      	str	r3, [r7, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e0de      	b.n	8002602 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002446:	2b08      	cmp	r3, #8
 8002448:	d02e      	beq.n	80024a8 <I2C_Master_ADDR+0x1b2>
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	2b20      	cmp	r3, #32
 800244e:	d02b      	beq.n	80024a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	2b12      	cmp	r3, #18
 8002454:	d102      	bne.n	800245c <I2C_Master_ADDR+0x166>
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	2b01      	cmp	r3, #1
 800245a:	d125      	bne.n	80024a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	2b04      	cmp	r3, #4
 8002460:	d00e      	beq.n	8002480 <I2C_Master_ADDR+0x18a>
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	2b02      	cmp	r3, #2
 8002466:	d00b      	beq.n	8002480 <I2C_Master_ADDR+0x18a>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	2b10      	cmp	r3, #16
 800246c:	d008      	beq.n	8002480 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e007      	b.n	8002490 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800248e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	e0ac      	b.n	8002602 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e090      	b.n	8002602 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d158      	bne.n	800259c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d021      	beq.n	8002534 <I2C_Master_ADDR+0x23e>
 80024f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d01e      	beq.n	8002534 <I2C_Master_ADDR+0x23e>
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d01b      	beq.n	8002534 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e012      	b.n	800255a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002542:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002568:	d14b      	bne.n	8002602 <I2C_Master_ADDR+0x30c>
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002570:	d00b      	beq.n	800258a <I2C_Master_ADDR+0x294>
 8002572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002574:	2b01      	cmp	r3, #1
 8002576:	d008      	beq.n	800258a <I2C_Master_ADDR+0x294>
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	2b08      	cmp	r3, #8
 800257c:	d005      	beq.n	800258a <I2C_Master_ADDR+0x294>
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	2b10      	cmp	r3, #16
 8002582:	d002      	beq.n	800258a <I2C_Master_ADDR+0x294>
 8002584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002586:	2b20      	cmp	r3, #32
 8002588:	d13b      	bne.n	8002602 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	e032      	b.n	8002602 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025aa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ba:	d117      	bne.n	80025ec <I2C_Master_ADDR+0x2f6>
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025c2:	d00b      	beq.n	80025dc <I2C_Master_ADDR+0x2e6>
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d008      	beq.n	80025dc <I2C_Master_ADDR+0x2e6>
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d005      	beq.n	80025dc <I2C_Master_ADDR+0x2e6>
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d002      	beq.n	80025dc <I2C_Master_ADDR+0x2e6>
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d107      	bne.n	80025ec <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002608:	e00b      	b.n	8002622 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
}
 8002620:	e7ff      	b.n	8002622 <I2C_Master_ADDR+0x32c>
 8002622:	bf00      	nop
 8002624:	3744      	adds	r7, #68	; 0x44
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d02b      	beq.n	800269e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d114      	bne.n	800269e <I2C_SlaveTransmit_TXE+0x72>
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b29      	cmp	r3, #41	; 0x29
 8002678:	d111      	bne.n	800269e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002688:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2221      	movs	r2, #33	; 0x21
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2228      	movs	r2, #40	; 0x28
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff f9f1 	bl	8001a80 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d011      	beq.n	80026dc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b084      	sub	sp, #16
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d02c      	beq.n	800275a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d114      	bne.n	800275a <I2C_SlaveReceive_RXNE+0x74>
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b2a      	cmp	r3, #42	; 0x2a
 8002734:	d111      	bne.n	800275a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002744:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2222      	movs	r2, #34	; 0x22
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2228      	movs	r2, #40	; 0x28
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff f99c 	bl	8001a92 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d012      	beq.n	800279a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027be:	2b28      	cmp	r3, #40	; 0x28
 80027c0:	d127      	bne.n	8002812 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	09db      	lsrs	r3, r3, #7
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	81bb      	strh	r3, [r7, #12]
 80027f4:	e002      	b.n	80027fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002804:	89ba      	ldrh	r2, [r7, #12]
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff f94a 	bl	8001aa4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002810:	e00e      	b.n	8002830 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002846:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002856:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002884:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002894:	d172      	bne.n	800297c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b22      	cmp	r3, #34	; 0x22
 800289a:	d002      	beq.n	80028a2 <I2C_Slave_STOPF+0x6a>
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b2a      	cmp	r3, #42	; 0x2a
 80028a0:	d135      	bne.n	800290e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe fabc 	bl	8000e58 <HAL_DMA_GetState>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d049      	beq.n	800297a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	4a69      	ldr	r2, [pc, #420]	; (8002a90 <I2C_Slave_STOPF+0x258>)
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fa3a 	bl	8000d6c <HAL_DMA_Abort_IT>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d03d      	beq.n	800297a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002908:	4610      	mov	r0, r2
 800290a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800290c:	e035      	b.n	800297a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0204 	orr.w	r2, r3, #4
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002940:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fa86 	bl	8000e58 <HAL_DMA_GetState>
 800294c:	4603      	mov	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d014      	beq.n	800297c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	4a4e      	ldr	r2, [pc, #312]	; (8002a90 <I2C_Slave_STOPF+0x258>)
 8002958:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fa04 	bl	8000d6c <HAL_DMA_Abort_IT>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002974:	4610      	mov	r0, r2
 8002976:	4798      	blx	r3
 8002978:	e000      	b.n	800297c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800297a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d03e      	beq.n	8002a04 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d112      	bne.n	80029ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d112      	bne.n	80029ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f043 0204 	orr.w	r2, r3, #4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f8b3 	bl	8002b78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002a12:	e039      	b.n	8002a88 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b2a      	cmp	r3, #42	; 0x2a
 8002a18:	d109      	bne.n	8002a2e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2228      	movs	r2, #40	; 0x28
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff f832 	bl	8001a92 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b28      	cmp	r3, #40	; 0x28
 8002a38:	d111      	bne.n	8002a5e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <I2C_Slave_STOPF+0x25c>)
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff f831 	bl	8001abe <HAL_I2C_ListenCpltCallback>
}
 8002a5c:	e014      	b.n	8002a88 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	2b22      	cmp	r3, #34	; 0x22
 8002a64:	d002      	beq.n	8002a6c <I2C_Slave_STOPF+0x234>
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b22      	cmp	r3, #34	; 0x22
 8002a6a:	d10d      	bne.n	8002a88 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff f805 	bl	8001a92 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	08002ee1 	.word	0x08002ee1
 8002a94:	ffff0000 	.word	0xffff0000

08002a98 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d002      	beq.n	8002aba <I2C_Slave_AF+0x22>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d129      	bne.n	8002b0e <I2C_Slave_AF+0x76>
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b28      	cmp	r3, #40	; 0x28
 8002abe:	d126      	bne.n	8002b0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a2c      	ldr	r2, [pc, #176]	; (8002b74 <I2C_Slave_AF+0xdc>)
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ad4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ade:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe ffd9 	bl	8001abe <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002b0c:	e02e      	b.n	8002b6c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	2b21      	cmp	r3, #33	; 0x21
 8002b12:	d126      	bne.n	8002b62 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <I2C_Slave_AF+0xdc>)
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2221      	movs	r2, #33	; 0x21
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b58:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe ff90 	bl	8001a80 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b60:	e004      	b.n	8002b6c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b6a:	615a      	str	r2, [r3, #20]
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	ffff0000 	.word	0xffff0000

08002b78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b90:	7bbb      	ldrb	r3, [r7, #14]
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d002      	beq.n	8002b9c <I2C_ITError+0x24>
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d10a      	bne.n	8002bb2 <I2C_ITError+0x3a>
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b22      	cmp	r3, #34	; 0x22
 8002ba0:	d107      	bne.n	8002bb2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bb8:	2b28      	cmp	r3, #40	; 0x28
 8002bba:	d107      	bne.n	8002bcc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2228      	movs	r2, #40	; 0x28
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bca:	e015      	b.n	8002bf8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bda:	d00a      	beq.n	8002bf2 <I2C_ITError+0x7a>
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b60      	cmp	r3, #96	; 0x60
 8002be0:	d007      	beq.n	8002bf2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c06:	d161      	bne.n	8002ccc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d020      	beq.n	8002c66 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	4a6a      	ldr	r2, [pc, #424]	; (8002dd4 <I2C_ITError+0x25c>)
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe f89b 	bl	8000d6c <HAL_DMA_Abort_IT>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8089 	beq.w	8002d50 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c60:	4610      	mov	r0, r2
 8002c62:	4798      	blx	r3
 8002c64:	e074      	b.n	8002d50 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <I2C_ITError+0x25c>)
 8002c6c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe f87a 	bl	8000d6c <HAL_DMA_Abort_IT>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d068      	beq.n	8002d50 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d10b      	bne.n	8002ca4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4798      	blx	r3
 8002cca:	e041      	b.n	8002d50 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b60      	cmp	r3, #96	; 0x60
 8002cd6:	d125      	bne.n	8002d24 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d10b      	bne.n	8002d0c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fe fef2 	bl	8001b06 <HAL_I2C_AbortCpltCallback>
 8002d22:	e015      	b.n	8002d50 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d10b      	bne.n	8002d4a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fed2 	bl	8001af4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10e      	bne.n	8002d7e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d8c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d113      	bne.n	8002dca <I2C_ITError+0x252>
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b28      	cmp	r3, #40	; 0x28
 8002da6:	d110      	bne.n	8002dca <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <I2C_ITError+0x260>)
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7fe fe7a 	bl	8001abe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	08002ee1 	.word	0x08002ee1
 8002dd8:	ffff0000 	.word	0xffff0000

08002ddc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	607a      	str	r2, [r7, #4]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	460b      	mov	r3, r1
 8002dea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d006      	beq.n	8002e06 <I2C_MasterRequestWrite+0x2a>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d003      	beq.n	8002e06 <I2C_MasterRequestWrite+0x2a>
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e04:	d108      	bne.n	8002e18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	e00b      	b.n	8002e30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2b12      	cmp	r3, #18
 8002e1e:	d107      	bne.n	8002e30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f8f7 	bl	8003030 <I2C_WaitOnFlagUntilTimeout>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e56:	d103      	bne.n	8002e60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e035      	b.n	8002ed0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e6c:	d108      	bne.n	8002e80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e6e:	897b      	ldrh	r3, [r7, #10]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	e01b      	b.n	8002eb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e80:	897b      	ldrh	r3, [r7, #10]
 8002e82:	11db      	asrs	r3, r3, #7
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0306 	and.w	r3, r3, #6
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f063 030f 	orn	r3, r3, #15
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	490e      	ldr	r1, [pc, #56]	; (8002ed8 <I2C_MasterRequestWrite+0xfc>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f91d 	bl	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e010      	b.n	8002ed0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4907      	ldr	r1, [pc, #28]	; (8002edc <I2C_MasterRequestWrite+0x100>)
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f90d 	bl	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	00010008 	.word	0x00010008
 8002edc:	00010002 	.word	0x00010002

08002ee0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002efa:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <I2C_DMAAbort+0x148>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	08db      	lsrs	r3, r3, #3
 8002f00:	4a4a      	ldr	r2, [pc, #296]	; (800302c <I2C_DMAAbort+0x14c>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0a1a      	lsrs	r2, r3, #8
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00da      	lsls	r2, r3, #3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002f26:	e00a      	b.n	8002f3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3c:	d0ea      	beq.n	8002f14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	2200      	movs	r2, #0
 8002f82:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	2200      	movs	r2, #0
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b60      	cmp	r3, #96	; 0x60
 8002fae:	d10e      	bne.n	8002fce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7fe fd9d 	bl	8001b06 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fcc:	e027      	b.n	800301e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fd4:	2b28      	cmp	r3, #40	; 0x28
 8002fd6:	d117      	bne.n	8003008 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ff6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2228      	movs	r2, #40	; 0x28
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003006:	e007      	b.n	8003018 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003018:	6978      	ldr	r0, [r7, #20]
 800301a:	f7fe fd6b 	bl	8001af4 <HAL_I2C_ErrorCallback>
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000000 	.word	0x20000000
 800302c:	14f8b589 	.word	0x14f8b589

08003030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	e025      	b.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d021      	beq.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fd fd19 	bl	8000a80 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d116      	bne.n	800308e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e023      	b.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10d      	bne.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	e00c      	b.n	80030ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d0b6      	beq.n	8003042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ec:	e051      	b.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d123      	bne.n	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f043 0204 	orr.w	r2, r3, #4
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e046      	b.n	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d021      	beq.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fd fc97 	bl	8000a80 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d116      	bne.n	8003192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f043 0220 	orr.w	r2, r3, #32
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e020      	b.n	80031d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10c      	bne.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4013      	ands	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	e00b      	b.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	43da      	mvns	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d18d      	bne.n	80030ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e8:	e02d      	b.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f8aa 	bl	8003344 <I2C_IsAcknowledgeFailed>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e02d      	b.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d021      	beq.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7fd fc3d 	bl	8000a80 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d116      	bne.n	8003246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e007      	b.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d1ca      	bne.n	80031ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800326a:	e02d      	b.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f869 	bl	8003344 <I2C_IsAcknowledgeFailed>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e02d      	b.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d021      	beq.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003284:	f7fd fbfc 	bl	8000a80 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e007      	b.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d1ca      	bne.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	08db      	lsrs	r3, r3, #3
 80032f2:	4a13      	ldr	r2, [pc, #76]	; (8003340 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0a1a      	lsrs	r2, r3, #8
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3b01      	subs	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e008      	b.n	8003330 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332c:	d0e9      	beq.n	8003302 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000
 8003340:	14f8b589 	.word	0x14f8b589

08003344 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335a:	d11b      	bne.n	8003394 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003364:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f043 0204 	orr.w	r2, r3, #4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033b0:	d103      	bne.n	80033ba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80033b8:	e007      	b.n	80033ca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033c2:	d102      	bne.n	80033ca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2208      	movs	r2, #8
 80033c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e272      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8087 	beq.w	8003502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f4:	4b92      	ldr	r3, [pc, #584]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d00c      	beq.n	800341a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003400:	4b8f      	ldr	r3, [pc, #572]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b08      	cmp	r3, #8
 800340a:	d112      	bne.n	8003432 <HAL_RCC_OscConfig+0x5e>
 800340c:	4b8c      	ldr	r3, [pc, #560]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d10b      	bne.n	8003432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341a:	4b89      	ldr	r3, [pc, #548]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d06c      	beq.n	8003500 <HAL_RCC_OscConfig+0x12c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d168      	bne.n	8003500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e24c      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x76>
 800343c:	4b80      	ldr	r3, [pc, #512]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a7f      	ldr	r2, [pc, #508]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	e02e      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x98>
 8003452:	4b7b      	ldr	r3, [pc, #492]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7a      	ldr	r2, [pc, #488]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b78      	ldr	r3, [pc, #480]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a77      	ldr	r2, [pc, #476]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0xbc>
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a71      	ldr	r2, [pc, #452]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6e      	ldr	r2, [pc, #440]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 8003490:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6a      	ldr	r2, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a67      	ldr	r2, [pc, #412]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd fae6 	bl	8000a80 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fd fae2 	bl	8000a80 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e200      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b5d      	ldr	r3, [pc, #372]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xe4>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fd fad2 	bl	8000a80 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fd face 	bl	8000a80 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1ec      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x10c>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d063      	beq.n	80035d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800350e:	4b4c      	ldr	r3, [pc, #304]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800351a:	4b49      	ldr	r3, [pc, #292]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11c      	bne.n	8003560 <HAL_RCC_OscConfig+0x18c>
 8003526:	4b46      	ldr	r3, [pc, #280]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	4b43      	ldr	r3, [pc, #268]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_RCC_OscConfig+0x176>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e1c0      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b3d      	ldr	r3, [pc, #244]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4939      	ldr	r1, [pc, #228]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	e03a      	b.n	80035d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003568:	4b36      	ldr	r3, [pc, #216]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fd fa87 	bl	8000a80 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003576:	f7fd fa83 	bl	8000a80 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1a1      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4927      	ldr	r1, [pc, #156]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd fa66 	bl	8000a80 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fd fa62 	bl	8000a80 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e180      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d03a      	beq.n	8003658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b17      	ldr	r3, [pc, #92]	; (8003648 <HAL_RCC_OscConfig+0x274>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f0:	f7fd fa46 	bl	8000a80 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fd fa42 	bl	8000a80 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e160      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003616:	2001      	movs	r0, #1
 8003618:	f000 fad8 	bl	8003bcc <RCC_Delay>
 800361c:	e01c      	b.n	8003658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_RCC_OscConfig+0x274>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003624:	f7fd fa2c 	bl	8000a80 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362a:	e00f      	b.n	800364c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362c:	f7fd fa28 	bl	8000a80 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d908      	bls.n	800364c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e146      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	42420000 	.word	0x42420000
 8003648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	4b92      	ldr	r3, [pc, #584]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e9      	bne.n	800362c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a6 	beq.w	80037b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b8b      	ldr	r3, [pc, #556]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4a87      	ldr	r2, [pc, #540]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	61d3      	str	r3, [r2, #28]
 8003682:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	4b82      	ldr	r3, [pc, #520]	; (800389c <HAL_RCC_OscConfig+0x4c8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369e:	4b7f      	ldr	r3, [pc, #508]	; (800389c <HAL_RCC_OscConfig+0x4c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7e      	ldr	r2, [pc, #504]	; (800389c <HAL_RCC_OscConfig+0x4c8>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fd f9e9 	bl	8000a80 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fd f9e5 	bl	8000a80 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e103      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	4b75      	ldr	r3, [pc, #468]	; (800389c <HAL_RCC_OscConfig+0x4c8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x312>
 80036d8:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4a6e      	ldr	r2, [pc, #440]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6213      	str	r3, [r2, #32]
 80036e4:	e02d      	b.n	8003742 <HAL_RCC_OscConfig+0x36e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x334>
 80036ee:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a69      	ldr	r2, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6213      	str	r3, [r2, #32]
 80036fa:	4b67      	ldr	r3, [pc, #412]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a66      	ldr	r2, [pc, #408]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	e01c      	b.n	8003742 <HAL_RCC_OscConfig+0x36e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x356>
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	4b5e      	ldr	r3, [pc, #376]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a5d      	ldr	r2, [pc, #372]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6213      	str	r3, [r2, #32]
 8003728:	e00b      	b.n	8003742 <HAL_RCC_OscConfig+0x36e>
 800372a:	4b5b      	ldr	r3, [pc, #364]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4a5a      	ldr	r2, [pc, #360]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6213      	str	r3, [r2, #32]
 8003736:	4b58      	ldr	r3, [pc, #352]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4a57      	ldr	r2, [pc, #348]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374a:	f7fd f999 	bl	8000a80 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fd f995 	bl	8000a80 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0b1      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <HAL_RCC_OscConfig+0x37e>
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fd f983 	bl	8000a80 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fd f97f 	bl	8000a80 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e09b      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	4b40      	ldr	r3, [pc, #256]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ee      	bne.n	800377e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b3c      	ldr	r3, [pc, #240]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	4a3b      	ldr	r2, [pc, #236]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8087 	beq.w	80038ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037bc:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d061      	beq.n	800388c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d146      	bne.n	800385e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fd f953 	bl	8000a80 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fd f94f 	bl	8000a80 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e06d      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f0:	4b29      	ldr	r3, [pc, #164]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003804:	d108      	bne.n	8003818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4921      	ldr	r1, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003818:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a19      	ldr	r1, [r3, #32]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	430b      	orrs	r3, r1
 800382a:	491b      	ldr	r1, [pc, #108]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fd f923 	bl	8000a80 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383e:	f7fd f91f 	bl	8000a80 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e03d      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x46a>
 800385c:	e035      	b.n	80038ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fd f90c 	bl	8000a80 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fd f908 	bl	8000a80 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e026      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x498>
 800388a:	e01e      	b.n	80038ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e019      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
 8003898:	40021000 	.word	0x40021000
 800389c:	40007000 	.word	0x40007000
 80038a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x500>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0d0      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d910      	bls.n	800391c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	4965      	ldr	r1, [pc, #404]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003934:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800393e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a52      	ldr	r2, [pc, #328]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	494d      	ldr	r1, [pc, #308]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d040      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d115      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e07f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e073      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06b      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4936      	ldr	r1, [pc, #216]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fd f85a 	bl	8000a80 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fd f856 	bl	8000a80 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e053      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d210      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0207 	bic.w	r2, r3, #7
 8003a0e:	4922      	ldr	r1, [pc, #136]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e032      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4916      	ldr	r1, [pc, #88]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a66:	f000 f821 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	490a      	ldr	r1, [pc, #40]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	5ccb      	ldrb	r3, [r1, r3]
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8003a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fc ffb8 	bl	80009fc <HAL_InitTick>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40022000 	.word	0x40022000
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08005730 	.word	0x08005730
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	20000004 	.word	0x20000004

08003aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aac:	b490      	push	{r4, r7}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ab2:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <HAL_RCC_GetSysClockFreq+0xac>)
 8003ab4:	1d3c      	adds	r4, r7, #4
 8003ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003abc:	f240 2301 	movw	r3, #513	; 0x201
 8003ac0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ad6:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d002      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x40>
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x46>
 8003aea:	e02b      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aec:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003aee:	623b      	str	r3, [r7, #32]
      break;
 8003af0:	e02b      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	0c9b      	lsrs	r3, r3, #18
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3328      	adds	r3, #40	; 0x28
 8003afc:	443b      	add	r3, r7
 8003afe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d012      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	0c5b      	lsrs	r3, r3, #17
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	3328      	adds	r3, #40	; 0x28
 8003b1a:	443b      	add	r3, r7
 8003b1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	4a0e      	ldr	r2, [pc, #56]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b26:	fb03 f202 	mul.w	r2, r3, r2
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	e004      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	623b      	str	r3, [r7, #32]
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b46:	623b      	str	r3, [r7, #32]
      break;
 8003b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3728      	adds	r7, #40	; 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc90      	pop	{r4, r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	08005720 	.word	0x08005720
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	007a1200 	.word	0x007a1200
 8003b64:	003d0900 	.word	0x003d0900

08003b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b02      	ldr	r3, [pc, #8]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	20000000 	.word	0x20000000

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b80:	f7ff fff2 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	08005740 	.word	0x08005740

08003ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ba8:	f7ff ffde 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	0adb      	lsrs	r3, r3, #11
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	08005740 	.word	0x08005740

08003bcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <RCC_Delay+0x34>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <RCC_Delay+0x38>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	0a5b      	lsrs	r3, r3, #9
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003be8:	bf00      	nop
  }
  while (Delay --);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1e5a      	subs	r2, r3, #1
 8003bee:	60fa      	str	r2, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f9      	bne.n	8003be8 <RCC_Delay+0x1c>
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	20000000 	.word	0x20000000
 8003c04:	10624dd3 	.word	0x10624dd3

08003c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fc fe08 	bl	8000844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fa6a 	bl	8004120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d001      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e035      	b.n	8003d2c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a16      	ldr	r2, [pc, #88]	; (8003d38 <HAL_TIM_Base_Start_IT+0x90>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIM_Base_Start_IT+0x4e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <HAL_TIM_Base_Start_IT+0x94>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d111      	bne.n	8003d1a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b06      	cmp	r3, #6
 8003d06:	d010      	beq.n	8003d2a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d18:	e007      	b.n	8003d2a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40000400 	.word	0x40000400

08003d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d122      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d11b      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f06f 0202 	mvn.w	r2, #2
 8003d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9b1 	bl	80040ea <HAL_TIM_IC_CaptureCallback>
 8003d88:	e005      	b.n	8003d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9a4 	bl	80040d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f9b3 	bl	80040fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d122      	bne.n	8003df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d11b      	bne.n	8003df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0204 	mvn.w	r2, #4
 8003dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f987 	bl	80040ea <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f97a 	bl	80040d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f989 	bl	80040fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d122      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d11b      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0208 	mvn.w	r2, #8
 8003e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2204      	movs	r2, #4
 8003e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f95d 	bl	80040ea <HAL_TIM_IC_CaptureCallback>
 8003e30:	e005      	b.n	8003e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f950 	bl	80040d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f95f 	bl	80040fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d122      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d11b      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0210 	mvn.w	r2, #16
 8003e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f933 	bl	80040ea <HAL_TIM_IC_CaptureCallback>
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f926 	bl	80040d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f935 	bl	80040fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0201 	mvn.w	r2, #1
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fc fb12 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fa67 	bl	80043be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d10e      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b40      	cmp	r3, #64	; 0x40
 8003f0a:	d107      	bne.n	8003f1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8f9 	bl	800410e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d10e      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d107      	bne.n	8003f48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0220 	mvn.w	r2, #32
 8003f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fa32 	bl	80043ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIM_ConfigClockSource+0x18>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0b3      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x180>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa0:	d03e      	beq.n	8004020 <HAL_TIM_ConfigClockSource+0xd0>
 8003fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa6:	f200 8087 	bhi.w	80040b8 <HAL_TIM_ConfigClockSource+0x168>
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	f000 8085 	beq.w	80040bc <HAL_TIM_ConfigClockSource+0x16c>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d87f      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x168>
 8003fb8:	2b70      	cmp	r3, #112	; 0x70
 8003fba:	d01a      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0xa2>
 8003fbc:	2b70      	cmp	r3, #112	; 0x70
 8003fbe:	d87b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x168>
 8003fc0:	2b60      	cmp	r3, #96	; 0x60
 8003fc2:	d050      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x116>
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d877      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x168>
 8003fc8:	2b50      	cmp	r3, #80	; 0x50
 8003fca:	d03c      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0xf6>
 8003fcc:	2b50      	cmp	r3, #80	; 0x50
 8003fce:	d873      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x168>
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d058      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x136>
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d86f      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x168>
 8003fd8:	2b30      	cmp	r3, #48	; 0x30
 8003fda:	d064      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x156>
 8003fdc:	2b30      	cmp	r3, #48	; 0x30
 8003fde:	d86b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x168>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d060      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x156>
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d867      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x168>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d05c      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x156>
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d05a      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ff0:	e062      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6899      	ldr	r1, [r3, #8]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f000 f95c 	bl	80042be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004014:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	609a      	str	r2, [r3, #8]
      break;
 800401e:	e04e      	b.n	80040be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6899      	ldr	r1, [r3, #8]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f000 f945 	bl	80042be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004042:	609a      	str	r2, [r3, #8]
      break;
 8004044:	e03b      	b.n	80040be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	461a      	mov	r2, r3
 8004054:	f000 f8bc 	bl	80041d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2150      	movs	r1, #80	; 0x50
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f913 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 8004064:	e02b      	b.n	80040be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	f000 f8da 	bl	800422c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2160      	movs	r1, #96	; 0x60
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f903 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 8004084:	e01b      	b.n	80040be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6859      	ldr	r1, [r3, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	461a      	mov	r2, r3
 8004094:	f000 f89c 	bl	80041d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2140      	movs	r1, #64	; 0x40
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f8f3 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 80040a4:	e00b      	b.n	80040be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f000 f8ea 	bl	800428a <TIM_ITRx_SetConfig>
        break;
 80040b6:	e002      	b.n	80040be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040b8:	bf00      	nop
 80040ba:	e000      	b.n	80040be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <TIM_Base_SetConfig+0xa8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_Base_SetConfig+0x28>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x28>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a22      	ldr	r2, [pc, #136]	; (80041cc <TIM_Base_SetConfig+0xac>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <TIM_Base_SetConfig+0xa8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <TIM_Base_SetConfig+0x52>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d003      	beq.n	8004172 <TIM_Base_SetConfig+0x52>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <TIM_Base_SetConfig+0xac>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d108      	bne.n	8004184 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <TIM_Base_SetConfig+0xa8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d103      	bne.n	80041b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	615a      	str	r2, [r3, #20]
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40000400 	.word	0x40000400

080041d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 030a 	bic.w	r3, r3, #10
 800420c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 0210 	bic.w	r2, r3, #16
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004256:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	031b      	lsls	r3, r3, #12
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004268:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f043 0307 	orr.w	r3, r3, #7
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042be:	b480      	push	{r7}
 80042c0:	b087      	sub	sp, #28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	021a      	lsls	r2, r3, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	609a      	str	r2, [r3, #8]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004310:	2302      	movs	r3, #2
 8004312:	e041      	b.n	8004398 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d009      	beq.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004360:	d004      	beq.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a10      	ldr	r2, [pc, #64]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d10c      	bne.n	8004386 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40000400 	.word	0x40000400

080043ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e03f      	b.n	8004462 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fa72 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	; 0x24
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fc25 	bl	8004c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b08a      	sub	sp, #40	; 0x28
 800446e:	af02      	add	r7, sp, #8
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	603b      	str	r3, [r7, #0]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b20      	cmp	r3, #32
 8004488:	d17c      	bne.n	8004584 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_UART_Transmit+0x2c>
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e075      	b.n	8004586 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_UART_Transmit+0x3e>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e06e      	b.n	8004586 <HAL_UART_Transmit+0x11c>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2221      	movs	r2, #33	; 0x21
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044be:	f7fc fadf 	bl	8000a80 <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d108      	bne.n	80044ec <HAL_UART_Transmit+0x82>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e003      	b.n	80044f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044fc:	e02a      	b.n	8004554 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	2180      	movs	r1, #128	; 0x80
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fa11 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e036      	b.n	8004586 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10b      	bne.n	8004536 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800452c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	3302      	adds	r3, #2
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e007      	b.n	8004546 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	3301      	adds	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004558:	b29b      	uxth	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1cf      	bne.n	80044fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2140      	movs	r1, #64	; 0x40
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f9e1 	bl	8004930 <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e006      	b.n	8004586 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10d      	bne.n	80045e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_UART_IRQHandler+0x52>
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa99 	bl	8004b12 <UART_Receive_IT>
      return;
 80045e0:	e17b      	b.n	80048da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80b1 	beq.w	800474c <HAL_UART_IRQHandler+0x1bc>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <HAL_UART_IRQHandler+0x70>
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80a6 	beq.w	800474c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_UART_IRQHandler+0x90>
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f043 0201 	orr.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_UART_IRQHandler+0xb0>
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0202 	orr.w	r2, r3, #2
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_UART_IRQHandler+0xd0>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f043 0204 	orr.w	r2, r3, #4
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00f      	beq.n	800468a <HAL_UART_IRQHandler+0xfa>
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_UART_IRQHandler+0xee>
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f043 0208 	orr.w	r2, r3, #8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 811e 	beq.w	80048d0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_UART_IRQHandler+0x11e>
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fa32 	bl	8004b12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <HAL_UART_IRQHandler+0x146>
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d031      	beq.n	800473a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f974 	bl	80049c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d023      	beq.n	8004732 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	4a76      	ldr	r2, [pc, #472]	; (80048e0 <HAL_UART_IRQHandler+0x350>)
 8004708:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	4618      	mov	r0, r3
 8004710:	f7fc fb2c 	bl	8000d6c <HAL_DMA_Abort_IT>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004724:	4610      	mov	r0, r2
 8004726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e00e      	b.n	8004748 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8ec 	bl	8004908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e00a      	b.n	8004748 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8e8 	bl	8004908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e006      	b.n	8004748 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8e4 	bl	8004908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004746:	e0c3      	b.n	80048d0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	bf00      	nop
    return;
 800474a:	e0c1      	b.n	80048d0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	f040 80a1 	bne.w	8004898 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 809b 	beq.w	8004898 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8095 	beq.w	8004898 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04e      	beq.n	8004830 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800479c:	8a3b      	ldrh	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8098 	beq.w	80048d4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047a8:	8a3a      	ldrh	r2, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	f080 8092 	bcs.w	80048d4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8a3a      	ldrh	r2, [r7, #16]
 80047b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d02b      	beq.n	8004818 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0210 	bic.w	r2, r2, #16
 800480c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc fa6f 	bl	8000cf6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004820:	b29b      	uxth	r3, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	b29b      	uxth	r3, r3
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f876 	bl	800491a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800482e:	e051      	b.n	80048d4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004838:	b29b      	uxth	r3, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d047      	beq.n	80048d8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004848:	8a7b      	ldrh	r3, [r7, #18]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d044      	beq.n	80048d8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800485c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0201 	bic.w	r2, r2, #1
 800486c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0210 	bic.w	r2, r2, #16
 800488a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800488c:	8a7b      	ldrh	r3, [r7, #18]
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f842 	bl	800491a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004896:	e01f      	b.n	80048d8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_UART_IRQHandler+0x324>
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f8c9 	bl	8004a44 <UART_Transmit_IT>
    return;
 80048b2:	e012      	b.n	80048da <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <HAL_UART_IRQHandler+0x34a>
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f90a 	bl	8004ae2 <UART_EndTransmit_IT>
    return;
 80048ce:	e004      	b.n	80048da <HAL_UART_IRQHandler+0x34a>
    return;
 80048d0:	bf00      	nop
 80048d2:	e002      	b.n	80048da <HAL_UART_IRQHandler+0x34a>
      return;
 80048d4:	bf00      	nop
 80048d6:	e000      	b.n	80048da <HAL_UART_IRQHandler+0x34a>
      return;
 80048d8:	bf00      	nop
  }
}
 80048da:	3728      	adds	r7, #40	; 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	08004a1d 	.word	0x08004a1d

080048e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004940:	e02c      	b.n	800499c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004948:	d028      	beq.n	800499c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <UART_WaitOnFlagUntilTimeout+0x30>
 8004950:	f7fc f896 	bl	8000a80 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	429a      	cmp	r2, r3
 800495e:	d21d      	bcs.n	800499c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800496e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e00f      	b.n	80049bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d0c3      	beq.n	8004942 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0210 	bic.w	r2, r2, #16
 8004a02:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff ff66 	bl	8004908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b21      	cmp	r3, #33	; 0x21
 8004a56:	d13e      	bne.n	8004ad6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a60:	d114      	bne.n	8004a8c <UART_Transmit_IT+0x48>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d110      	bne.n	8004a8c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	1c9a      	adds	r2, r3, #2
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]
 8004a8a:	e008      	b.n	8004a9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	1c59      	adds	r1, r3, #1
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6211      	str	r1, [r2, #32]
 8004a96:	781a      	ldrb	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e000      	b.n	8004ad8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
  }
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff feee 	bl	80048e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b22      	cmp	r3, #34	; 0x22
 8004b24:	f040 8099 	bne.w	8004c5a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b30:	d117      	bne.n	8004b62 <UART_Receive_IT+0x50>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d113      	bne.n	8004b62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	1c9a      	adds	r2, r3, #2
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b60:	e026      	b.n	8004bb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	d007      	beq.n	8004b86 <UART_Receive_IT+0x74>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <UART_Receive_IT+0x82>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e008      	b.n	8004ba6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d148      	bne.n	8004c56 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0220 	bic.w	r2, r2, #32
 8004bd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d123      	bne.n	8004c4c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0210 	bic.w	r2, r2, #16
 8004c18:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d10a      	bne.n	8004c3e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fe68 	bl	800491a <HAL_UARTEx_RxEventCallback>
 8004c4a:	e002      	b.n	8004c52 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff fe52 	bl	80048f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e002      	b.n	8004c5c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	e000      	b.n	8004c5c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c5a:	2302      	movs	r3, #2
  }
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c9e:	f023 030c 	bic.w	r3, r3, #12
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <UART_SetConfig+0x114>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d103      	bne.n	8004cd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ccc:	f7fe ff6a 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	e002      	b.n	8004cda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cd4:	f7fe ff52 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004cd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009a      	lsls	r2, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf0:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <UART_SetConfig+0x118>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	0119      	lsls	r1, r3, #4
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	009a      	lsls	r2, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <UART_SetConfig+0x118>)
 8004d12:	fba3 0302 	umull	r0, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	2064      	movs	r0, #100	; 0x64
 8004d1a:	fb00 f303 	mul.w	r3, r0, r3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	3332      	adds	r3, #50	; 0x32
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <UART_SetConfig+0x118>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d30:	4419      	add	r1, r3
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009a      	lsls	r2, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d48:	4b0c      	ldr	r3, [pc, #48]	; (8004d7c <UART_SetConfig+0x118>)
 8004d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2064      	movs	r0, #100	; 0x64
 8004d52:	fb00 f303 	mul.w	r3, r0, r3
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	3332      	adds	r3, #50	; 0x32
 8004d5c:	4a07      	ldr	r2, [pc, #28]	; (8004d7c <UART_SetConfig+0x118>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40013800 	.word	0x40013800
 8004d7c:	51eb851f 	.word	0x51eb851f

08004d80 <__errno>:
 8004d80:	4b01      	ldr	r3, [pc, #4]	; (8004d88 <__errno+0x8>)
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <__libc_init_array>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	2600      	movs	r6, #0
 8004d90:	4d0c      	ldr	r5, [pc, #48]	; (8004dc4 <__libc_init_array+0x38>)
 8004d92:	4c0d      	ldr	r4, [pc, #52]	; (8004dc8 <__libc_init_array+0x3c>)
 8004d94:	1b64      	subs	r4, r4, r5
 8004d96:	10a4      	asrs	r4, r4, #2
 8004d98:	42a6      	cmp	r6, r4
 8004d9a:	d109      	bne.n	8004db0 <__libc_init_array+0x24>
 8004d9c:	f000 fc9c 	bl	80056d8 <_init>
 8004da0:	2600      	movs	r6, #0
 8004da2:	4d0a      	ldr	r5, [pc, #40]	; (8004dcc <__libc_init_array+0x40>)
 8004da4:	4c0a      	ldr	r4, [pc, #40]	; (8004dd0 <__libc_init_array+0x44>)
 8004da6:	1b64      	subs	r4, r4, r5
 8004da8:	10a4      	asrs	r4, r4, #2
 8004daa:	42a6      	cmp	r6, r4
 8004dac:	d105      	bne.n	8004dba <__libc_init_array+0x2e>
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db4:	4798      	blx	r3
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7ee      	b.n	8004d98 <__libc_init_array+0xc>
 8004dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbe:	4798      	blx	r3
 8004dc0:	3601      	adds	r6, #1
 8004dc2:	e7f2      	b.n	8004daa <__libc_init_array+0x1e>
 8004dc4:	0800577c 	.word	0x0800577c
 8004dc8:	0800577c 	.word	0x0800577c
 8004dcc:	0800577c 	.word	0x0800577c
 8004dd0:	08005780 	.word	0x08005780

08004dd4 <memset>:
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4402      	add	r2, r0
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d100      	bne.n	8004dde <memset+0xa>
 8004ddc:	4770      	bx	lr
 8004dde:	f803 1b01 	strb.w	r1, [r3], #1
 8004de2:	e7f9      	b.n	8004dd8 <memset+0x4>

08004de4 <siprintf>:
 8004de4:	b40e      	push	{r1, r2, r3}
 8004de6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dea:	b500      	push	{lr}
 8004dec:	b09c      	sub	sp, #112	; 0x70
 8004dee:	ab1d      	add	r3, sp, #116	; 0x74
 8004df0:	9002      	str	r0, [sp, #8]
 8004df2:	9006      	str	r0, [sp, #24]
 8004df4:	9107      	str	r1, [sp, #28]
 8004df6:	9104      	str	r1, [sp, #16]
 8004df8:	4808      	ldr	r0, [pc, #32]	; (8004e1c <siprintf+0x38>)
 8004dfa:	4909      	ldr	r1, [pc, #36]	; (8004e20 <siprintf+0x3c>)
 8004dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e00:	9105      	str	r1, [sp, #20]
 8004e02:	6800      	ldr	r0, [r0, #0]
 8004e04:	a902      	add	r1, sp, #8
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	f000 f868 	bl	8004edc <_svfiprintf_r>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	9b02      	ldr	r3, [sp, #8]
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	b01c      	add	sp, #112	; 0x70
 8004e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e18:	b003      	add	sp, #12
 8004e1a:	4770      	bx	lr
 8004e1c:	2000000c 	.word	0x2000000c
 8004e20:	ffff0208 	.word	0xffff0208

08004e24 <__ssputs_r>:
 8004e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	688e      	ldr	r6, [r1, #8]
 8004e2a:	4682      	mov	sl, r0
 8004e2c:	429e      	cmp	r6, r3
 8004e2e:	460c      	mov	r4, r1
 8004e30:	4690      	mov	r8, r2
 8004e32:	461f      	mov	r7, r3
 8004e34:	d838      	bhi.n	8004ea8 <__ssputs_r+0x84>
 8004e36:	898a      	ldrh	r2, [r1, #12]
 8004e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e3c:	d032      	beq.n	8004ea4 <__ssputs_r+0x80>
 8004e3e:	6825      	ldr	r5, [r4, #0]
 8004e40:	6909      	ldr	r1, [r1, #16]
 8004e42:	3301      	adds	r3, #1
 8004e44:	eba5 0901 	sub.w	r9, r5, r1
 8004e48:	6965      	ldr	r5, [r4, #20]
 8004e4a:	444b      	add	r3, r9
 8004e4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e54:	106d      	asrs	r5, r5, #1
 8004e56:	429d      	cmp	r5, r3
 8004e58:	bf38      	it	cc
 8004e5a:	461d      	movcc	r5, r3
 8004e5c:	0553      	lsls	r3, r2, #21
 8004e5e:	d531      	bpl.n	8004ec4 <__ssputs_r+0xa0>
 8004e60:	4629      	mov	r1, r5
 8004e62:	f000 fb6f 	bl	8005544 <_malloc_r>
 8004e66:	4606      	mov	r6, r0
 8004e68:	b950      	cbnz	r0, 8004e80 <__ssputs_r+0x5c>
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e70:	f8ca 3000 	str.w	r3, [sl]
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e80:	464a      	mov	r2, r9
 8004e82:	6921      	ldr	r1, [r4, #16]
 8004e84:	f000 face 	bl	8005424 <memcpy>
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	6126      	str	r6, [r4, #16]
 8004e96:	444e      	add	r6, r9
 8004e98:	6026      	str	r6, [r4, #0]
 8004e9a:	463e      	mov	r6, r7
 8004e9c:	6165      	str	r5, [r4, #20]
 8004e9e:	eba5 0509 	sub.w	r5, r5, r9
 8004ea2:	60a5      	str	r5, [r4, #8]
 8004ea4:	42be      	cmp	r6, r7
 8004ea6:	d900      	bls.n	8004eaa <__ssputs_r+0x86>
 8004ea8:	463e      	mov	r6, r7
 8004eaa:	4632      	mov	r2, r6
 8004eac:	4641      	mov	r1, r8
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	f000 fac6 	bl	8005440 <memmove>
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	1b9b      	subs	r3, r3, r6
 8004eba:	60a3      	str	r3, [r4, #8]
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	4433      	add	r3, r6
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	e7db      	b.n	8004e7c <__ssputs_r+0x58>
 8004ec4:	462a      	mov	r2, r5
 8004ec6:	f000 fbb1 	bl	800562c <_realloc_r>
 8004eca:	4606      	mov	r6, r0
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d1e1      	bne.n	8004e94 <__ssputs_r+0x70>
 8004ed0:	4650      	mov	r0, sl
 8004ed2:	6921      	ldr	r1, [r4, #16]
 8004ed4:	f000 face 	bl	8005474 <_free_r>
 8004ed8:	e7c7      	b.n	8004e6a <__ssputs_r+0x46>
	...

08004edc <_svfiprintf_r>:
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	4698      	mov	r8, r3
 8004ee2:	898b      	ldrh	r3, [r1, #12]
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	460d      	mov	r5, r1
 8004eea:	4614      	mov	r4, r2
 8004eec:	b09d      	sub	sp, #116	; 0x74
 8004eee:	d50e      	bpl.n	8004f0e <_svfiprintf_r+0x32>
 8004ef0:	690b      	ldr	r3, [r1, #16]
 8004ef2:	b963      	cbnz	r3, 8004f0e <_svfiprintf_r+0x32>
 8004ef4:	2140      	movs	r1, #64	; 0x40
 8004ef6:	f000 fb25 	bl	8005544 <_malloc_r>
 8004efa:	6028      	str	r0, [r5, #0]
 8004efc:	6128      	str	r0, [r5, #16]
 8004efe:	b920      	cbnz	r0, 8004f0a <_svfiprintf_r+0x2e>
 8004f00:	230c      	movs	r3, #12
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	e0d1      	b.n	80050ae <_svfiprintf_r+0x1d2>
 8004f0a:	2340      	movs	r3, #64	; 0x40
 8004f0c:	616b      	str	r3, [r5, #20]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9309      	str	r3, [sp, #36]	; 0x24
 8004f12:	2320      	movs	r3, #32
 8004f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f18:	2330      	movs	r3, #48	; 0x30
 8004f1a:	f04f 0901 	mov.w	r9, #1
 8004f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050c8 <_svfiprintf_r+0x1ec>
 8004f26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f2a:	4623      	mov	r3, r4
 8004f2c:	469a      	mov	sl, r3
 8004f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f32:	b10a      	cbz	r2, 8004f38 <_svfiprintf_r+0x5c>
 8004f34:	2a25      	cmp	r2, #37	; 0x25
 8004f36:	d1f9      	bne.n	8004f2c <_svfiprintf_r+0x50>
 8004f38:	ebba 0b04 	subs.w	fp, sl, r4
 8004f3c:	d00b      	beq.n	8004f56 <_svfiprintf_r+0x7a>
 8004f3e:	465b      	mov	r3, fp
 8004f40:	4622      	mov	r2, r4
 8004f42:	4629      	mov	r1, r5
 8004f44:	4638      	mov	r0, r7
 8004f46:	f7ff ff6d 	bl	8004e24 <__ssputs_r>
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	f000 80aa 	beq.w	80050a4 <_svfiprintf_r+0x1c8>
 8004f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f52:	445a      	add	r2, fp
 8004f54:	9209      	str	r2, [sp, #36]	; 0x24
 8004f56:	f89a 3000 	ldrb.w	r3, [sl]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80a2 	beq.w	80050a4 <_svfiprintf_r+0x1c8>
 8004f60:	2300      	movs	r3, #0
 8004f62:	f04f 32ff 	mov.w	r2, #4294967295
 8004f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f6a:	f10a 0a01 	add.w	sl, sl, #1
 8004f6e:	9304      	str	r3, [sp, #16]
 8004f70:	9307      	str	r3, [sp, #28]
 8004f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f76:	931a      	str	r3, [sp, #104]	; 0x68
 8004f78:	4654      	mov	r4, sl
 8004f7a:	2205      	movs	r2, #5
 8004f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f80:	4851      	ldr	r0, [pc, #324]	; (80050c8 <_svfiprintf_r+0x1ec>)
 8004f82:	f000 fa41 	bl	8005408 <memchr>
 8004f86:	9a04      	ldr	r2, [sp, #16]
 8004f88:	b9d8      	cbnz	r0, 8004fc2 <_svfiprintf_r+0xe6>
 8004f8a:	06d0      	lsls	r0, r2, #27
 8004f8c:	bf44      	itt	mi
 8004f8e:	2320      	movmi	r3, #32
 8004f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f94:	0711      	lsls	r1, r2, #28
 8004f96:	bf44      	itt	mi
 8004f98:	232b      	movmi	r3, #43	; 0x2b
 8004f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa4:	d015      	beq.n	8004fd2 <_svfiprintf_r+0xf6>
 8004fa6:	4654      	mov	r4, sl
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f04f 0c0a 	mov.w	ip, #10
 8004fae:	9a07      	ldr	r2, [sp, #28]
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fb6:	3b30      	subs	r3, #48	; 0x30
 8004fb8:	2b09      	cmp	r3, #9
 8004fba:	d94e      	bls.n	800505a <_svfiprintf_r+0x17e>
 8004fbc:	b1b0      	cbz	r0, 8004fec <_svfiprintf_r+0x110>
 8004fbe:	9207      	str	r2, [sp, #28]
 8004fc0:	e014      	b.n	8004fec <_svfiprintf_r+0x110>
 8004fc2:	eba0 0308 	sub.w	r3, r0, r8
 8004fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	46a2      	mov	sl, r4
 8004fce:	9304      	str	r3, [sp, #16]
 8004fd0:	e7d2      	b.n	8004f78 <_svfiprintf_r+0x9c>
 8004fd2:	9b03      	ldr	r3, [sp, #12]
 8004fd4:	1d19      	adds	r1, r3, #4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	9103      	str	r1, [sp, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	bfbb      	ittet	lt
 8004fde:	425b      	neglt	r3, r3
 8004fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8004fe4:	9307      	strge	r3, [sp, #28]
 8004fe6:	9307      	strlt	r3, [sp, #28]
 8004fe8:	bfb8      	it	lt
 8004fea:	9204      	strlt	r2, [sp, #16]
 8004fec:	7823      	ldrb	r3, [r4, #0]
 8004fee:	2b2e      	cmp	r3, #46	; 0x2e
 8004ff0:	d10c      	bne.n	800500c <_svfiprintf_r+0x130>
 8004ff2:	7863      	ldrb	r3, [r4, #1]
 8004ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff6:	d135      	bne.n	8005064 <_svfiprintf_r+0x188>
 8004ff8:	9b03      	ldr	r3, [sp, #12]
 8004ffa:	3402      	adds	r4, #2
 8004ffc:	1d1a      	adds	r2, r3, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	9203      	str	r2, [sp, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfb8      	it	lt
 8005006:	f04f 33ff 	movlt.w	r3, #4294967295
 800500a:	9305      	str	r3, [sp, #20]
 800500c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80050cc <_svfiprintf_r+0x1f0>
 8005010:	2203      	movs	r2, #3
 8005012:	4650      	mov	r0, sl
 8005014:	7821      	ldrb	r1, [r4, #0]
 8005016:	f000 f9f7 	bl	8005408 <memchr>
 800501a:	b140      	cbz	r0, 800502e <_svfiprintf_r+0x152>
 800501c:	2340      	movs	r3, #64	; 0x40
 800501e:	eba0 000a 	sub.w	r0, r0, sl
 8005022:	fa03 f000 	lsl.w	r0, r3, r0
 8005026:	9b04      	ldr	r3, [sp, #16]
 8005028:	3401      	adds	r4, #1
 800502a:	4303      	orrs	r3, r0
 800502c:	9304      	str	r3, [sp, #16]
 800502e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005032:	2206      	movs	r2, #6
 8005034:	4826      	ldr	r0, [pc, #152]	; (80050d0 <_svfiprintf_r+0x1f4>)
 8005036:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800503a:	f000 f9e5 	bl	8005408 <memchr>
 800503e:	2800      	cmp	r0, #0
 8005040:	d038      	beq.n	80050b4 <_svfiprintf_r+0x1d8>
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <_svfiprintf_r+0x1f8>)
 8005044:	bb1b      	cbnz	r3, 800508e <_svfiprintf_r+0x1b2>
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	3307      	adds	r3, #7
 800504a:	f023 0307 	bic.w	r3, r3, #7
 800504e:	3308      	adds	r3, #8
 8005050:	9303      	str	r3, [sp, #12]
 8005052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005054:	4433      	add	r3, r6
 8005056:	9309      	str	r3, [sp, #36]	; 0x24
 8005058:	e767      	b.n	8004f2a <_svfiprintf_r+0x4e>
 800505a:	460c      	mov	r4, r1
 800505c:	2001      	movs	r0, #1
 800505e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005062:	e7a5      	b.n	8004fb0 <_svfiprintf_r+0xd4>
 8005064:	2300      	movs	r3, #0
 8005066:	f04f 0c0a 	mov.w	ip, #10
 800506a:	4619      	mov	r1, r3
 800506c:	3401      	adds	r4, #1
 800506e:	9305      	str	r3, [sp, #20]
 8005070:	4620      	mov	r0, r4
 8005072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005076:	3a30      	subs	r2, #48	; 0x30
 8005078:	2a09      	cmp	r2, #9
 800507a:	d903      	bls.n	8005084 <_svfiprintf_r+0x1a8>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0c5      	beq.n	800500c <_svfiprintf_r+0x130>
 8005080:	9105      	str	r1, [sp, #20]
 8005082:	e7c3      	b.n	800500c <_svfiprintf_r+0x130>
 8005084:	4604      	mov	r4, r0
 8005086:	2301      	movs	r3, #1
 8005088:	fb0c 2101 	mla	r1, ip, r1, r2
 800508c:	e7f0      	b.n	8005070 <_svfiprintf_r+0x194>
 800508e:	ab03      	add	r3, sp, #12
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	462a      	mov	r2, r5
 8005094:	4638      	mov	r0, r7
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <_svfiprintf_r+0x1fc>)
 8005098:	a904      	add	r1, sp, #16
 800509a:	f3af 8000 	nop.w
 800509e:	1c42      	adds	r2, r0, #1
 80050a0:	4606      	mov	r6, r0
 80050a2:	d1d6      	bne.n	8005052 <_svfiprintf_r+0x176>
 80050a4:	89ab      	ldrh	r3, [r5, #12]
 80050a6:	065b      	lsls	r3, r3, #25
 80050a8:	f53f af2c 	bmi.w	8004f04 <_svfiprintf_r+0x28>
 80050ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ae:	b01d      	add	sp, #116	; 0x74
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	ab03      	add	r3, sp, #12
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	462a      	mov	r2, r5
 80050ba:	4638      	mov	r0, r7
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <_svfiprintf_r+0x1fc>)
 80050be:	a904      	add	r1, sp, #16
 80050c0:	f000 f87c 	bl	80051bc <_printf_i>
 80050c4:	e7eb      	b.n	800509e <_svfiprintf_r+0x1c2>
 80050c6:	bf00      	nop
 80050c8:	08005748 	.word	0x08005748
 80050cc:	0800574e 	.word	0x0800574e
 80050d0:	08005752 	.word	0x08005752
 80050d4:	00000000 	.word	0x00000000
 80050d8:	08004e25 	.word	0x08004e25

080050dc <_printf_common>:
 80050dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e0:	4616      	mov	r6, r2
 80050e2:	4699      	mov	r9, r3
 80050e4:	688a      	ldr	r2, [r1, #8]
 80050e6:	690b      	ldr	r3, [r1, #16]
 80050e8:	4607      	mov	r7, r0
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bfb8      	it	lt
 80050ee:	4613      	movlt	r3, r2
 80050f0:	6033      	str	r3, [r6, #0]
 80050f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f6:	460c      	mov	r4, r1
 80050f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050fc:	b10a      	cbz	r2, 8005102 <_printf_common+0x26>
 80050fe:	3301      	adds	r3, #1
 8005100:	6033      	str	r3, [r6, #0]
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	0699      	lsls	r1, r3, #26
 8005106:	bf42      	ittt	mi
 8005108:	6833      	ldrmi	r3, [r6, #0]
 800510a:	3302      	addmi	r3, #2
 800510c:	6033      	strmi	r3, [r6, #0]
 800510e:	6825      	ldr	r5, [r4, #0]
 8005110:	f015 0506 	ands.w	r5, r5, #6
 8005114:	d106      	bne.n	8005124 <_printf_common+0x48>
 8005116:	f104 0a19 	add.w	sl, r4, #25
 800511a:	68e3      	ldr	r3, [r4, #12]
 800511c:	6832      	ldr	r2, [r6, #0]
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	42ab      	cmp	r3, r5
 8005122:	dc28      	bgt.n	8005176 <_printf_common+0x9a>
 8005124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005128:	1e13      	subs	r3, r2, #0
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	bf18      	it	ne
 800512e:	2301      	movne	r3, #1
 8005130:	0692      	lsls	r2, r2, #26
 8005132:	d42d      	bmi.n	8005190 <_printf_common+0xb4>
 8005134:	4649      	mov	r1, r9
 8005136:	4638      	mov	r0, r7
 8005138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800513c:	47c0      	blx	r8
 800513e:	3001      	adds	r0, #1
 8005140:	d020      	beq.n	8005184 <_printf_common+0xa8>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	68e5      	ldr	r5, [r4, #12]
 8005146:	f003 0306 	and.w	r3, r3, #6
 800514a:	2b04      	cmp	r3, #4
 800514c:	bf18      	it	ne
 800514e:	2500      	movne	r5, #0
 8005150:	6832      	ldr	r2, [r6, #0]
 8005152:	f04f 0600 	mov.w	r6, #0
 8005156:	68a3      	ldr	r3, [r4, #8]
 8005158:	bf08      	it	eq
 800515a:	1aad      	subeq	r5, r5, r2
 800515c:	6922      	ldr	r2, [r4, #16]
 800515e:	bf08      	it	eq
 8005160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005164:	4293      	cmp	r3, r2
 8005166:	bfc4      	itt	gt
 8005168:	1a9b      	subgt	r3, r3, r2
 800516a:	18ed      	addgt	r5, r5, r3
 800516c:	341a      	adds	r4, #26
 800516e:	42b5      	cmp	r5, r6
 8005170:	d11a      	bne.n	80051a8 <_printf_common+0xcc>
 8005172:	2000      	movs	r0, #0
 8005174:	e008      	b.n	8005188 <_printf_common+0xac>
 8005176:	2301      	movs	r3, #1
 8005178:	4652      	mov	r2, sl
 800517a:	4649      	mov	r1, r9
 800517c:	4638      	mov	r0, r7
 800517e:	47c0      	blx	r8
 8005180:	3001      	adds	r0, #1
 8005182:	d103      	bne.n	800518c <_printf_common+0xb0>
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518c:	3501      	adds	r5, #1
 800518e:	e7c4      	b.n	800511a <_printf_common+0x3e>
 8005190:	2030      	movs	r0, #48	; 0x30
 8005192:	18e1      	adds	r1, r4, r3
 8005194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800519e:	4422      	add	r2, r4
 80051a0:	3302      	adds	r3, #2
 80051a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051a6:	e7c5      	b.n	8005134 <_printf_common+0x58>
 80051a8:	2301      	movs	r3, #1
 80051aa:	4622      	mov	r2, r4
 80051ac:	4649      	mov	r1, r9
 80051ae:	4638      	mov	r0, r7
 80051b0:	47c0      	blx	r8
 80051b2:	3001      	adds	r0, #1
 80051b4:	d0e6      	beq.n	8005184 <_printf_common+0xa8>
 80051b6:	3601      	adds	r6, #1
 80051b8:	e7d9      	b.n	800516e <_printf_common+0x92>
	...

080051bc <_printf_i>:
 80051bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	7e0f      	ldrb	r7, [r1, #24]
 80051c2:	4691      	mov	r9, r2
 80051c4:	2f78      	cmp	r7, #120	; 0x78
 80051c6:	4680      	mov	r8, r0
 80051c8:	460c      	mov	r4, r1
 80051ca:	469a      	mov	sl, r3
 80051cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051d2:	d807      	bhi.n	80051e4 <_printf_i+0x28>
 80051d4:	2f62      	cmp	r7, #98	; 0x62
 80051d6:	d80a      	bhi.n	80051ee <_printf_i+0x32>
 80051d8:	2f00      	cmp	r7, #0
 80051da:	f000 80d9 	beq.w	8005390 <_printf_i+0x1d4>
 80051de:	2f58      	cmp	r7, #88	; 0x58
 80051e0:	f000 80a4 	beq.w	800532c <_printf_i+0x170>
 80051e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051ec:	e03a      	b.n	8005264 <_printf_i+0xa8>
 80051ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051f2:	2b15      	cmp	r3, #21
 80051f4:	d8f6      	bhi.n	80051e4 <_printf_i+0x28>
 80051f6:	a101      	add	r1, pc, #4	; (adr r1, 80051fc <_printf_i+0x40>)
 80051f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051fc:	08005255 	.word	0x08005255
 8005200:	08005269 	.word	0x08005269
 8005204:	080051e5 	.word	0x080051e5
 8005208:	080051e5 	.word	0x080051e5
 800520c:	080051e5 	.word	0x080051e5
 8005210:	080051e5 	.word	0x080051e5
 8005214:	08005269 	.word	0x08005269
 8005218:	080051e5 	.word	0x080051e5
 800521c:	080051e5 	.word	0x080051e5
 8005220:	080051e5 	.word	0x080051e5
 8005224:	080051e5 	.word	0x080051e5
 8005228:	08005377 	.word	0x08005377
 800522c:	08005299 	.word	0x08005299
 8005230:	08005359 	.word	0x08005359
 8005234:	080051e5 	.word	0x080051e5
 8005238:	080051e5 	.word	0x080051e5
 800523c:	08005399 	.word	0x08005399
 8005240:	080051e5 	.word	0x080051e5
 8005244:	08005299 	.word	0x08005299
 8005248:	080051e5 	.word	0x080051e5
 800524c:	080051e5 	.word	0x080051e5
 8005250:	08005361 	.word	0x08005361
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	1d1a      	adds	r2, r3, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	602a      	str	r2, [r5, #0]
 800525c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005264:	2301      	movs	r3, #1
 8005266:	e0a4      	b.n	80053b2 <_printf_i+0x1f6>
 8005268:	6820      	ldr	r0, [r4, #0]
 800526a:	6829      	ldr	r1, [r5, #0]
 800526c:	0606      	lsls	r6, r0, #24
 800526e:	f101 0304 	add.w	r3, r1, #4
 8005272:	d50a      	bpl.n	800528a <_printf_i+0xce>
 8005274:	680e      	ldr	r6, [r1, #0]
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	2e00      	cmp	r6, #0
 800527a:	da03      	bge.n	8005284 <_printf_i+0xc8>
 800527c:	232d      	movs	r3, #45	; 0x2d
 800527e:	4276      	negs	r6, r6
 8005280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005284:	230a      	movs	r3, #10
 8005286:	485e      	ldr	r0, [pc, #376]	; (8005400 <_printf_i+0x244>)
 8005288:	e019      	b.n	80052be <_printf_i+0x102>
 800528a:	680e      	ldr	r6, [r1, #0]
 800528c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	bf18      	it	ne
 8005294:	b236      	sxthne	r6, r6
 8005296:	e7ef      	b.n	8005278 <_printf_i+0xbc>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	6820      	ldr	r0, [r4, #0]
 800529c:	1d19      	adds	r1, r3, #4
 800529e:	6029      	str	r1, [r5, #0]
 80052a0:	0601      	lsls	r1, r0, #24
 80052a2:	d501      	bpl.n	80052a8 <_printf_i+0xec>
 80052a4:	681e      	ldr	r6, [r3, #0]
 80052a6:	e002      	b.n	80052ae <_printf_i+0xf2>
 80052a8:	0646      	lsls	r6, r0, #25
 80052aa:	d5fb      	bpl.n	80052a4 <_printf_i+0xe8>
 80052ac:	881e      	ldrh	r6, [r3, #0]
 80052ae:	2f6f      	cmp	r7, #111	; 0x6f
 80052b0:	bf0c      	ite	eq
 80052b2:	2308      	moveq	r3, #8
 80052b4:	230a      	movne	r3, #10
 80052b6:	4852      	ldr	r0, [pc, #328]	; (8005400 <_printf_i+0x244>)
 80052b8:	2100      	movs	r1, #0
 80052ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052be:	6865      	ldr	r5, [r4, #4]
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	bfa8      	it	ge
 80052c4:	6821      	ldrge	r1, [r4, #0]
 80052c6:	60a5      	str	r5, [r4, #8]
 80052c8:	bfa4      	itt	ge
 80052ca:	f021 0104 	bicge.w	r1, r1, #4
 80052ce:	6021      	strge	r1, [r4, #0]
 80052d0:	b90e      	cbnz	r6, 80052d6 <_printf_i+0x11a>
 80052d2:	2d00      	cmp	r5, #0
 80052d4:	d04d      	beq.n	8005372 <_printf_i+0x1b6>
 80052d6:	4615      	mov	r5, r2
 80052d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80052dc:	fb03 6711 	mls	r7, r3, r1, r6
 80052e0:	5dc7      	ldrb	r7, [r0, r7]
 80052e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052e6:	4637      	mov	r7, r6
 80052e8:	42bb      	cmp	r3, r7
 80052ea:	460e      	mov	r6, r1
 80052ec:	d9f4      	bls.n	80052d8 <_printf_i+0x11c>
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d10b      	bne.n	800530a <_printf_i+0x14e>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	07de      	lsls	r6, r3, #31
 80052f6:	d508      	bpl.n	800530a <_printf_i+0x14e>
 80052f8:	6923      	ldr	r3, [r4, #16]
 80052fa:	6861      	ldr	r1, [r4, #4]
 80052fc:	4299      	cmp	r1, r3
 80052fe:	bfde      	ittt	le
 8005300:	2330      	movle	r3, #48	; 0x30
 8005302:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005306:	f105 35ff 	addle.w	r5, r5, #4294967295
 800530a:	1b52      	subs	r2, r2, r5
 800530c:	6122      	str	r2, [r4, #16]
 800530e:	464b      	mov	r3, r9
 8005310:	4621      	mov	r1, r4
 8005312:	4640      	mov	r0, r8
 8005314:	f8cd a000 	str.w	sl, [sp]
 8005318:	aa03      	add	r2, sp, #12
 800531a:	f7ff fedf 	bl	80050dc <_printf_common>
 800531e:	3001      	adds	r0, #1
 8005320:	d14c      	bne.n	80053bc <_printf_i+0x200>
 8005322:	f04f 30ff 	mov.w	r0, #4294967295
 8005326:	b004      	add	sp, #16
 8005328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532c:	4834      	ldr	r0, [pc, #208]	; (8005400 <_printf_i+0x244>)
 800532e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005332:	6829      	ldr	r1, [r5, #0]
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	f851 6b04 	ldr.w	r6, [r1], #4
 800533a:	6029      	str	r1, [r5, #0]
 800533c:	061d      	lsls	r5, r3, #24
 800533e:	d514      	bpl.n	800536a <_printf_i+0x1ae>
 8005340:	07df      	lsls	r7, r3, #31
 8005342:	bf44      	itt	mi
 8005344:	f043 0320 	orrmi.w	r3, r3, #32
 8005348:	6023      	strmi	r3, [r4, #0]
 800534a:	b91e      	cbnz	r6, 8005354 <_printf_i+0x198>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	f023 0320 	bic.w	r3, r3, #32
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	2310      	movs	r3, #16
 8005356:	e7af      	b.n	80052b8 <_printf_i+0xfc>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	f043 0320 	orr.w	r3, r3, #32
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	2378      	movs	r3, #120	; 0x78
 8005362:	4828      	ldr	r0, [pc, #160]	; (8005404 <_printf_i+0x248>)
 8005364:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005368:	e7e3      	b.n	8005332 <_printf_i+0x176>
 800536a:	0659      	lsls	r1, r3, #25
 800536c:	bf48      	it	mi
 800536e:	b2b6      	uxthmi	r6, r6
 8005370:	e7e6      	b.n	8005340 <_printf_i+0x184>
 8005372:	4615      	mov	r5, r2
 8005374:	e7bb      	b.n	80052ee <_printf_i+0x132>
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	6826      	ldr	r6, [r4, #0]
 800537a:	1d18      	adds	r0, r3, #4
 800537c:	6961      	ldr	r1, [r4, #20]
 800537e:	6028      	str	r0, [r5, #0]
 8005380:	0635      	lsls	r5, r6, #24
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	d501      	bpl.n	800538a <_printf_i+0x1ce>
 8005386:	6019      	str	r1, [r3, #0]
 8005388:	e002      	b.n	8005390 <_printf_i+0x1d4>
 800538a:	0670      	lsls	r0, r6, #25
 800538c:	d5fb      	bpl.n	8005386 <_printf_i+0x1ca>
 800538e:	8019      	strh	r1, [r3, #0]
 8005390:	2300      	movs	r3, #0
 8005392:	4615      	mov	r5, r2
 8005394:	6123      	str	r3, [r4, #16]
 8005396:	e7ba      	b.n	800530e <_printf_i+0x152>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	2100      	movs	r1, #0
 800539c:	1d1a      	adds	r2, r3, #4
 800539e:	602a      	str	r2, [r5, #0]
 80053a0:	681d      	ldr	r5, [r3, #0]
 80053a2:	6862      	ldr	r2, [r4, #4]
 80053a4:	4628      	mov	r0, r5
 80053a6:	f000 f82f 	bl	8005408 <memchr>
 80053aa:	b108      	cbz	r0, 80053b0 <_printf_i+0x1f4>
 80053ac:	1b40      	subs	r0, r0, r5
 80053ae:	6060      	str	r0, [r4, #4]
 80053b0:	6863      	ldr	r3, [r4, #4]
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	2300      	movs	r3, #0
 80053b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ba:	e7a8      	b.n	800530e <_printf_i+0x152>
 80053bc:	462a      	mov	r2, r5
 80053be:	4649      	mov	r1, r9
 80053c0:	4640      	mov	r0, r8
 80053c2:	6923      	ldr	r3, [r4, #16]
 80053c4:	47d0      	blx	sl
 80053c6:	3001      	adds	r0, #1
 80053c8:	d0ab      	beq.n	8005322 <_printf_i+0x166>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	079b      	lsls	r3, r3, #30
 80053ce:	d413      	bmi.n	80053f8 <_printf_i+0x23c>
 80053d0:	68e0      	ldr	r0, [r4, #12]
 80053d2:	9b03      	ldr	r3, [sp, #12]
 80053d4:	4298      	cmp	r0, r3
 80053d6:	bfb8      	it	lt
 80053d8:	4618      	movlt	r0, r3
 80053da:	e7a4      	b.n	8005326 <_printf_i+0x16a>
 80053dc:	2301      	movs	r3, #1
 80053de:	4632      	mov	r2, r6
 80053e0:	4649      	mov	r1, r9
 80053e2:	4640      	mov	r0, r8
 80053e4:	47d0      	blx	sl
 80053e6:	3001      	adds	r0, #1
 80053e8:	d09b      	beq.n	8005322 <_printf_i+0x166>
 80053ea:	3501      	adds	r5, #1
 80053ec:	68e3      	ldr	r3, [r4, #12]
 80053ee:	9903      	ldr	r1, [sp, #12]
 80053f0:	1a5b      	subs	r3, r3, r1
 80053f2:	42ab      	cmp	r3, r5
 80053f4:	dcf2      	bgt.n	80053dc <_printf_i+0x220>
 80053f6:	e7eb      	b.n	80053d0 <_printf_i+0x214>
 80053f8:	2500      	movs	r5, #0
 80053fa:	f104 0619 	add.w	r6, r4, #25
 80053fe:	e7f5      	b.n	80053ec <_printf_i+0x230>
 8005400:	08005759 	.word	0x08005759
 8005404:	0800576a 	.word	0x0800576a

08005408 <memchr>:
 8005408:	4603      	mov	r3, r0
 800540a:	b510      	push	{r4, lr}
 800540c:	b2c9      	uxtb	r1, r1
 800540e:	4402      	add	r2, r0
 8005410:	4293      	cmp	r3, r2
 8005412:	4618      	mov	r0, r3
 8005414:	d101      	bne.n	800541a <memchr+0x12>
 8005416:	2000      	movs	r0, #0
 8005418:	e003      	b.n	8005422 <memchr+0x1a>
 800541a:	7804      	ldrb	r4, [r0, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	428c      	cmp	r4, r1
 8005420:	d1f6      	bne.n	8005410 <memchr+0x8>
 8005422:	bd10      	pop	{r4, pc}

08005424 <memcpy>:
 8005424:	440a      	add	r2, r1
 8005426:	4291      	cmp	r1, r2
 8005428:	f100 33ff 	add.w	r3, r0, #4294967295
 800542c:	d100      	bne.n	8005430 <memcpy+0xc>
 800542e:	4770      	bx	lr
 8005430:	b510      	push	{r4, lr}
 8005432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005436:	4291      	cmp	r1, r2
 8005438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800543c:	d1f9      	bne.n	8005432 <memcpy+0xe>
 800543e:	bd10      	pop	{r4, pc}

08005440 <memmove>:
 8005440:	4288      	cmp	r0, r1
 8005442:	b510      	push	{r4, lr}
 8005444:	eb01 0402 	add.w	r4, r1, r2
 8005448:	d902      	bls.n	8005450 <memmove+0x10>
 800544a:	4284      	cmp	r4, r0
 800544c:	4623      	mov	r3, r4
 800544e:	d807      	bhi.n	8005460 <memmove+0x20>
 8005450:	1e43      	subs	r3, r0, #1
 8005452:	42a1      	cmp	r1, r4
 8005454:	d008      	beq.n	8005468 <memmove+0x28>
 8005456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545e:	e7f8      	b.n	8005452 <memmove+0x12>
 8005460:	4601      	mov	r1, r0
 8005462:	4402      	add	r2, r0
 8005464:	428a      	cmp	r2, r1
 8005466:	d100      	bne.n	800546a <memmove+0x2a>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005472:	e7f7      	b.n	8005464 <memmove+0x24>

08005474 <_free_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4605      	mov	r5, r0
 8005478:	2900      	cmp	r1, #0
 800547a:	d040      	beq.n	80054fe <_free_r+0x8a>
 800547c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005480:	1f0c      	subs	r4, r1, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	bfb8      	it	lt
 8005486:	18e4      	addlt	r4, r4, r3
 8005488:	f000 f910 	bl	80056ac <__malloc_lock>
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <_free_r+0x8c>)
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	b933      	cbnz	r3, 80054a0 <_free_r+0x2c>
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	6014      	str	r4, [r2, #0]
 8005496:	4628      	mov	r0, r5
 8005498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800549c:	f000 b90c 	b.w	80056b8 <__malloc_unlock>
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d908      	bls.n	80054b6 <_free_r+0x42>
 80054a4:	6820      	ldr	r0, [r4, #0]
 80054a6:	1821      	adds	r1, r4, r0
 80054a8:	428b      	cmp	r3, r1
 80054aa:	bf01      	itttt	eq
 80054ac:	6819      	ldreq	r1, [r3, #0]
 80054ae:	685b      	ldreq	r3, [r3, #4]
 80054b0:	1809      	addeq	r1, r1, r0
 80054b2:	6021      	streq	r1, [r4, #0]
 80054b4:	e7ed      	b.n	8005492 <_free_r+0x1e>
 80054b6:	461a      	mov	r2, r3
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b10b      	cbz	r3, 80054c0 <_free_r+0x4c>
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d9fa      	bls.n	80054b6 <_free_r+0x42>
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	1850      	adds	r0, r2, r1
 80054c4:	42a0      	cmp	r0, r4
 80054c6:	d10b      	bne.n	80054e0 <_free_r+0x6c>
 80054c8:	6820      	ldr	r0, [r4, #0]
 80054ca:	4401      	add	r1, r0
 80054cc:	1850      	adds	r0, r2, r1
 80054ce:	4283      	cmp	r3, r0
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	d1e0      	bne.n	8005496 <_free_r+0x22>
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4401      	add	r1, r0
 80054da:	6011      	str	r1, [r2, #0]
 80054dc:	6053      	str	r3, [r2, #4]
 80054de:	e7da      	b.n	8005496 <_free_r+0x22>
 80054e0:	d902      	bls.n	80054e8 <_free_r+0x74>
 80054e2:	230c      	movs	r3, #12
 80054e4:	602b      	str	r3, [r5, #0]
 80054e6:	e7d6      	b.n	8005496 <_free_r+0x22>
 80054e8:	6820      	ldr	r0, [r4, #0]
 80054ea:	1821      	adds	r1, r4, r0
 80054ec:	428b      	cmp	r3, r1
 80054ee:	bf01      	itttt	eq
 80054f0:	6819      	ldreq	r1, [r3, #0]
 80054f2:	685b      	ldreq	r3, [r3, #4]
 80054f4:	1809      	addeq	r1, r1, r0
 80054f6:	6021      	streq	r1, [r4, #0]
 80054f8:	6063      	str	r3, [r4, #4]
 80054fa:	6054      	str	r4, [r2, #4]
 80054fc:	e7cb      	b.n	8005496 <_free_r+0x22>
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	200004b0 	.word	0x200004b0

08005504 <sbrk_aligned>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4e0e      	ldr	r6, [pc, #56]	; (8005540 <sbrk_aligned+0x3c>)
 8005508:	460c      	mov	r4, r1
 800550a:	6831      	ldr	r1, [r6, #0]
 800550c:	4605      	mov	r5, r0
 800550e:	b911      	cbnz	r1, 8005516 <sbrk_aligned+0x12>
 8005510:	f000 f8bc 	bl	800568c <_sbrk_r>
 8005514:	6030      	str	r0, [r6, #0]
 8005516:	4621      	mov	r1, r4
 8005518:	4628      	mov	r0, r5
 800551a:	f000 f8b7 	bl	800568c <_sbrk_r>
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	d00a      	beq.n	8005538 <sbrk_aligned+0x34>
 8005522:	1cc4      	adds	r4, r0, #3
 8005524:	f024 0403 	bic.w	r4, r4, #3
 8005528:	42a0      	cmp	r0, r4
 800552a:	d007      	beq.n	800553c <sbrk_aligned+0x38>
 800552c:	1a21      	subs	r1, r4, r0
 800552e:	4628      	mov	r0, r5
 8005530:	f000 f8ac 	bl	800568c <_sbrk_r>
 8005534:	3001      	adds	r0, #1
 8005536:	d101      	bne.n	800553c <sbrk_aligned+0x38>
 8005538:	f04f 34ff 	mov.w	r4, #4294967295
 800553c:	4620      	mov	r0, r4
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	200004b4 	.word	0x200004b4

08005544 <_malloc_r>:
 8005544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005548:	1ccd      	adds	r5, r1, #3
 800554a:	f025 0503 	bic.w	r5, r5, #3
 800554e:	3508      	adds	r5, #8
 8005550:	2d0c      	cmp	r5, #12
 8005552:	bf38      	it	cc
 8005554:	250c      	movcc	r5, #12
 8005556:	2d00      	cmp	r5, #0
 8005558:	4607      	mov	r7, r0
 800555a:	db01      	blt.n	8005560 <_malloc_r+0x1c>
 800555c:	42a9      	cmp	r1, r5
 800555e:	d905      	bls.n	800556c <_malloc_r+0x28>
 8005560:	230c      	movs	r3, #12
 8005562:	2600      	movs	r6, #0
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	4630      	mov	r0, r6
 8005568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800556c:	4e2e      	ldr	r6, [pc, #184]	; (8005628 <_malloc_r+0xe4>)
 800556e:	f000 f89d 	bl	80056ac <__malloc_lock>
 8005572:	6833      	ldr	r3, [r6, #0]
 8005574:	461c      	mov	r4, r3
 8005576:	bb34      	cbnz	r4, 80055c6 <_malloc_r+0x82>
 8005578:	4629      	mov	r1, r5
 800557a:	4638      	mov	r0, r7
 800557c:	f7ff ffc2 	bl	8005504 <sbrk_aligned>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	4604      	mov	r4, r0
 8005584:	d14d      	bne.n	8005622 <_malloc_r+0xde>
 8005586:	6834      	ldr	r4, [r6, #0]
 8005588:	4626      	mov	r6, r4
 800558a:	2e00      	cmp	r6, #0
 800558c:	d140      	bne.n	8005610 <_malloc_r+0xcc>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	4631      	mov	r1, r6
 8005592:	4638      	mov	r0, r7
 8005594:	eb04 0803 	add.w	r8, r4, r3
 8005598:	f000 f878 	bl	800568c <_sbrk_r>
 800559c:	4580      	cmp	r8, r0
 800559e:	d13a      	bne.n	8005616 <_malloc_r+0xd2>
 80055a0:	6821      	ldr	r1, [r4, #0]
 80055a2:	3503      	adds	r5, #3
 80055a4:	1a6d      	subs	r5, r5, r1
 80055a6:	f025 0503 	bic.w	r5, r5, #3
 80055aa:	3508      	adds	r5, #8
 80055ac:	2d0c      	cmp	r5, #12
 80055ae:	bf38      	it	cc
 80055b0:	250c      	movcc	r5, #12
 80055b2:	4638      	mov	r0, r7
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7ff ffa5 	bl	8005504 <sbrk_aligned>
 80055ba:	3001      	adds	r0, #1
 80055bc:	d02b      	beq.n	8005616 <_malloc_r+0xd2>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	442b      	add	r3, r5
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	e00e      	b.n	80055e4 <_malloc_r+0xa0>
 80055c6:	6822      	ldr	r2, [r4, #0]
 80055c8:	1b52      	subs	r2, r2, r5
 80055ca:	d41e      	bmi.n	800560a <_malloc_r+0xc6>
 80055cc:	2a0b      	cmp	r2, #11
 80055ce:	d916      	bls.n	80055fe <_malloc_r+0xba>
 80055d0:	1961      	adds	r1, r4, r5
 80055d2:	42a3      	cmp	r3, r4
 80055d4:	6025      	str	r5, [r4, #0]
 80055d6:	bf18      	it	ne
 80055d8:	6059      	strne	r1, [r3, #4]
 80055da:	6863      	ldr	r3, [r4, #4]
 80055dc:	bf08      	it	eq
 80055de:	6031      	streq	r1, [r6, #0]
 80055e0:	5162      	str	r2, [r4, r5]
 80055e2:	604b      	str	r3, [r1, #4]
 80055e4:	4638      	mov	r0, r7
 80055e6:	f104 060b 	add.w	r6, r4, #11
 80055ea:	f000 f865 	bl	80056b8 <__malloc_unlock>
 80055ee:	f026 0607 	bic.w	r6, r6, #7
 80055f2:	1d23      	adds	r3, r4, #4
 80055f4:	1af2      	subs	r2, r6, r3
 80055f6:	d0b6      	beq.n	8005566 <_malloc_r+0x22>
 80055f8:	1b9b      	subs	r3, r3, r6
 80055fa:	50a3      	str	r3, [r4, r2]
 80055fc:	e7b3      	b.n	8005566 <_malloc_r+0x22>
 80055fe:	6862      	ldr	r2, [r4, #4]
 8005600:	42a3      	cmp	r3, r4
 8005602:	bf0c      	ite	eq
 8005604:	6032      	streq	r2, [r6, #0]
 8005606:	605a      	strne	r2, [r3, #4]
 8005608:	e7ec      	b.n	80055e4 <_malloc_r+0xa0>
 800560a:	4623      	mov	r3, r4
 800560c:	6864      	ldr	r4, [r4, #4]
 800560e:	e7b2      	b.n	8005576 <_malloc_r+0x32>
 8005610:	4634      	mov	r4, r6
 8005612:	6876      	ldr	r6, [r6, #4]
 8005614:	e7b9      	b.n	800558a <_malloc_r+0x46>
 8005616:	230c      	movs	r3, #12
 8005618:	4638      	mov	r0, r7
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	f000 f84c 	bl	80056b8 <__malloc_unlock>
 8005620:	e7a1      	b.n	8005566 <_malloc_r+0x22>
 8005622:	6025      	str	r5, [r4, #0]
 8005624:	e7de      	b.n	80055e4 <_malloc_r+0xa0>
 8005626:	bf00      	nop
 8005628:	200004b0 	.word	0x200004b0

0800562c <_realloc_r>:
 800562c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005630:	4680      	mov	r8, r0
 8005632:	4614      	mov	r4, r2
 8005634:	460e      	mov	r6, r1
 8005636:	b921      	cbnz	r1, 8005642 <_realloc_r+0x16>
 8005638:	4611      	mov	r1, r2
 800563a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800563e:	f7ff bf81 	b.w	8005544 <_malloc_r>
 8005642:	b92a      	cbnz	r2, 8005650 <_realloc_r+0x24>
 8005644:	f7ff ff16 	bl	8005474 <_free_r>
 8005648:	4625      	mov	r5, r4
 800564a:	4628      	mov	r0, r5
 800564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005650:	f000 f838 	bl	80056c4 <_malloc_usable_size_r>
 8005654:	4284      	cmp	r4, r0
 8005656:	4607      	mov	r7, r0
 8005658:	d802      	bhi.n	8005660 <_realloc_r+0x34>
 800565a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800565e:	d812      	bhi.n	8005686 <_realloc_r+0x5a>
 8005660:	4621      	mov	r1, r4
 8005662:	4640      	mov	r0, r8
 8005664:	f7ff ff6e 	bl	8005544 <_malloc_r>
 8005668:	4605      	mov	r5, r0
 800566a:	2800      	cmp	r0, #0
 800566c:	d0ed      	beq.n	800564a <_realloc_r+0x1e>
 800566e:	42bc      	cmp	r4, r7
 8005670:	4622      	mov	r2, r4
 8005672:	4631      	mov	r1, r6
 8005674:	bf28      	it	cs
 8005676:	463a      	movcs	r2, r7
 8005678:	f7ff fed4 	bl	8005424 <memcpy>
 800567c:	4631      	mov	r1, r6
 800567e:	4640      	mov	r0, r8
 8005680:	f7ff fef8 	bl	8005474 <_free_r>
 8005684:	e7e1      	b.n	800564a <_realloc_r+0x1e>
 8005686:	4635      	mov	r5, r6
 8005688:	e7df      	b.n	800564a <_realloc_r+0x1e>
	...

0800568c <_sbrk_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	2300      	movs	r3, #0
 8005690:	4d05      	ldr	r5, [pc, #20]	; (80056a8 <_sbrk_r+0x1c>)
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f7fb f84c 	bl	8000734 <_sbrk>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_sbrk_r+0x1a>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_sbrk_r+0x1a>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	200004b8 	.word	0x200004b8

080056ac <__malloc_lock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__malloc_lock+0x8>)
 80056ae:	f000 b811 	b.w	80056d4 <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	200004bc 	.word	0x200004bc

080056b8 <__malloc_unlock>:
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <__malloc_unlock+0x8>)
 80056ba:	f000 b80c 	b.w	80056d6 <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	200004bc 	.word	0x200004bc

080056c4 <_malloc_usable_size_r>:
 80056c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056c8:	1f18      	subs	r0, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bfbc      	itt	lt
 80056ce:	580b      	ldrlt	r3, [r1, r0]
 80056d0:	18c0      	addlt	r0, r0, r3
 80056d2:	4770      	bx	lr

080056d4 <__retarget_lock_acquire_recursive>:
 80056d4:	4770      	bx	lr

080056d6 <__retarget_lock_release_recursive>:
 80056d6:	4770      	bx	lr

080056d8 <_init>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr

080056e4 <_fini>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr

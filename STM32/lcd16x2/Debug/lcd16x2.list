
lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003790  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003940  08003940  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003940  08003940  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003940  08003940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  080039b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080039b8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cb8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188a  00000000  00000000  00028d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174e5  00000000  00000000  0002b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b04c  00000000  00000000  00042cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084973  00000000  00000000  0004dd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029fc  00000000  00000000  000d26e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003884 	.word	0x08003884

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003884 	.word	0x08003884

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dht20_init>:
extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart2;

#define SLAVE_ADDRESS_DHT20 (0x38 << 1)

void dht20_init(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
	uint8_t init[3];

	init[0] = 0xA8;
 8000162:	23a8      	movs	r3, #168	; 0xa8
 8000164:	713b      	strb	r3, [r7, #4]
	init[1] = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800016a:	2300      	movs	r3, #0
 800016c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 800016e:	1d3a      	adds	r2, r7, #4
 8000170:	23ff      	movs	r3, #255	; 0xff
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	2303      	movs	r3, #3
 8000176:	2170      	movs	r1, #112	; 0x70
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <dht20_init+0x54>)
 800017a:	f001 f919 	bl	80013b0 <HAL_I2C_Master_Transmit>

	HAL_Delay(10);
 800017e:	200a      	movs	r0, #10
 8000180:	f000 fd14 	bl	8000bac <HAL_Delay>

	init[0] = 0xBE;
 8000184:	23be      	movs	r3, #190	; 0xbe
 8000186:	713b      	strb	r3, [r7, #4]
	init[1] = 0x08;
 8000188:	2308      	movs	r3, #8
 800018a:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800018c:	2300      	movs	r3, #0
 800018e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 8000190:	1d3a      	adds	r2, r7, #4
 8000192:	23ff      	movs	r3, #255	; 0xff
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2303      	movs	r3, #3
 8000198:	2170      	movs	r1, #112	; 0x70
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <dht20_init+0x54>)
 800019c:	f001 f908 	bl	80013b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80001a0:	200a      	movs	r0, #10
 80001a2:	f000 fd03 	bl	8000bac <HAL_Delay>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	2000008c 	.word	0x2000008c

080001b4 <dht20_reset>:

void dht20_reset(uint8_t regis){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	//reset register

	uint8_t reset[3], reply[3];
	reset[0] = regis;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	733b      	strb	r3, [r7, #12]
	reset[1] = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	737b      	strb	r3, [r7, #13]
	reset[2] = 0x00;
 80001c6:	2300      	movs	r3, #0
 80001c8:	73bb      	strb	r3, [r7, #14]
 	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 80001ca:	f107 020c 	add.w	r2, r7, #12
 80001ce:	23ff      	movs	r3, #255	; 0xff
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2303      	movs	r3, #3
 80001d4:	2170      	movs	r1, #112	; 0x70
 80001d6:	4814      	ldr	r0, [pc, #80]	; (8000228 <dht20_reset+0x74>)
 80001d8:	f001 f8ea 	bl	80013b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80001dc:	200a      	movs	r0, #10
 80001de:	f000 fce5 	bl	8000bac <HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) reply, 3, 0xFF);
 80001e2:	f107 0208 	add.w	r2, r7, #8
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2303      	movs	r3, #3
 80001ec:	2171      	movs	r1, #113	; 0x71
 80001ee:	480e      	ldr	r0, [pc, #56]	; (8000228 <dht20_reset+0x74>)
 80001f0:	f001 f9dc 	bl	80015ac <HAL_I2C_Master_Receive>
	reset[0] = 0xB0 | regis;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	733b      	strb	r3, [r7, #12]
	reset[1] = reply[1];
 80001fe:	7a7b      	ldrb	r3, [r7, #9]
 8000200:	737b      	strb	r3, [r7, #13]
	reset[2] = reply[2];
 8000202:	7abb      	ldrb	r3, [r7, #10]
 8000204:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8000206:	200a      	movs	r0, #10
 8000208:	f000 fcd0 	bl	8000bac <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 800020c:	f107 020c 	add.w	r2, r7, #12
 8000210:	23ff      	movs	r3, #255	; 0xff
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2303      	movs	r3, #3
 8000216:	2170      	movs	r1, #112	; 0x70
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <dht20_reset+0x74>)
 800021a:	f001 f8c9 	bl	80013b0 <HAL_I2C_Master_Transmit>
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	2000008c 	.word	0x2000008c

0800022c <dht20_start>:
void dht20_start(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af02      	add	r7, sp, #8
	uint8_t status[1];
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) status, 1, 0xFF);
 8000232:	f107 020c 	add.w	r2, r7, #12
 8000236:	23ff      	movs	r3, #255	; 0xff
 8000238:	9300      	str	r3, [sp, #0]
 800023a:	2301      	movs	r3, #1
 800023c:	2171      	movs	r1, #113	; 0x71
 800023e:	481c      	ldr	r0, [pc, #112]	; (80002b0 <dht20_start+0x84>)
 8000240:	f001 f9b4 	bl	80015ac <HAL_I2C_Master_Receive>
	if((status[0] & 0x18) != 0x18){
 8000244:	7b3b      	ldrb	r3, [r7, #12]
 8000246:	f003 0318 	and.w	r3, r3, #24
 800024a:	2b18      	cmp	r3, #24
 800024c:	d008      	beq.n	8000260 <dht20_start+0x34>
		dht20_reset(0x1B);
 800024e:	201b      	movs	r0, #27
 8000250:	f7ff ffb0 	bl	80001b4 <dht20_reset>
		dht20_reset(0x1C);
 8000254:	201c      	movs	r0, #28
 8000256:	f7ff ffad 	bl	80001b4 <dht20_reset>
		dht20_reset(0x1E);
 800025a:	201e      	movs	r0, #30
 800025c:	f7ff ffaa 	bl	80001b4 <dht20_reset>
	}

	if ((status[0] & 0x18) == 0x18){
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	f003 0318 	and.w	r3, r3, #24
 8000266:	2b18      	cmp	r3, #24
 8000268:	d103      	bne.n	8000272 <dht20_start+0x46>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800026a:	2102      	movs	r1, #2
 800026c:	4811      	ldr	r0, [pc, #68]	; (80002b4 <dht20_start+0x88>)
 800026e:	f000 ff41 	bl	80010f4 <HAL_GPIO_TogglePin>
	}


	uint8_t trigger[1] = {0xAC};
 8000272:	23ac      	movs	r3, #172	; 0xac
 8000274:	723b      	strb	r3, [r7, #8]
	uint8_t data[2];
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) trigger, 1, 0xFF);
 8000276:	f107 0208 	add.w	r2, r7, #8
 800027a:	23ff      	movs	r3, #255	; 0xff
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2301      	movs	r3, #1
 8000280:	2170      	movs	r1, #112	; 0x70
 8000282:	480b      	ldr	r0, [pc, #44]	; (80002b0 <dht20_start+0x84>)
 8000284:	f001 f894 	bl	80013b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8000288:	2050      	movs	r0, #80	; 0x50
 800028a:	f000 fc8f 	bl	8000bac <HAL_Delay>
	data[0] = 0x33;
 800028e:	2333      	movs	r3, #51	; 0x33
 8000290:	713b      	strb	r3, [r7, #4]
	data[1] = 0x00;
 8000292:	2300      	movs	r3, #0
 8000294:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) data, 2, 0xFF);
 8000296:	1d3a      	adds	r2, r7, #4
 8000298:	23ff      	movs	r3, #255	; 0xff
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	2302      	movs	r3, #2
 800029e:	2170      	movs	r1, #112	; 0x70
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <dht20_start+0x84>)
 80002a2:	f001 f885 	bl	80013b0 <HAL_I2C_Master_Transmit>
}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	40010800 	.word	0x40010800

080002b8 <dht20_read>:

void dht20_read(uint32_t* value){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af02      	add	r7, sp, #8
 80002be:	6078      	str	r0, [r7, #4]
	uint8_t data[7];
	uint32_t Temper = 0, Humid = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	617b      	str	r3, [r7, #20]
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) data, 7, 0xFF);
 80002c8:	f107 0208 	add.w	r2, r7, #8
 80002cc:	23ff      	movs	r3, #255	; 0xff
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2307      	movs	r3, #7
 80002d2:	2171      	movs	r1, #113	; 0x71
 80002d4:	4823      	ldr	r0, [pc, #140]	; (8000364 <dht20_read+0xac>)
 80002d6:	f001 f969 	bl	80015ac <HAL_I2C_Master_Receive>
	//Humid
	Humid = (Humid | data[1]) << 8;
 80002da:	7a7b      	ldrb	r3, [r7, #9]
 80002dc:	461a      	mov	r2, r3
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	021b      	lsls	r3, r3, #8
 80002e4:	613b      	str	r3, [r7, #16]
	Humid = (Humid | data[2]) << 8;
 80002e6:	7abb      	ldrb	r3, [r7, #10]
 80002e8:	461a      	mov	r2, r3
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	021b      	lsls	r3, r3, #8
 80002f0:	613b      	str	r3, [r7, #16]
	Humid = Humid | data[3];
 80002f2:	7afb      	ldrb	r3, [r7, #11]
 80002f4:	461a      	mov	r2, r3
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	613b      	str	r3, [r7, #16]
	Humid = Humid >> 4;
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	091b      	lsrs	r3, r3, #4
 8000300:	613b      	str	r3, [r7, #16]
	Humid = (Humid * 100 * 10 / 1024 / 1024)/10;
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000308:	fb02 f303 	mul.w	r3, r2, r3
 800030c:	4a16      	ldr	r2, [pc, #88]	; (8000368 <dht20_read+0xb0>)
 800030e:	fba2 2303 	umull	r2, r3, r2, r3
 8000312:	0ddb      	lsrs	r3, r3, #23
 8000314:	613b      	str	r3, [r7, #16]
    value[0] = Humid;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	693a      	ldr	r2, [r7, #16]
 800031a:	601a      	str	r2, [r3, #0]


	//Temperature
    Temper = (Temper | data[3]) << 8;
 800031c:	7afb      	ldrb	r3, [r7, #11]
 800031e:	461a      	mov	r2, r3
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4313      	orrs	r3, r2
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	617b      	str	r3, [r7, #20]
    Temper = (Temper | data[4]) << 8;
 8000328:	7b3b      	ldrb	r3, [r7, #12]
 800032a:	461a      	mov	r2, r3
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	4313      	orrs	r3, r2
 8000330:	021b      	lsls	r3, r3, #8
 8000332:	617b      	str	r3, [r7, #20]
    Temper = Temper | data[5];
 8000334:	7b7b      	ldrb	r3, [r7, #13]
 8000336:	461a      	mov	r2, r3
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	4313      	orrs	r3, r2
 800033c:	617b      	str	r3, [r7, #20]
    Temper = Temper & 0xfffff;
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000344:	617b      	str	r3, [r7, #20]
    Temper = Temper*200/1024/1024 - 50;
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	22c8      	movs	r2, #200	; 0xc8
 800034a:	fb02 f303 	mul.w	r3, r2, r3
 800034e:	0d1b      	lsrs	r3, r3, #20
 8000350:	3b32      	subs	r3, #50	; 0x32
 8000352:	617b      	str	r3, [r7, #20]
	value[1] = Temper;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3304      	adds	r3, #4
 8000358:	697a      	ldr	r2, [r7, #20]
 800035a:	601a      	str	r2, [r3, #0]

}
 800035c:	bf00      	nop
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	2000008c 	.word	0x2000008c
 8000368:	cccccccd 	.word	0xcccccccd

0800036c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x3F << 1)  // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af02      	add	r7, sp, #8
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f023 030f 	bic.w	r3, r3, #15
 800037c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	011b      	lsls	r3, r3, #4
 8000382:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	f043 030c 	orr.w	r3, r3, #12
 800038a:	b2db      	uxtb	r3, r3
 800038c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	f043 0308 	orr.w	r3, r3, #8
 8000394:	b2db      	uxtb	r3, r3
 8000396:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000398:	7bbb      	ldrb	r3, [r7, #14]
 800039a:	f043 030c 	orr.w	r3, r3, #12
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80003a2:	7bbb      	ldrb	r3, [r7, #14]
 80003a4:	f043 0308 	orr.w	r3, r3, #8
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003ac:	f107 0208 	add.w	r2, r7, #8
 80003b0:	2364      	movs	r3, #100	; 0x64
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2304      	movs	r3, #4
 80003b6:	217e      	movs	r1, #126	; 0x7e
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <lcd_send_cmd+0x5c>)
 80003ba:	f000 fff9 	bl	80013b0 <HAL_I2C_Master_Transmit>
}
 80003be:	bf00      	nop
 80003c0:	3710      	adds	r7, #16
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	2000008c 	.word	0x2000008c

080003cc <lcd_send_data>:

void lcd_send_data (char data)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af02      	add	r7, sp, #8
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	f023 030f 	bic.w	r3, r3, #15
 80003dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	011b      	lsls	r3, r3, #4
 80003e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
 80003e6:	f043 030d 	orr.w	r3, r3, #13
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	f043 0309 	orr.w	r3, r3, #9
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80003f8:	7bbb      	ldrb	r3, [r7, #14]
 80003fa:	f043 030d 	orr.w	r3, r3, #13
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000402:	7bbb      	ldrb	r3, [r7, #14]
 8000404:	f043 0309 	orr.w	r3, r3, #9
 8000408:	b2db      	uxtb	r3, r3
 800040a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800040c:	f107 0208 	add.w	r2, r7, #8
 8000410:	2364      	movs	r3, #100	; 0x64
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2304      	movs	r3, #4
 8000416:	217e      	movs	r1, #126	; 0x7e
 8000418:	4803      	ldr	r0, [pc, #12]	; (8000428 <lcd_send_data+0x5c>)
 800041a:	f000 ffc9 	bl	80013b0 <HAL_I2C_Master_Transmit>
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	2000008c 	.word	0x2000008c

0800042c <lcd_init>:

void lcd_init (void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000430:	2033      	movs	r0, #51	; 0x33
 8000432:	f7ff ff9b 	bl	800036c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000436:	2032      	movs	r0, #50	; 0x32
 8000438:	f7ff ff98 	bl	800036c <lcd_send_cmd>
	HAL_Delay(50);
 800043c:	2032      	movs	r0, #50	; 0x32
 800043e:	f000 fbb5 	bl	8000bac <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000442:	2028      	movs	r0, #40	; 0x28
 8000444:	f7ff ff92 	bl	800036c <lcd_send_cmd>
	HAL_Delay(50);
 8000448:	2032      	movs	r0, #50	; 0x32
 800044a:	f000 fbaf 	bl	8000bac <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800044e:	2001      	movs	r0, #1
 8000450:	f7ff ff8c 	bl	800036c <lcd_send_cmd>
	HAL_Delay(50);
 8000454:	2032      	movs	r0, #50	; 0x32
 8000456:	f000 fba9 	bl	8000bac <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800045a:	2006      	movs	r0, #6
 800045c:	f7ff ff86 	bl	800036c <lcd_send_cmd>
	HAL_Delay(50);
 8000460:	2032      	movs	r0, #50	; 0x32
 8000462:	f000 fba3 	bl	8000bac <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000466:	200c      	movs	r0, #12
 8000468:	f7ff ff80 	bl	800036c <lcd_send_cmd>
	HAL_Delay(50);
 800046c:	2032      	movs	r0, #50	; 0x32
 800046e:	f000 fb9d 	bl	8000bac <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000472:	2002      	movs	r0, #2
 8000474:	f7ff ff7a 	bl	800036c <lcd_send_cmd>
	HAL_Delay(50);
 8000478:	2032      	movs	r0, #50	; 0x32
 800047a:	f000 fb97 	bl	8000bac <HAL_Delay>
	lcd_send_cmd (0x80);
 800047e:	2080      	movs	r0, #128	; 0x80
 8000480:	f7ff ff74 	bl	800036c <lcd_send_cmd>
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000490:	e006      	b.n	80004a0 <lcd_send_string+0x18>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	1c5a      	adds	r2, r3, #1
 8000496:	607a      	str	r2, [r7, #4]
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff96 	bl	80003cc <lcd_send_data>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1f4      	bne.n	8000492 <lcd_send_string+0xa>
}
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b084      	sub	sp, #16
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d108      	bne.n	80004d4 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4413      	add	r3, r2
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	337f      	adds	r3, #127	; 0x7f
 80004d0:	73fb      	strb	r3, [r7, #15]
 80004d2:	e008      	b.n	80004e6 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	3340      	adds	r3, #64	; 0x40
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	b25b      	sxtb	r3, r3
 80004de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ff3f 	bl	800036c <lcd_send_cmd>
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <I2C_Scan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void I2C_Scan() {
 80004f8:	b5b0      	push	{r4, r5, r7, lr}
 80004fa:	b098      	sub	sp, #96	; 0x60
 80004fc:	af00      	add	r7, sp, #0
    char info[] = "\r\n\r\nScanning I2C bus...\r\n";
 80004fe:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <I2C_Scan+0xb0>)
 8000500:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000504:	461d      	mov	r5, r3
 8000506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800050e:	c403      	stmia	r4!, {r0, r1}
 8000510:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8000512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe18 	bl	800014c <strlen>
 800051c:	4603      	mov	r3, r0
 800051e:	b29a      	uxth	r2, r3
 8000520:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000524:	f04f 33ff 	mov.w	r3, #4294967295
 8000528:	4820      	ldr	r0, [pc, #128]	; (80005ac <I2C_Scan+0xb4>)
 800052a:	f002 fb60 	bl	8002bee <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 800052e:	2300      	movs	r3, #0
 8000530:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000534:	e02f      	b.n	8000596 <I2C_Scan+0x9e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8000536:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	b299      	uxth	r1, r3
 800053e:	230a      	movs	r3, #10
 8000540:	2201      	movs	r2, #1
 8000542:	481b      	ldr	r0, [pc, #108]	; (80005b0 <I2C_Scan+0xb8>)
 8000544:	f001 fa92 	bl	8001a6c <HAL_I2C_IsDeviceReady>
 8000548:	4603      	mov	r3, r0
 800054a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 800054e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000552:	2b00      	cmp	r3, #0
 8000554:	d113      	bne.n	800057e <I2C_Scan+0x86>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8000556:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800055a:	4638      	mov	r0, r7
 800055c:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <I2C_Scan+0xbc>)
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	f002 fce2 	bl	8002f28 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000564:	463b      	mov	r3, r7
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fdf0 	bl	800014c <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	4639      	mov	r1, r7
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	480d      	ldr	r0, [pc, #52]	; (80005ac <I2C_Scan+0xb4>)
 8000578:	f002 fb39 	bl	8002bee <HAL_UART_Transmit>
 800057c:	e006      	b.n	800058c <I2C_Scan+0x94>
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, HAL_MAX_DELAY);
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	2201      	movs	r2, #1
 8000584:	490c      	ldr	r1, [pc, #48]	; (80005b8 <I2C_Scan+0xc0>)
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <I2C_Scan+0xb4>)
 8000588:	f002 fb31 	bl	8002bee <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 800058c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000590:	3301      	adds	r3, #1
 8000592:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000596:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800059a:	2b7f      	cmp	r3, #127	; 0x7f
 800059c:	d9cb      	bls.n	8000536 <I2C_Scan+0x3e>
        }
    }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3760      	adds	r7, #96	; 0x60
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bdb0      	pop	{r4, r5, r7, pc}
 80005a8:	080038a8 	.word	0x080038a8
 80005ac:	200000e0 	.word	0x200000e0
 80005b0:	2000008c 	.word	0x2000008c
 80005b4:	0800389c 	.word	0x0800389c
 80005b8:	080038a4 	.word	0x080038a4

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fa91 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f84b 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8e7 	bl	800079c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ce:	f000 f88d 	bl	80006ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f8b9 	bl	8000748 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  I2C_Scan();
 80005d6:	f7ff ff8f 	bl	80004f8 <I2C_Scan>
  lcd_init();
 80005da:	f7ff ff27 	bl	800042c <lcd_init>
  lcd_send_string("Temp:");
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <main+0x94>)
 80005e0:	f7ff ff52 	bl	8000488 <lcd_send_string>
  lcd_goto_XY(2, 0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff ff63 	bl	80004b2 <lcd_goto_XY>
  lcd_send_string("Humid:");
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <main+0x98>)
 80005ee:	f7ff ff4b 	bl	8000488 <lcd_send_string>
  uint32_t value[2];
  char temp[10],humid[10];
  dht20_init();
 80005f2:	f7ff fdb3 	bl	800015c <dht20_init>

  dht20_start();
 80005f6:	f7ff fe19 	bl	800022c <dht20_start>


  while (1)
  {
	  dht20_start();
 80005fa:	f7ff fe17 	bl	800022c <dht20_start>
	  dht20_read(value);
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe58 	bl	80002b8 <dht20_read>
	  sprintf(temp," %ld*C",value[1]);
 8000608:	69fa      	ldr	r2, [r7, #28]
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4912      	ldr	r1, [pc, #72]	; (8000658 <main+0x9c>)
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fcbd 	bl	8002f90 <siprintf>
	  sprintf(humid," %ld%%",value[0]);
 8000616:	69ba      	ldr	r2, [r7, #24]
 8000618:	463b      	mov	r3, r7
 800061a:	4910      	ldr	r1, [pc, #64]	; (800065c <main+0xa0>)
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fcb7 	bl	8002f90 <siprintf>
	  lcd_goto_XY(1, 6);
 8000622:	2106      	movs	r1, #6
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ff44 	bl	80004b2 <lcd_goto_XY>
	  lcd_send_string(temp);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff2a 	bl	8000488 <lcd_send_string>
	  lcd_goto_XY(2, 6);
 8000634:	2106      	movs	r1, #6
 8000636:	2002      	movs	r0, #2
 8000638:	f7ff ff3b 	bl	80004b2 <lcd_goto_XY>
	  lcd_send_string(humid);
 800063c:	463b      	mov	r3, r7
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff22 	bl	8000488 <lcd_send_string>
//	  HAL_Delay(50);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f000 fab0 	bl	8000bac <HAL_Delay>
	  dht20_start();
 800064c:	e7d5      	b.n	80005fa <main+0x3e>
 800064e:	bf00      	nop
 8000650:	080038c4 	.word	0x080038c4
 8000654:	080038cc 	.word	0x080038cc
 8000658:	080038d4 	.word	0x080038d4
 800065c:	080038dc 	.word	0x080038dc

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b090      	sub	sp, #64	; 0x40
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	2228      	movs	r2, #40	; 0x28
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fc52 	bl	8002f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000682:	2301      	movs	r3, #1
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000694:	2302      	movs	r3, #2
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800069e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fe39 	bl	8002320 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006b4:	f000 f8bc 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 f8a6 	bl	8002824 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006de:	f000 f8a7 	bl	8000830 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3740      	adds	r7, #64	; 0x40
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f000 fcfd 	bl	8001128 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f87c 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_USART2_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000754:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART2_UART_Init+0x4c>)
 8000780:	f002 f9e8 	bl	8002b54 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f851 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000e0 	.word	0x200000e0
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0320 	and.w	r3, r3, #32
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a16      	ldr	r2, [pc, #88]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a10      	ldr	r2, [pc, #64]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_GPIO_Init+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2102      	movs	r1, #2
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <MX_GPIO_Init+0x90>)
 80007fe:	f000 fc61 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0x90>)
 800081a:	f000 facf 	bl	8000dbc <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	40010800 	.word	0x40010800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x60>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x60>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <HAL_I2C_MspInit+0x90>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d132      	bne.n	8000926 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_I2C_MspInit+0x94>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <HAL_I2C_MspInit+0x94>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_I2C_MspInit+0x94>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008de:	2312      	movs	r3, #18
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4812      	ldr	r0, [pc, #72]	; (8000938 <HAL_I2C_MspInit+0x98>)
 80008ee:	f000 fa65 	bl	8000dbc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_I2C_MspInit+0x9c>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <HAL_I2C_MspInit+0x9c>)
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_I2C_MspInit+0x94>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_I2C_MspInit+0x94>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_I2C_MspInit+0x94>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40005400 	.word	0x40005400
 8000934:	40021000 	.word	0x40021000
 8000938:	40010c00 	.word	0x40010c00
 800093c:	40010000 	.word	0x40010000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <HAL_UART_MspInit+0x88>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d12f      	bne.n	80009c0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <HAL_UART_MspInit+0x8c>)
 8000962:	69db      	ldr	r3, [r3, #28]
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HAL_UART_MspInit+0x8c>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	61d3      	str	r3, [r2, #28]
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_UART_MspInit+0x8c>)
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_UART_MspInit+0x8c>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <HAL_UART_MspInit+0x8c>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_UART_MspInit+0x8c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000990:	2304      	movs	r3, #4
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <HAL_UART_MspInit+0x90>)
 80009a4:	f000 fa0a 	bl	8000dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009a8:	2308      	movs	r3, #8
 80009aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <HAL_UART_MspInit+0x90>)
 80009bc:	f000 f9fe 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010800 	.word	0x40010800

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f8ab 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f002 fa36 	bl	8002ec4 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20005000 	.word	0x20005000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	20000124 	.word	0x20000124
 8000a8c:	20000140 	.word	0x20000140

08000a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ac2:	f7ff ffe5 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f002 fa03 	bl	8002ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff fd77 	bl	80005bc <main>
  bx lr
 8000ace:	4770      	bx	lr
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ad8:	08003948 	.word	0x08003948
  ldr r2, =_sbss
 8000adc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ae0:	2000013c 	.word	0x2000013c

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x28>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x28>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f92b 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	200f      	movs	r0, #15
 8000b00:	f000 f808 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fe9a 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_InitTick+0x54>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_InitTick+0x58>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f935 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00e      	b.n	8000b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b0f      	cmp	r3, #15
 8000b46:	d80a      	bhi.n	8000b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f000 f90b 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_InitTick+0x5c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <HAL_IncTick+0x20>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4413      	add	r3, r2
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x20>)
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000128 	.word	0x20000128

08000b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <HAL_GetTick+0x10>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000128 	.word	0x20000128

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff fff0 	bl	8000b98 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffe0 	bl	8000b98 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff49 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5e 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb0 	bl	8000d10 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b08b      	sub	sp, #44	; 0x2c
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e169      	b.n	80010a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8158 	bne.w	800109e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a9a      	ldr	r2, [pc, #616]	; (800105c <HAL_GPIO_Init+0x2a0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d05e      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000df8:	4a98      	ldr	r2, [pc, #608]	; (800105c <HAL_GPIO_Init+0x2a0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d875      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000dfe:	4a98      	ldr	r2, [pc, #608]	; (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d058      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e04:	4a96      	ldr	r2, [pc, #600]	; (8001060 <HAL_GPIO_Init+0x2a4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d86f      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e0a:	4a96      	ldr	r2, [pc, #600]	; (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d052      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e10:	4a94      	ldr	r2, [pc, #592]	; (8001064 <HAL_GPIO_Init+0x2a8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d869      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e16:	4a94      	ldr	r2, [pc, #592]	; (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d04c      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e1c:	4a92      	ldr	r2, [pc, #584]	; (8001068 <HAL_GPIO_Init+0x2ac>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d863      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e22:	4a92      	ldr	r2, [pc, #584]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d046      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
 8000e28:	4a90      	ldr	r2, [pc, #576]	; (800106c <HAL_GPIO_Init+0x2b0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d85d      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e2e:	2b12      	cmp	r3, #18
 8000e30:	d82a      	bhi.n	8000e88 <HAL_GPIO_Init+0xcc>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d859      	bhi.n	8000eea <HAL_GPIO_Init+0x12e>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <HAL_GPIO_Init+0x80>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000eb7 	.word	0x08000eb7
 8000e40:	08000e91 	.word	0x08000e91
 8000e44:	08000ea3 	.word	0x08000ea3
 8000e48:	08000ee5 	.word	0x08000ee5
 8000e4c:	08000eeb 	.word	0x08000eeb
 8000e50:	08000eeb 	.word	0x08000eeb
 8000e54:	08000eeb 	.word	0x08000eeb
 8000e58:	08000eeb 	.word	0x08000eeb
 8000e5c:	08000eeb 	.word	0x08000eeb
 8000e60:	08000eeb 	.word	0x08000eeb
 8000e64:	08000eeb 	.word	0x08000eeb
 8000e68:	08000eeb 	.word	0x08000eeb
 8000e6c:	08000eeb 	.word	0x08000eeb
 8000e70:	08000eeb 	.word	0x08000eeb
 8000e74:	08000eeb 	.word	0x08000eeb
 8000e78:	08000eeb 	.word	0x08000eeb
 8000e7c:	08000eeb 	.word	0x08000eeb
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000ead 	.word	0x08000ead
 8000e88:	4a79      	ldr	r2, [pc, #484]	; (8001070 <HAL_GPIO_Init+0x2b4>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e8e:	e02c      	b.n	8000eea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	623b      	str	r3, [r7, #32]
          break;
 8000e96:	e029      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	623b      	str	r3, [r7, #32]
          break;
 8000ea0:	e024      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	3308      	adds	r3, #8
 8000ea8:	623b      	str	r3, [r7, #32]
          break;
 8000eaa:	e01f      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	e01a      	b.n	8000eec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e013      	b.n	8000eec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d105      	bne.n	8000ed8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69fa      	ldr	r2, [r7, #28]
 8000ed4:	611a      	str	r2, [r3, #16]
          break;
 8000ed6:	e009      	b.n	8000eec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed8:	2308      	movs	r3, #8
 8000eda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69fa      	ldr	r2, [r7, #28]
 8000ee0:	615a      	str	r2, [r3, #20]
          break;
 8000ee2:	e003      	b.n	8000eec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
          break;
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_Init+0x130>
          break;
 8000eea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d801      	bhi.n	8000ef6 <HAL_GPIO_Init+0x13a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	e001      	b.n	8000efa <HAL_GPIO_Init+0x13e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	2bff      	cmp	r3, #255	; 0xff
 8000f00:	d802      	bhi.n	8000f08 <HAL_GPIO_Init+0x14c>
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	e002      	b.n	8000f0e <HAL_GPIO_Init+0x152>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	3b08      	subs	r3, #8
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	210f      	movs	r1, #15
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	6a39      	ldr	r1, [r7, #32]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80b1 	beq.w	800109e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f3c:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b4a      	ldr	r3, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f54:	4a48      	ldr	r2, [pc, #288]	; (8001078 <HAL_GPIO_Init+0x2bc>)
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a40      	ldr	r2, [pc, #256]	; (800107c <HAL_GPIO_Init+0x2c0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d013      	beq.n	8000fa8 <HAL_GPIO_Init+0x1ec>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3f      	ldr	r2, [pc, #252]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d00d      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e8>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a3e      	ldr	r2, [pc, #248]	; (8001084 <HAL_GPIO_Init+0x2c8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d007      	beq.n	8000fa0 <HAL_GPIO_Init+0x1e4>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3d      	ldr	r2, [pc, #244]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d101      	bne.n	8000f9c <HAL_GPIO_Init+0x1e0>
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	e004      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	e002      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_GPIO_Init+0x1ee>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fac:	f002 0203 	and.w	r2, r2, #3
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	4093      	lsls	r3, r2
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fba:	492f      	ldr	r1, [pc, #188]	; (8001078 <HAL_GPIO_Init+0x2bc>)
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	492c      	ldr	r1, [pc, #176]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4928      	ldr	r1, [pc, #160]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4922      	ldr	r1, [pc, #136]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	491e      	ldr	r1, [pc, #120]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001014:	4013      	ands	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	4918      	ldr	r1, [pc, #96]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	4914      	ldr	r1, [pc, #80]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_GPIO_Init+0x2d0>)
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	490e      	ldr	r1, [pc, #56]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	60cb      	str	r3, [r1, #12]
 8001058:	e021      	b.n	800109e <HAL_GPIO_Init+0x2e2>
 800105a:	bf00      	nop
 800105c:	10320000 	.word	0x10320000
 8001060:	10310000 	.word	0x10310000
 8001064:	10220000 	.word	0x10220000
 8001068:	10210000 	.word	0x10210000
 800106c:	10120000 	.word	0x10120000
 8001070:	10110000 	.word	0x10110000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40011400 	.word	0x40011400
 800108c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	43db      	mvns	r3, r3
 8001098:	4909      	ldr	r1, [pc, #36]	; (80010c0 <HAL_GPIO_Init+0x304>)
 800109a:	4013      	ands	r3, r2
 800109c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3301      	adds	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	fa22 f303 	lsr.w	r3, r2, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f47f ae8e 	bne.w	8000dd0 <HAL_GPIO_Init+0x14>
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	372c      	adds	r7, #44	; 0x2c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40010400 	.word	0x40010400

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	611a      	str	r2, [r3, #16]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4013      	ands	r3, r2
 800110c:	041a      	lsls	r2, r3, #16
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43d9      	mvns	r1, r3
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	400b      	ands	r3, r1
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	611a      	str	r2, [r3, #16]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
	...

08001128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e12b      	b.n	8001392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fba6 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2224      	movs	r2, #36	; 0x24
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800117a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800118a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800118c:	f001 fc9c 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8001190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a81      	ldr	r2, [pc, #516]	; (800139c <HAL_I2C_Init+0x274>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d807      	bhi.n	80011ac <HAL_I2C_Init+0x84>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a80      	ldr	r2, [pc, #512]	; (80013a0 <HAL_I2C_Init+0x278>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	bf94      	ite	ls
 80011a4:	2301      	movls	r3, #1
 80011a6:	2300      	movhi	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	e006      	b.n	80011ba <HAL_I2C_Init+0x92>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4a7d      	ldr	r2, [pc, #500]	; (80013a4 <HAL_I2C_Init+0x27c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	bf94      	ite	ls
 80011b4:	2301      	movls	r3, #1
 80011b6:	2300      	movhi	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0e7      	b.n	8001392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4a78      	ldr	r2, [pc, #480]	; (80013a8 <HAL_I2C_Init+0x280>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	430a      	orrs	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a6a      	ldr	r2, [pc, #424]	; (800139c <HAL_I2C_Init+0x274>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d802      	bhi.n	80011fc <HAL_I2C_Init+0xd4>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3301      	adds	r3, #1
 80011fa:	e009      	b.n	8001210 <HAL_I2C_Init+0xe8>
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	4a69      	ldr	r2, [pc, #420]	; (80013ac <HAL_I2C_Init+0x284>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	099b      	lsrs	r3, r3, #6
 800120e:	3301      	adds	r3, #1
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	430b      	orrs	r3, r1
 8001216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001222:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	495c      	ldr	r1, [pc, #368]	; (800139c <HAL_I2C_Init+0x274>)
 800122c:	428b      	cmp	r3, r1
 800122e:	d819      	bhi.n	8001264 <HAL_I2C_Init+0x13c>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e59      	subs	r1, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fbb1 f3f3 	udiv	r3, r1, r3
 800123e:	1c59      	adds	r1, r3, #1
 8001240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001244:	400b      	ands	r3, r1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00a      	beq.n	8001260 <HAL_I2C_Init+0x138>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1e59      	subs	r1, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fbb1 f3f3 	udiv	r3, r1, r3
 8001258:	3301      	adds	r3, #1
 800125a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125e:	e051      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 8001260:	2304      	movs	r3, #4
 8001262:	e04f      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d111      	bne.n	8001290 <HAL_I2C_Init+0x168>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	440b      	add	r3, r1
 800127a:	fbb0 f3f3 	udiv	r3, r0, r3
 800127e:	3301      	adds	r3, #1
 8001280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	e012      	b.n	80012b6 <HAL_I2C_Init+0x18e>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	0099      	lsls	r1, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a6:	3301      	adds	r3, #1
 80012a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf0c      	ite	eq
 80012b0:	2301      	moveq	r3, #1
 80012b2:	2300      	movne	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_Init+0x196>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e022      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10e      	bne.n	80012e4 <HAL_I2C_Init+0x1bc>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1e58      	subs	r0, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6859      	ldr	r1, [r3, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	440b      	add	r3, r1
 80012d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Init+0x1dc>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	0099      	lsls	r1, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	6809      	ldr	r1, [r1, #0]
 8001308:	4313      	orrs	r3, r2
 800130a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69da      	ldr	r2, [r3, #28]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6911      	ldr	r1, [r2, #16]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68d2      	ldr	r2, [r2, #12]
 800133e:	4311      	orrs	r1, r2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	430b      	orrs	r3, r1
 8001346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	000186a0 	.word	0x000186a0
 80013a0:	001e847f 	.word	0x001e847f
 80013a4:	003d08ff 	.word	0x003d08ff
 80013a8:	431bde83 	.word	0x431bde83
 80013ac:	10624dd3 	.word	0x10624dd3

080013b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	461a      	mov	r2, r3
 80013bc:	460b      	mov	r3, r1
 80013be:	817b      	strh	r3, [r7, #10]
 80013c0:	4613      	mov	r3, r2
 80013c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff fbe8 	bl	8000b98 <HAL_GetTick>
 80013c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	f040 80e0 	bne.w	8001598 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2319      	movs	r3, #25
 80013de:	2201      	movs	r2, #1
 80013e0:	4970      	ldr	r1, [pc, #448]	; (80015a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 fdc0 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013ee:	2302      	movs	r3, #2
 80013f0:	e0d3      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_I2C_Master_Transmit+0x50>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e0cc      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b01      	cmp	r3, #1
 8001414:	d007      	beq.n	8001426 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0201 	orr.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001434:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2221      	movs	r2, #33	; 0x21
 800143a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2210      	movs	r2, #16
 8001442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	893a      	ldrh	r2, [r7, #8]
 8001456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001468:	8979      	ldrh	r1, [r7, #10]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 fc2a 	bl	8001cc8 <I2C_MasterRequestWrite>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e08d      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001494:	e066      	b.n	8001564 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fe3a 	bl	8002114 <I2C_WaitOnTXEFlagUntilTimeout>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00d      	beq.n	80014c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d107      	bne.n	80014be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e06b      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d11b      	bne.n	8001538 <HAL_I2C_Master_Transmit+0x188>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d017      	beq.n	8001538 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	6a39      	ldr	r1, [r7, #32]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fe2a 	bl	8002196 <I2C_WaitOnBTFFlagUntilTimeout>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00d      	beq.n	8001564 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	2b04      	cmp	r3, #4
 800154e:	d107      	bne.n	8001560 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e01a      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d194      	bne.n	8001496 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800157a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2220      	movs	r2, #32
 8001580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e000      	b.n	800159a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001598:	2302      	movs	r3, #2
  }
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	00100002 	.word	0x00100002
 80015a8:	ffff0000 	.word	0xffff0000

080015ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	461a      	mov	r2, r3
 80015b8:	460b      	mov	r3, r1
 80015ba:	817b      	strh	r3, [r7, #10]
 80015bc:	4613      	mov	r3, r2
 80015be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff fae8 	bl	8000b98 <HAL_GetTick>
 80015c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	f040 823f 	bne.w	8001a56 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2319      	movs	r3, #25
 80015de:	2201      	movs	r2, #1
 80015e0:	497f      	ldr	r1, [pc, #508]	; (80017e0 <HAL_I2C_Master_Receive+0x234>)
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fcc0 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80015ee:	2302      	movs	r3, #2
 80015f0:	e232      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_I2C_Master_Receive+0x54>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e22b      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b01      	cmp	r3, #1
 8001614:	d007      	beq.n	8001626 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2222      	movs	r2, #34	; 0x22
 800163a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2210      	movs	r2, #16
 8001642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	893a      	ldrh	r2, [r7, #8]
 8001656:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4a5f      	ldr	r2, [pc, #380]	; (80017e4 <HAL_I2C_Master_Receive+0x238>)
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001668:	8979      	ldrh	r1, [r7, #10]
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fbac 	bl	8001dcc <I2C_MasterRequestRead>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1ec      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001682:	2b00      	cmp	r3, #0
 8001684:	d113      	bne.n	80016ae <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	e1c0      	b.n	8001a30 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d11e      	bne.n	80016f4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016c6:	b672      	cpsid	i
}
 80016c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016f0:	b662      	cpsie	i
}
 80016f2:	e035      	b.n	8001760 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d11e      	bne.n	800173a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800170a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800170c:	b672      	cpsid	i
}
 800170e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001734:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001736:	b662      	cpsie	i
}
 8001738:	e012      	b.n	8001760 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001748:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001760:	e166      	b.n	8001a30 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001766:	2b03      	cmp	r3, #3
 8001768:	f200 811f 	bhi.w	80019aa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	2b01      	cmp	r3, #1
 8001772:	d123      	bne.n	80017bc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001776:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 fd4d 	bl	8002218 <I2C_WaitOnRXNEFlagUntilTimeout>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e167      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017ba:	e139      	b.n	8001a30 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d152      	bne.n	800186a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ca:	2200      	movs	r2, #0
 80017cc:	4906      	ldr	r1, [pc, #24]	; (80017e8 <HAL_I2C_Master_Receive+0x23c>)
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 fbca 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e13c      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
 80017de:	bf00      	nop
 80017e0:	00100002 	.word	0x00100002
 80017e4:	ffff0000 	.word	0xffff0000
 80017e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181c:	3b01      	subs	r3, #1
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001832:	b662      	cpsie	i
}
 8001834:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001868:	e0e2      	b.n	8001a30 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001870:	2200      	movs	r2, #0
 8001872:	497b      	ldr	r1, [pc, #492]	; (8001a60 <HAL_I2C_Master_Receive+0x4b4>)
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f000 fb77 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0e9      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001892:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80018ca:	4b66      	ldr	r3, [pc, #408]	; (8001a64 <HAL_I2C_Master_Receive+0x4b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	4a65      	ldr	r2, [pc, #404]	; (8001a68 <HAL_I2C_Master_Receive+0x4bc>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0a1a      	lsrs	r2, r3, #8
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00da      	lsls	r2, r3, #3
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d118      	bne.n	8001922 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f043 0220 	orr.w	r2, r3, #32
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001912:	b662      	cpsie	i
}
 8001914:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e09a      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b04      	cmp	r3, #4
 800192e:	d1d9      	bne.n	80018e4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001972:	b662      	cpsie	i
}
 8001974:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019a8:	e042      	b.n	8001a30 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fc32 	bl	8002218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e04c      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d118      	bne.n	8001a30 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f ae94 	bne.w	8001762 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
  }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	00010004 	.word	0x00010004
 8001a64:	20000000 	.word	0x20000000
 8001a68:	14f8b589 	.word	0x14f8b589

08001a6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff f88c 	bl	8000b98 <HAL_GetTick>
 8001a80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	f040 8111 	bne.w	8001cb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2319      	movs	r3, #25
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4988      	ldr	r1, [pc, #544]	; (8001cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fa62 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e104      	b.n	8001cb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_I2C_IsDeviceReady+0x50>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e0fd      	b.n	8001cb8 <HAL_I2C_IsDeviceReady+0x24c>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d007      	beq.n	8001ae2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2224      	movs	r2, #36	; 0x24
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4a70      	ldr	r2, [pc, #448]	; (8001cc4 <HAL_I2C_IsDeviceReady+0x258>)
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fa20 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00d      	beq.n	8001b4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3c:	d103      	bne.n	8001b46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0b6      	b.n	8001cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b4a:	897b      	ldrh	r3, [r7, #10]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f81d 	bl	8000b98 <HAL_GetTick>
 8001b5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b8e:	e025      	b.n	8001bdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b90:	f7ff f802 	bl	8000b98 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d302      	bcc.n	8001ba6 <HAL_I2C_IsDeviceReady+0x13a>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d103      	bne.n	8001bae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	22a0      	movs	r2, #160	; 0xa0
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2ba0      	cmp	r3, #160	; 0xa0
 8001be6:	d005      	beq.n	8001bf4 <HAL_I2C_IsDeviceReady+0x188>
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_I2C_IsDeviceReady+0x188>
 8001bee:	7dbb      	ldrb	r3, [r7, #22]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0cd      	beq.n	8001b90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d129      	bne.n	8001c5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2319      	movs	r3, #25
 8001c36:	2201      	movs	r2, #1
 8001c38:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f994 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e036      	b.n	8001cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e02c      	b.n	8001cb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2319      	movs	r3, #25
 8001c7e:	2201      	movs	r2, #1
 8001c80:	490f      	ldr	r1, [pc, #60]	; (8001cc0 <HAL_I2C_IsDeviceReady+0x254>)
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f970 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e012      	b.n	8001cb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f4ff af32 	bcc.w	8001b06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001cb6:	2302      	movs	r3, #2
  }
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	00100002 	.word	0x00100002
 8001cc4:	ffff0000 	.word	0xffff0000

08001cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af02      	add	r7, sp, #8
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d006      	beq.n	8001cf2 <I2C_MasterRequestWrite+0x2a>
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d003      	beq.n	8001cf2 <I2C_MasterRequestWrite+0x2a>
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cf0:	d108      	bne.n	8001d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e00b      	b.n	8001d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	d107      	bne.n	8001d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 f91d 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00d      	beq.n	8001d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d42:	d103      	bne.n	8001d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e035      	b.n	8001dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d58:	d108      	bne.n	8001d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d5a:	897b      	ldrh	r3, [r7, #10]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	e01b      	b.n	8001da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	11db      	asrs	r3, r3, #7
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f003 0306 	and.w	r3, r3, #6
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f063 030f 	orn	r3, r3, #15
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <I2C_MasterRequestWrite+0xfc>)
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f943 	bl	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e010      	b.n	8001dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d9a:	897b      	ldrh	r3, [r7, #10]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <I2C_MasterRequestWrite+0x100>)
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f933 	bl	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	00010008 	.word	0x00010008
 8001dc8:	00010002 	.word	0x00010002

08001dcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001df0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d006      	beq.n	8001e06 <I2C_MasterRequestRead+0x3a>
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d003      	beq.n	8001e06 <I2C_MasterRequestRead+0x3a>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e04:	d108      	bne.n	8001e18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e00b      	b.n	8001e30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	2b11      	cmp	r3, #17
 8001e1e:	d107      	bne.n	8001e30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f893 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00d      	beq.n	8001e64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e56:	d103      	bne.n	8001e60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e079      	b.n	8001f58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e6c:	d108      	bne.n	8001e80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e6e:	897b      	ldrh	r3, [r7, #10]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	611a      	str	r2, [r3, #16]
 8001e7e:	e05f      	b.n	8001f40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	11db      	asrs	r3, r3, #7
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f003 0306 	and.w	r3, r3, #6
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f063 030f 	orn	r3, r3, #15
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4930      	ldr	r1, [pc, #192]	; (8001f60 <I2C_MasterRequestRead+0x194>)
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f8b9 	bl	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e054      	b.n	8001f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001eae:	897b      	ldrh	r3, [r7, #10]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4929      	ldr	r1, [pc, #164]	; (8001f64 <I2C_MasterRequestRead+0x198>)
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f8a9 	bl	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e044      	b.n	8001f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f831 	bl	8001f68 <I2C_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00d      	beq.n	8001f28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1a:	d103      	bne.n	8001f24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e017      	b.n	8001f58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f28:	897b      	ldrh	r3, [r7, #10]
 8001f2a:	11db      	asrs	r3, r3, #7
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f003 0306 	and.w	r3, r3, #6
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f063 030e 	orn	r3, r3, #14
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <I2C_MasterRequestRead+0x198>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f865 	bl	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	00010008 	.word	0x00010008
 8001f64:	00010002 	.word	0x00010002

08001f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f78:	e025      	b.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d021      	beq.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f82:	f7fe fe09 	bl	8000b98 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d302      	bcc.n	8001f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d116      	bne.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f043 0220 	orr.w	r2, r3, #32
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e023      	b.n	800200e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10d      	bne.n	8001fec <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	e00c      	b.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf0c      	ite	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	2300      	movne	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	429a      	cmp	r2, r3
 800200a:	d0b6      	beq.n	8001f7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002024:	e051      	b.n	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002034:	d123      	bne.n	800207e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002044:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800204e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f043 0204 	orr.w	r2, r3, #4
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e046      	b.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d021      	beq.n	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7fe fd87 	bl	8000b98 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d116      	bne.n	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f043 0220 	orr.w	r2, r3, #32
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e020      	b.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10c      	bne.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4013      	ands	r3, r2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	e00b      	b.n	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d18d      	bne.n	8002026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002120:	e02d      	b.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f8ce 	bl	80022c4 <I2C_IsAcknowledgeFailed>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e02d      	b.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d021      	beq.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213a:	f7fe fd2d 	bl	8000b98 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	429a      	cmp	r2, r3
 8002148:	d302      	bcc.n	8002150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d116      	bne.n	800217e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f043 0220 	orr.w	r2, r3, #32
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e007      	b.n	800218e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d1ca      	bne.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021a2:	e02d      	b.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f88d 	bl	80022c4 <I2C_IsAcknowledgeFailed>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e02d      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ba:	d021      	beq.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021bc:	f7fe fcec 	bl	8000b98 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d302      	bcc.n	80021d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d116      	bne.n	8002200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e007      	b.n	8002210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d1ca      	bne.n	80021a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002224:	e042      	b.n	80022ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b10      	cmp	r3, #16
 8002232:	d119      	bne.n	8002268 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0210 	mvn.w	r2, #16
 800223c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e029      	b.n	80022bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002268:	f7fe fc96 	bl	8000b98 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	429a      	cmp	r2, r3
 8002276:	d302      	bcc.n	800227e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f043 0220 	orr.w	r2, r3, #32
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e007      	b.n	80022bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d1b5      	bne.n	8002226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d11b      	bne.n	8002314 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f043 0204 	orr.w	r2, r3, #4
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e272      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8087 	beq.w	800244e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002340:	4b92      	ldr	r3, [pc, #584]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00c      	beq.n	8002366 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800234c:	4b8f      	ldr	r3, [pc, #572]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d112      	bne.n	800237e <HAL_RCC_OscConfig+0x5e>
 8002358:	4b8c      	ldr	r3, [pc, #560]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	d10b      	bne.n	800237e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002366:	4b89      	ldr	r3, [pc, #548]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d06c      	beq.n	800244c <HAL_RCC_OscConfig+0x12c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d168      	bne.n	800244c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e24c      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x76>
 8002388:	4b80      	ldr	r3, [pc, #512]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7f      	ldr	r2, [pc, #508]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e02e      	b.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x98>
 800239e:	4b7b      	ldr	r3, [pc, #492]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a7a      	ldr	r2, [pc, #488]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b78      	ldr	r3, [pc, #480]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a77      	ldr	r2, [pc, #476]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01d      	b.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0xbc>
 80023c2:	4b72      	ldr	r3, [pc, #456]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a71      	ldr	r2, [pc, #452]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a6e      	ldr	r2, [pc, #440]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 80023dc:	4b6b      	ldr	r3, [pc, #428]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a6a      	ldr	r2, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b68      	ldr	r3, [pc, #416]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a67      	ldr	r2, [pc, #412]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fbcc 	bl	8000b98 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe fbc8 	bl	8000b98 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e200      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xe4>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fbb8 	bl	8000b98 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe fbb4 	bl	8000b98 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1ec      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x10c>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d063      	beq.n	8002522 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800245a:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002466:	4b49      	ldr	r3, [pc, #292]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b08      	cmp	r3, #8
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x18c>
 8002472:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x176>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1c0      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4b3d      	ldr	r3, [pc, #244]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4939      	ldr	r1, [pc, #228]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	e03a      	b.n	8002522 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fb6d 	bl	8000b98 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c2:	f7fe fb69 	bl	8000b98 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1a1      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4927      	ldr	r1, [pc, #156]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x270>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe fb4c 	bl	8000b98 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002504:	f7fe fb48 	bl	8000b98 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e180      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d03a      	beq.n	80025a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d019      	beq.n	800256a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253c:	f7fe fb2c 	bl	8000b98 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe fb28 	bl	8000b98 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e160      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_RCC_OscConfig+0x26c>)
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002562:	2001      	movs	r0, #1
 8002564:	f000 fad8 	bl	8002b18 <RCC_Delay>
 8002568:	e01c      	b.n	80025a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7fe fb12 	bl	8000b98 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002576:	e00f      	b.n	8002598 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fb0e 	bl	8000b98 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d908      	bls.n	8002598 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e146      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	42420000 	.word	0x42420000
 8002594:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002598:	4b92      	ldr	r3, [pc, #584]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e9      	bne.n	8002578 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a6 	beq.w	80026fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b6:	4b8b      	ldr	r3, [pc, #556]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10d      	bne.n	80025de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a87      	ldr	r2, [pc, #540]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <HAL_RCC_OscConfig+0x4c8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d118      	bne.n	800261c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ea:	4b7f      	ldr	r3, [pc, #508]	; (80027e8 <HAL_RCC_OscConfig+0x4c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a7e      	ldr	r2, [pc, #504]	; (80027e8 <HAL_RCC_OscConfig+0x4c8>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7fe facf 	bl	8000b98 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7fe facb 	bl	8000b98 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e103      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b75      	ldr	r3, [pc, #468]	; (80027e8 <HAL_RCC_OscConfig+0x4c8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x312>
 8002624:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a6e      	ldr	r2, [pc, #440]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6213      	str	r3, [r2, #32]
 8002630:	e02d      	b.n	800268e <HAL_RCC_OscConfig+0x36e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0x334>
 800263a:	4b6a      	ldr	r3, [pc, #424]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a69      	ldr	r2, [pc, #420]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6213      	str	r3, [r2, #32]
 8002646:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a66      	ldr	r2, [pc, #408]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	6213      	str	r3, [r2, #32]
 8002652:	e01c      	b.n	800268e <HAL_RCC_OscConfig+0x36e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d10c      	bne.n	8002676 <HAL_RCC_OscConfig+0x356>
 800265c:	4b61      	ldr	r3, [pc, #388]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a60      	ldr	r2, [pc, #384]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6213      	str	r3, [r2, #32]
 8002668:	4b5e      	ldr	r3, [pc, #376]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4a5d      	ldr	r2, [pc, #372]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6213      	str	r3, [r2, #32]
 8002674:	e00b      	b.n	800268e <HAL_RCC_OscConfig+0x36e>
 8002676:	4b5b      	ldr	r3, [pc, #364]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a5a      	ldr	r2, [pc, #360]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d015      	beq.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fa7f 	bl	8000b98 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fa7b 	bl	8000b98 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0b1      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0ee      	beq.n	800269e <HAL_RCC_OscConfig+0x37e>
 80026c0:	e014      	b.n	80026ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fa69 	bl	8000b98 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7fe fa65 	bl	8000b98 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e09b      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e0:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1ee      	bne.n	80026ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d105      	bne.n	80026fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4b3c      	ldr	r3, [pc, #240]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8087 	beq.w	8002816 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002708:	4b36      	ldr	r3, [pc, #216]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d061      	beq.n	80027d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d146      	bne.n	80027aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_RCC_OscConfig+0x4cc>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe fa39 	bl	8000b98 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fa35 	bl	8000b98 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e06d      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273c:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d108      	bne.n	8002764 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002752:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	4921      	ldr	r1, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a19      	ldr	r1, [r3, #32]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	430b      	orrs	r3, r1
 8002776:	491b      	ldr	r1, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x4cc>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe fa09 	bl	8000b98 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278a:	f7fe fa05 	bl	8000b98 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e03d      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x46a>
 80027a8:	e035      	b.n	8002816 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x4cc>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe f9f2 	bl	8000b98 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe f9ee 	bl	8000b98 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e026      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x498>
 80027d6:	e01e      	b.n	8002816 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e019      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40007000 	.word	0x40007000
 80027ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x500>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	429a      	cmp	r2, r3
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000

08002824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0d0      	b.n	80029da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b6a      	ldr	r3, [pc, #424]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d910      	bls.n	8002868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b67      	ldr	r3, [pc, #412]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 0207 	bic.w	r2, r3, #7
 800284e:	4965      	ldr	r1, [pc, #404]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0b8      	b.n	80029da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d005      	beq.n	800288c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002880:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800288a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	494d      	ldr	r1, [pc, #308]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d040      	beq.n	8002944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d115      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e07f      	b.n	80029da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e073      	b.n	80029da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e06b      	b.n	80029da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b39      	ldr	r3, [pc, #228]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4936      	ldr	r1, [pc, #216]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe f940 	bl	8000b98 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fe f93c 	bl	8000b98 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e053      	b.n	80029da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d210      	bcs.n	8002974 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0207 	bic.w	r2, r3, #7
 800295a:	4922      	ldr	r1, [pc, #136]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d001      	beq.n	8002974 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e032      	b.n	80029da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4916      	ldr	r1, [pc, #88]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	490e      	ldr	r1, [pc, #56]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029b2:	f000 f821 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	490a      	ldr	r1, [pc, #40]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80029c4:	5ccb      	ldrb	r3, [r1, r3]
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1cc>)
 80029cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x1d0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f89e 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40022000 	.word	0x40022000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	080038f4 	.word	0x080038f4
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000004 	.word	0x20000004

080029f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f8:	b490      	push	{r4, r7}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029fe:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a00:	1d3c      	adds	r4, r7, #4
 8002a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a08:	f240 2301 	movw	r3, #513	; 0x201
 8002a0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d002      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x40>
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_GetSysClockFreq+0x46>
 8002a36:	e02b      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a3a:	623b      	str	r3, [r7, #32]
      break;
 8002a3c:	e02b      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	0c9b      	lsrs	r3, r3, #18
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3328      	adds	r3, #40	; 0x28
 8002a48:	443b      	add	r3, r7
 8002a4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0c5b      	lsrs	r3, r3, #17
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	3328      	adds	r3, #40	; 0x28
 8002a66:	443b      	add	r3, r7
 8002a68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	4a0e      	ldr	r2, [pc, #56]	; (8002aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a72:	fb03 f202 	mul.w	r2, r3, r2
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7e:	e004      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	623b      	str	r3, [r7, #32]
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a92:	623b      	str	r3, [r7, #32]
      break;
 8002a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3728      	adds	r7, #40	; 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc90      	pop	{r4, r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	080038e4 	.word	0x080038e4
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	003d0900 	.word	0x003d0900

08002ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff2 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	08003904 	.word	0x08003904

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffde 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0adb      	lsrs	r3, r3, #11
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08003904 	.word	0x08003904

08002b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <RCC_Delay+0x34>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <RCC_Delay+0x38>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b34:	bf00      	nop
  }
  while (Delay --);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f9      	bne.n	8002b34 <RCC_Delay+0x1c>
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e03f      	b.n	8002be6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fd fee0 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f905 	bl	8002da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08a      	sub	sp, #40	; 0x28
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d17c      	bne.n	8002d08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_UART_Transmit+0x2c>
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e075      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_UART_Transmit+0x3e>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e06e      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2221      	movs	r2, #33	; 0x21
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c42:	f7fd ffa9 	bl	8000b98 <HAL_GetTick>
 8002c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5c:	d108      	bne.n	8002c70 <HAL_UART_Transmit+0x82>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e003      	b.n	8002c78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c80:	e02a      	b.n	8002cd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f840 	bl	8002d12 <UART_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e036      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10b      	bne.n	8002cba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	e007      	b.n	8002cca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1cf      	bne.n	8002c82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2140      	movs	r1, #64	; 0x40
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f810 	bl	8002d12 <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e006      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d22:	e02c      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d028      	beq.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d32:	f7fd ff31 	bl	8000b98 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d21d      	bcs.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d50:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e00f      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d0c3      	beq.n	8002d24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002de2:	f023 030c 	bic.w	r3, r3, #12
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <UART_SetConfig+0x114>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e10:	f7ff fe6e 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	e002      	b.n	8002e1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7ff fe56 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009a      	lsls	r2, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <UART_SetConfig+0x118>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	0119      	lsls	r1, r3, #4
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <UART_SetConfig+0x118>)
 8002e56:	fba3 0302 	umull	r0, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2064      	movs	r0, #100	; 0x64
 8002e5e:	fb00 f303 	mul.w	r3, r0, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	; 0x32
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <UART_SetConfig+0x118>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e74:	4419      	add	r1, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <UART_SetConfig+0x118>)
 8002e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2064      	movs	r0, #100	; 0x64
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	3332      	adds	r3, #50	; 0x32
 8002ea0:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <UART_SetConfig+0x118>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40013800 	.word	0x40013800
 8002ec0:	51eb851f 	.word	0x51eb851f

08002ec4 <__errno>:
 8002ec4:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <__errno+0x8>)
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000000c 	.word	0x2000000c

08002ed0 <__libc_init_array>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	2600      	movs	r6, #0
 8002ed4:	4d0c      	ldr	r5, [pc, #48]	; (8002f08 <__libc_init_array+0x38>)
 8002ed6:	4c0d      	ldr	r4, [pc, #52]	; (8002f0c <__libc_init_array+0x3c>)
 8002ed8:	1b64      	subs	r4, r4, r5
 8002eda:	10a4      	asrs	r4, r4, #2
 8002edc:	42a6      	cmp	r6, r4
 8002ede:	d109      	bne.n	8002ef4 <__libc_init_array+0x24>
 8002ee0:	f000 fcd0 	bl	8003884 <_init>
 8002ee4:	2600      	movs	r6, #0
 8002ee6:	4d0a      	ldr	r5, [pc, #40]	; (8002f10 <__libc_init_array+0x40>)
 8002ee8:	4c0a      	ldr	r4, [pc, #40]	; (8002f14 <__libc_init_array+0x44>)
 8002eea:	1b64      	subs	r4, r4, r5
 8002eec:	10a4      	asrs	r4, r4, #2
 8002eee:	42a6      	cmp	r6, r4
 8002ef0:	d105      	bne.n	8002efe <__libc_init_array+0x2e>
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef8:	4798      	blx	r3
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7ee      	b.n	8002edc <__libc_init_array+0xc>
 8002efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f02:	4798      	blx	r3
 8002f04:	3601      	adds	r6, #1
 8002f06:	e7f2      	b.n	8002eee <__libc_init_array+0x1e>
 8002f08:	08003940 	.word	0x08003940
 8002f0c:	08003940 	.word	0x08003940
 8002f10:	08003940 	.word	0x08003940
 8002f14:	08003944 	.word	0x08003944

08002f18 <memset>:
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4402      	add	r2, r0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	f803 1b01 	strb.w	r1, [r3], #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <sniprintf>:
 8002f28:	b40c      	push	{r2, r3}
 8002f2a:	b530      	push	{r4, r5, lr}
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <sniprintf+0x64>)
 8002f2e:	1e0c      	subs	r4, r1, #0
 8002f30:	681d      	ldr	r5, [r3, #0]
 8002f32:	b09d      	sub	sp, #116	; 0x74
 8002f34:	da08      	bge.n	8002f48 <sniprintf+0x20>
 8002f36:	238b      	movs	r3, #139	; 0x8b
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	b01d      	add	sp, #116	; 0x74
 8002f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f44:	b002      	add	sp, #8
 8002f46:	4770      	bx	lr
 8002f48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002f4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002f50:	bf0c      	ite	eq
 8002f52:	4623      	moveq	r3, r4
 8002f54:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002f58:	9304      	str	r3, [sp, #16]
 8002f5a:	9307      	str	r3, [sp, #28]
 8002f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f60:	9002      	str	r0, [sp, #8]
 8002f62:	9006      	str	r0, [sp, #24]
 8002f64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002f68:	4628      	mov	r0, r5
 8002f6a:	ab21      	add	r3, sp, #132	; 0x84
 8002f6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f6e:	a902      	add	r1, sp, #8
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	f000 f889 	bl	8003088 <_svfiprintf_r>
 8002f76:	1c43      	adds	r3, r0, #1
 8002f78:	bfbc      	itt	lt
 8002f7a:	238b      	movlt	r3, #139	; 0x8b
 8002f7c:	602b      	strlt	r3, [r5, #0]
 8002f7e:	2c00      	cmp	r4, #0
 8002f80:	d0dd      	beq.n	8002f3e <sniprintf+0x16>
 8002f82:	2200      	movs	r2, #0
 8002f84:	9b02      	ldr	r3, [sp, #8]
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e7d9      	b.n	8002f3e <sniprintf+0x16>
 8002f8a:	bf00      	nop
 8002f8c:	2000000c 	.word	0x2000000c

08002f90 <siprintf>:
 8002f90:	b40e      	push	{r1, r2, r3}
 8002f92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f96:	b500      	push	{lr}
 8002f98:	b09c      	sub	sp, #112	; 0x70
 8002f9a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f9c:	9002      	str	r0, [sp, #8]
 8002f9e:	9006      	str	r0, [sp, #24]
 8002fa0:	9107      	str	r1, [sp, #28]
 8002fa2:	9104      	str	r1, [sp, #16]
 8002fa4:	4808      	ldr	r0, [pc, #32]	; (8002fc8 <siprintf+0x38>)
 8002fa6:	4909      	ldr	r1, [pc, #36]	; (8002fcc <siprintf+0x3c>)
 8002fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fac:	9105      	str	r1, [sp, #20]
 8002fae:	6800      	ldr	r0, [r0, #0]
 8002fb0:	a902      	add	r1, sp, #8
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	f000 f868 	bl	8003088 <_svfiprintf_r>
 8002fb8:	2200      	movs	r2, #0
 8002fba:	9b02      	ldr	r3, [sp, #8]
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	b01c      	add	sp, #112	; 0x70
 8002fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fc4:	b003      	add	sp, #12
 8002fc6:	4770      	bx	lr
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	ffff0208 	.word	0xffff0208

08002fd0 <__ssputs_r>:
 8002fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd4:	688e      	ldr	r6, [r1, #8]
 8002fd6:	4682      	mov	sl, r0
 8002fd8:	429e      	cmp	r6, r3
 8002fda:	460c      	mov	r4, r1
 8002fdc:	4690      	mov	r8, r2
 8002fde:	461f      	mov	r7, r3
 8002fe0:	d838      	bhi.n	8003054 <__ssputs_r+0x84>
 8002fe2:	898a      	ldrh	r2, [r1, #12]
 8002fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002fe8:	d032      	beq.n	8003050 <__ssputs_r+0x80>
 8002fea:	6825      	ldr	r5, [r4, #0]
 8002fec:	6909      	ldr	r1, [r1, #16]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	eba5 0901 	sub.w	r9, r5, r1
 8002ff4:	6965      	ldr	r5, [r4, #20]
 8002ff6:	444b      	add	r3, r9
 8002ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003000:	106d      	asrs	r5, r5, #1
 8003002:	429d      	cmp	r5, r3
 8003004:	bf38      	it	cc
 8003006:	461d      	movcc	r5, r3
 8003008:	0553      	lsls	r3, r2, #21
 800300a:	d531      	bpl.n	8003070 <__ssputs_r+0xa0>
 800300c:	4629      	mov	r1, r5
 800300e:	f000 fb6f 	bl	80036f0 <_malloc_r>
 8003012:	4606      	mov	r6, r0
 8003014:	b950      	cbnz	r0, 800302c <__ssputs_r+0x5c>
 8003016:	230c      	movs	r3, #12
 8003018:	f04f 30ff 	mov.w	r0, #4294967295
 800301c:	f8ca 3000 	str.w	r3, [sl]
 8003020:	89a3      	ldrh	r3, [r4, #12]
 8003022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003026:	81a3      	strh	r3, [r4, #12]
 8003028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302c:	464a      	mov	r2, r9
 800302e:	6921      	ldr	r1, [r4, #16]
 8003030:	f000 face 	bl	80035d0 <memcpy>
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800303a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303e:	81a3      	strh	r3, [r4, #12]
 8003040:	6126      	str	r6, [r4, #16]
 8003042:	444e      	add	r6, r9
 8003044:	6026      	str	r6, [r4, #0]
 8003046:	463e      	mov	r6, r7
 8003048:	6165      	str	r5, [r4, #20]
 800304a:	eba5 0509 	sub.w	r5, r5, r9
 800304e:	60a5      	str	r5, [r4, #8]
 8003050:	42be      	cmp	r6, r7
 8003052:	d900      	bls.n	8003056 <__ssputs_r+0x86>
 8003054:	463e      	mov	r6, r7
 8003056:	4632      	mov	r2, r6
 8003058:	4641      	mov	r1, r8
 800305a:	6820      	ldr	r0, [r4, #0]
 800305c:	f000 fac6 	bl	80035ec <memmove>
 8003060:	68a3      	ldr	r3, [r4, #8]
 8003062:	2000      	movs	r0, #0
 8003064:	1b9b      	subs	r3, r3, r6
 8003066:	60a3      	str	r3, [r4, #8]
 8003068:	6823      	ldr	r3, [r4, #0]
 800306a:	4433      	add	r3, r6
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	e7db      	b.n	8003028 <__ssputs_r+0x58>
 8003070:	462a      	mov	r2, r5
 8003072:	f000 fbb1 	bl	80037d8 <_realloc_r>
 8003076:	4606      	mov	r6, r0
 8003078:	2800      	cmp	r0, #0
 800307a:	d1e1      	bne.n	8003040 <__ssputs_r+0x70>
 800307c:	4650      	mov	r0, sl
 800307e:	6921      	ldr	r1, [r4, #16]
 8003080:	f000 face 	bl	8003620 <_free_r>
 8003084:	e7c7      	b.n	8003016 <__ssputs_r+0x46>
	...

08003088 <_svfiprintf_r>:
 8003088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308c:	4698      	mov	r8, r3
 800308e:	898b      	ldrh	r3, [r1, #12]
 8003090:	4607      	mov	r7, r0
 8003092:	061b      	lsls	r3, r3, #24
 8003094:	460d      	mov	r5, r1
 8003096:	4614      	mov	r4, r2
 8003098:	b09d      	sub	sp, #116	; 0x74
 800309a:	d50e      	bpl.n	80030ba <_svfiprintf_r+0x32>
 800309c:	690b      	ldr	r3, [r1, #16]
 800309e:	b963      	cbnz	r3, 80030ba <_svfiprintf_r+0x32>
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	f000 fb25 	bl	80036f0 <_malloc_r>
 80030a6:	6028      	str	r0, [r5, #0]
 80030a8:	6128      	str	r0, [r5, #16]
 80030aa:	b920      	cbnz	r0, 80030b6 <_svfiprintf_r+0x2e>
 80030ac:	230c      	movs	r3, #12
 80030ae:	603b      	str	r3, [r7, #0]
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	e0d1      	b.n	800325a <_svfiprintf_r+0x1d2>
 80030b6:	2340      	movs	r3, #64	; 0x40
 80030b8:	616b      	str	r3, [r5, #20]
 80030ba:	2300      	movs	r3, #0
 80030bc:	9309      	str	r3, [sp, #36]	; 0x24
 80030be:	2320      	movs	r3, #32
 80030c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030c4:	2330      	movs	r3, #48	; 0x30
 80030c6:	f04f 0901 	mov.w	r9, #1
 80030ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80030ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003274 <_svfiprintf_r+0x1ec>
 80030d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030d6:	4623      	mov	r3, r4
 80030d8:	469a      	mov	sl, r3
 80030da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030de:	b10a      	cbz	r2, 80030e4 <_svfiprintf_r+0x5c>
 80030e0:	2a25      	cmp	r2, #37	; 0x25
 80030e2:	d1f9      	bne.n	80030d8 <_svfiprintf_r+0x50>
 80030e4:	ebba 0b04 	subs.w	fp, sl, r4
 80030e8:	d00b      	beq.n	8003102 <_svfiprintf_r+0x7a>
 80030ea:	465b      	mov	r3, fp
 80030ec:	4622      	mov	r2, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	4638      	mov	r0, r7
 80030f2:	f7ff ff6d 	bl	8002fd0 <__ssputs_r>
 80030f6:	3001      	adds	r0, #1
 80030f8:	f000 80aa 	beq.w	8003250 <_svfiprintf_r+0x1c8>
 80030fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030fe:	445a      	add	r2, fp
 8003100:	9209      	str	r2, [sp, #36]	; 0x24
 8003102:	f89a 3000 	ldrb.w	r3, [sl]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80a2 	beq.w	8003250 <_svfiprintf_r+0x1c8>
 800310c:	2300      	movs	r3, #0
 800310e:	f04f 32ff 	mov.w	r2, #4294967295
 8003112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003116:	f10a 0a01 	add.w	sl, sl, #1
 800311a:	9304      	str	r3, [sp, #16]
 800311c:	9307      	str	r3, [sp, #28]
 800311e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003122:	931a      	str	r3, [sp, #104]	; 0x68
 8003124:	4654      	mov	r4, sl
 8003126:	2205      	movs	r2, #5
 8003128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800312c:	4851      	ldr	r0, [pc, #324]	; (8003274 <_svfiprintf_r+0x1ec>)
 800312e:	f000 fa41 	bl	80035b4 <memchr>
 8003132:	9a04      	ldr	r2, [sp, #16]
 8003134:	b9d8      	cbnz	r0, 800316e <_svfiprintf_r+0xe6>
 8003136:	06d0      	lsls	r0, r2, #27
 8003138:	bf44      	itt	mi
 800313a:	2320      	movmi	r3, #32
 800313c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003140:	0711      	lsls	r1, r2, #28
 8003142:	bf44      	itt	mi
 8003144:	232b      	movmi	r3, #43	; 0x2b
 8003146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800314a:	f89a 3000 	ldrb.w	r3, [sl]
 800314e:	2b2a      	cmp	r3, #42	; 0x2a
 8003150:	d015      	beq.n	800317e <_svfiprintf_r+0xf6>
 8003152:	4654      	mov	r4, sl
 8003154:	2000      	movs	r0, #0
 8003156:	f04f 0c0a 	mov.w	ip, #10
 800315a:	9a07      	ldr	r2, [sp, #28]
 800315c:	4621      	mov	r1, r4
 800315e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003162:	3b30      	subs	r3, #48	; 0x30
 8003164:	2b09      	cmp	r3, #9
 8003166:	d94e      	bls.n	8003206 <_svfiprintf_r+0x17e>
 8003168:	b1b0      	cbz	r0, 8003198 <_svfiprintf_r+0x110>
 800316a:	9207      	str	r2, [sp, #28]
 800316c:	e014      	b.n	8003198 <_svfiprintf_r+0x110>
 800316e:	eba0 0308 	sub.w	r3, r0, r8
 8003172:	fa09 f303 	lsl.w	r3, r9, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	46a2      	mov	sl, r4
 800317a:	9304      	str	r3, [sp, #16]
 800317c:	e7d2      	b.n	8003124 <_svfiprintf_r+0x9c>
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	1d19      	adds	r1, r3, #4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	9103      	str	r1, [sp, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	bfbb      	ittet	lt
 800318a:	425b      	neglt	r3, r3
 800318c:	f042 0202 	orrlt.w	r2, r2, #2
 8003190:	9307      	strge	r3, [sp, #28]
 8003192:	9307      	strlt	r3, [sp, #28]
 8003194:	bfb8      	it	lt
 8003196:	9204      	strlt	r2, [sp, #16]
 8003198:	7823      	ldrb	r3, [r4, #0]
 800319a:	2b2e      	cmp	r3, #46	; 0x2e
 800319c:	d10c      	bne.n	80031b8 <_svfiprintf_r+0x130>
 800319e:	7863      	ldrb	r3, [r4, #1]
 80031a0:	2b2a      	cmp	r3, #42	; 0x2a
 80031a2:	d135      	bne.n	8003210 <_svfiprintf_r+0x188>
 80031a4:	9b03      	ldr	r3, [sp, #12]
 80031a6:	3402      	adds	r4, #2
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	9203      	str	r2, [sp, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bfb8      	it	lt
 80031b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80031b6:	9305      	str	r3, [sp, #20]
 80031b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003278 <_svfiprintf_r+0x1f0>
 80031bc:	2203      	movs	r2, #3
 80031be:	4650      	mov	r0, sl
 80031c0:	7821      	ldrb	r1, [r4, #0]
 80031c2:	f000 f9f7 	bl	80035b4 <memchr>
 80031c6:	b140      	cbz	r0, 80031da <_svfiprintf_r+0x152>
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	eba0 000a 	sub.w	r0, r0, sl
 80031ce:	fa03 f000 	lsl.w	r0, r3, r0
 80031d2:	9b04      	ldr	r3, [sp, #16]
 80031d4:	3401      	adds	r4, #1
 80031d6:	4303      	orrs	r3, r0
 80031d8:	9304      	str	r3, [sp, #16]
 80031da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031de:	2206      	movs	r2, #6
 80031e0:	4826      	ldr	r0, [pc, #152]	; (800327c <_svfiprintf_r+0x1f4>)
 80031e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031e6:	f000 f9e5 	bl	80035b4 <memchr>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d038      	beq.n	8003260 <_svfiprintf_r+0x1d8>
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <_svfiprintf_r+0x1f8>)
 80031f0:	bb1b      	cbnz	r3, 800323a <_svfiprintf_r+0x1b2>
 80031f2:	9b03      	ldr	r3, [sp, #12]
 80031f4:	3307      	adds	r3, #7
 80031f6:	f023 0307 	bic.w	r3, r3, #7
 80031fa:	3308      	adds	r3, #8
 80031fc:	9303      	str	r3, [sp, #12]
 80031fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003200:	4433      	add	r3, r6
 8003202:	9309      	str	r3, [sp, #36]	; 0x24
 8003204:	e767      	b.n	80030d6 <_svfiprintf_r+0x4e>
 8003206:	460c      	mov	r4, r1
 8003208:	2001      	movs	r0, #1
 800320a:	fb0c 3202 	mla	r2, ip, r2, r3
 800320e:	e7a5      	b.n	800315c <_svfiprintf_r+0xd4>
 8003210:	2300      	movs	r3, #0
 8003212:	f04f 0c0a 	mov.w	ip, #10
 8003216:	4619      	mov	r1, r3
 8003218:	3401      	adds	r4, #1
 800321a:	9305      	str	r3, [sp, #20]
 800321c:	4620      	mov	r0, r4
 800321e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003222:	3a30      	subs	r2, #48	; 0x30
 8003224:	2a09      	cmp	r2, #9
 8003226:	d903      	bls.n	8003230 <_svfiprintf_r+0x1a8>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0c5      	beq.n	80031b8 <_svfiprintf_r+0x130>
 800322c:	9105      	str	r1, [sp, #20]
 800322e:	e7c3      	b.n	80031b8 <_svfiprintf_r+0x130>
 8003230:	4604      	mov	r4, r0
 8003232:	2301      	movs	r3, #1
 8003234:	fb0c 2101 	mla	r1, ip, r1, r2
 8003238:	e7f0      	b.n	800321c <_svfiprintf_r+0x194>
 800323a:	ab03      	add	r3, sp, #12
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	462a      	mov	r2, r5
 8003240:	4638      	mov	r0, r7
 8003242:	4b10      	ldr	r3, [pc, #64]	; (8003284 <_svfiprintf_r+0x1fc>)
 8003244:	a904      	add	r1, sp, #16
 8003246:	f3af 8000 	nop.w
 800324a:	1c42      	adds	r2, r0, #1
 800324c:	4606      	mov	r6, r0
 800324e:	d1d6      	bne.n	80031fe <_svfiprintf_r+0x176>
 8003250:	89ab      	ldrh	r3, [r5, #12]
 8003252:	065b      	lsls	r3, r3, #25
 8003254:	f53f af2c 	bmi.w	80030b0 <_svfiprintf_r+0x28>
 8003258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800325a:	b01d      	add	sp, #116	; 0x74
 800325c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003260:	ab03      	add	r3, sp, #12
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	462a      	mov	r2, r5
 8003266:	4638      	mov	r0, r7
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <_svfiprintf_r+0x1fc>)
 800326a:	a904      	add	r1, sp, #16
 800326c:	f000 f87c 	bl	8003368 <_printf_i>
 8003270:	e7eb      	b.n	800324a <_svfiprintf_r+0x1c2>
 8003272:	bf00      	nop
 8003274:	0800390c 	.word	0x0800390c
 8003278:	08003912 	.word	0x08003912
 800327c:	08003916 	.word	0x08003916
 8003280:	00000000 	.word	0x00000000
 8003284:	08002fd1 	.word	0x08002fd1

08003288 <_printf_common>:
 8003288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800328c:	4616      	mov	r6, r2
 800328e:	4699      	mov	r9, r3
 8003290:	688a      	ldr	r2, [r1, #8]
 8003292:	690b      	ldr	r3, [r1, #16]
 8003294:	4607      	mov	r7, r0
 8003296:	4293      	cmp	r3, r2
 8003298:	bfb8      	it	lt
 800329a:	4613      	movlt	r3, r2
 800329c:	6033      	str	r3, [r6, #0]
 800329e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032a2:	460c      	mov	r4, r1
 80032a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032a8:	b10a      	cbz	r2, 80032ae <_printf_common+0x26>
 80032aa:	3301      	adds	r3, #1
 80032ac:	6033      	str	r3, [r6, #0]
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	0699      	lsls	r1, r3, #26
 80032b2:	bf42      	ittt	mi
 80032b4:	6833      	ldrmi	r3, [r6, #0]
 80032b6:	3302      	addmi	r3, #2
 80032b8:	6033      	strmi	r3, [r6, #0]
 80032ba:	6825      	ldr	r5, [r4, #0]
 80032bc:	f015 0506 	ands.w	r5, r5, #6
 80032c0:	d106      	bne.n	80032d0 <_printf_common+0x48>
 80032c2:	f104 0a19 	add.w	sl, r4, #25
 80032c6:	68e3      	ldr	r3, [r4, #12]
 80032c8:	6832      	ldr	r2, [r6, #0]
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	42ab      	cmp	r3, r5
 80032ce:	dc28      	bgt.n	8003322 <_printf_common+0x9a>
 80032d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032d4:	1e13      	subs	r3, r2, #0
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	bf18      	it	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	0692      	lsls	r2, r2, #26
 80032de:	d42d      	bmi.n	800333c <_printf_common+0xb4>
 80032e0:	4649      	mov	r1, r9
 80032e2:	4638      	mov	r0, r7
 80032e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032e8:	47c0      	blx	r8
 80032ea:	3001      	adds	r0, #1
 80032ec:	d020      	beq.n	8003330 <_printf_common+0xa8>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	68e5      	ldr	r5, [r4, #12]
 80032f2:	f003 0306 	and.w	r3, r3, #6
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf18      	it	ne
 80032fa:	2500      	movne	r5, #0
 80032fc:	6832      	ldr	r2, [r6, #0]
 80032fe:	f04f 0600 	mov.w	r6, #0
 8003302:	68a3      	ldr	r3, [r4, #8]
 8003304:	bf08      	it	eq
 8003306:	1aad      	subeq	r5, r5, r2
 8003308:	6922      	ldr	r2, [r4, #16]
 800330a:	bf08      	it	eq
 800330c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003310:	4293      	cmp	r3, r2
 8003312:	bfc4      	itt	gt
 8003314:	1a9b      	subgt	r3, r3, r2
 8003316:	18ed      	addgt	r5, r5, r3
 8003318:	341a      	adds	r4, #26
 800331a:	42b5      	cmp	r5, r6
 800331c:	d11a      	bne.n	8003354 <_printf_common+0xcc>
 800331e:	2000      	movs	r0, #0
 8003320:	e008      	b.n	8003334 <_printf_common+0xac>
 8003322:	2301      	movs	r3, #1
 8003324:	4652      	mov	r2, sl
 8003326:	4649      	mov	r1, r9
 8003328:	4638      	mov	r0, r7
 800332a:	47c0      	blx	r8
 800332c:	3001      	adds	r0, #1
 800332e:	d103      	bne.n	8003338 <_printf_common+0xb0>
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003338:	3501      	adds	r5, #1
 800333a:	e7c4      	b.n	80032c6 <_printf_common+0x3e>
 800333c:	2030      	movs	r0, #48	; 0x30
 800333e:	18e1      	adds	r1, r4, r3
 8003340:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800334a:	4422      	add	r2, r4
 800334c:	3302      	adds	r3, #2
 800334e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003352:	e7c5      	b.n	80032e0 <_printf_common+0x58>
 8003354:	2301      	movs	r3, #1
 8003356:	4622      	mov	r2, r4
 8003358:	4649      	mov	r1, r9
 800335a:	4638      	mov	r0, r7
 800335c:	47c0      	blx	r8
 800335e:	3001      	adds	r0, #1
 8003360:	d0e6      	beq.n	8003330 <_printf_common+0xa8>
 8003362:	3601      	adds	r6, #1
 8003364:	e7d9      	b.n	800331a <_printf_common+0x92>
	...

08003368 <_printf_i>:
 8003368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	7e0f      	ldrb	r7, [r1, #24]
 800336e:	4691      	mov	r9, r2
 8003370:	2f78      	cmp	r7, #120	; 0x78
 8003372:	4680      	mov	r8, r0
 8003374:	460c      	mov	r4, r1
 8003376:	469a      	mov	sl, r3
 8003378:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800337a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800337e:	d807      	bhi.n	8003390 <_printf_i+0x28>
 8003380:	2f62      	cmp	r7, #98	; 0x62
 8003382:	d80a      	bhi.n	800339a <_printf_i+0x32>
 8003384:	2f00      	cmp	r7, #0
 8003386:	f000 80d9 	beq.w	800353c <_printf_i+0x1d4>
 800338a:	2f58      	cmp	r7, #88	; 0x58
 800338c:	f000 80a4 	beq.w	80034d8 <_printf_i+0x170>
 8003390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003398:	e03a      	b.n	8003410 <_printf_i+0xa8>
 800339a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800339e:	2b15      	cmp	r3, #21
 80033a0:	d8f6      	bhi.n	8003390 <_printf_i+0x28>
 80033a2:	a101      	add	r1, pc, #4	; (adr r1, 80033a8 <_printf_i+0x40>)
 80033a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033a8:	08003401 	.word	0x08003401
 80033ac:	08003415 	.word	0x08003415
 80033b0:	08003391 	.word	0x08003391
 80033b4:	08003391 	.word	0x08003391
 80033b8:	08003391 	.word	0x08003391
 80033bc:	08003391 	.word	0x08003391
 80033c0:	08003415 	.word	0x08003415
 80033c4:	08003391 	.word	0x08003391
 80033c8:	08003391 	.word	0x08003391
 80033cc:	08003391 	.word	0x08003391
 80033d0:	08003391 	.word	0x08003391
 80033d4:	08003523 	.word	0x08003523
 80033d8:	08003445 	.word	0x08003445
 80033dc:	08003505 	.word	0x08003505
 80033e0:	08003391 	.word	0x08003391
 80033e4:	08003391 	.word	0x08003391
 80033e8:	08003545 	.word	0x08003545
 80033ec:	08003391 	.word	0x08003391
 80033f0:	08003445 	.word	0x08003445
 80033f4:	08003391 	.word	0x08003391
 80033f8:	08003391 	.word	0x08003391
 80033fc:	0800350d 	.word	0x0800350d
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	602a      	str	r2, [r5, #0]
 8003408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003410:	2301      	movs	r3, #1
 8003412:	e0a4      	b.n	800355e <_printf_i+0x1f6>
 8003414:	6820      	ldr	r0, [r4, #0]
 8003416:	6829      	ldr	r1, [r5, #0]
 8003418:	0606      	lsls	r6, r0, #24
 800341a:	f101 0304 	add.w	r3, r1, #4
 800341e:	d50a      	bpl.n	8003436 <_printf_i+0xce>
 8003420:	680e      	ldr	r6, [r1, #0]
 8003422:	602b      	str	r3, [r5, #0]
 8003424:	2e00      	cmp	r6, #0
 8003426:	da03      	bge.n	8003430 <_printf_i+0xc8>
 8003428:	232d      	movs	r3, #45	; 0x2d
 800342a:	4276      	negs	r6, r6
 800342c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003430:	230a      	movs	r3, #10
 8003432:	485e      	ldr	r0, [pc, #376]	; (80035ac <_printf_i+0x244>)
 8003434:	e019      	b.n	800346a <_printf_i+0x102>
 8003436:	680e      	ldr	r6, [r1, #0]
 8003438:	f010 0f40 	tst.w	r0, #64	; 0x40
 800343c:	602b      	str	r3, [r5, #0]
 800343e:	bf18      	it	ne
 8003440:	b236      	sxthne	r6, r6
 8003442:	e7ef      	b.n	8003424 <_printf_i+0xbc>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	6820      	ldr	r0, [r4, #0]
 8003448:	1d19      	adds	r1, r3, #4
 800344a:	6029      	str	r1, [r5, #0]
 800344c:	0601      	lsls	r1, r0, #24
 800344e:	d501      	bpl.n	8003454 <_printf_i+0xec>
 8003450:	681e      	ldr	r6, [r3, #0]
 8003452:	e002      	b.n	800345a <_printf_i+0xf2>
 8003454:	0646      	lsls	r6, r0, #25
 8003456:	d5fb      	bpl.n	8003450 <_printf_i+0xe8>
 8003458:	881e      	ldrh	r6, [r3, #0]
 800345a:	2f6f      	cmp	r7, #111	; 0x6f
 800345c:	bf0c      	ite	eq
 800345e:	2308      	moveq	r3, #8
 8003460:	230a      	movne	r3, #10
 8003462:	4852      	ldr	r0, [pc, #328]	; (80035ac <_printf_i+0x244>)
 8003464:	2100      	movs	r1, #0
 8003466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800346a:	6865      	ldr	r5, [r4, #4]
 800346c:	2d00      	cmp	r5, #0
 800346e:	bfa8      	it	ge
 8003470:	6821      	ldrge	r1, [r4, #0]
 8003472:	60a5      	str	r5, [r4, #8]
 8003474:	bfa4      	itt	ge
 8003476:	f021 0104 	bicge.w	r1, r1, #4
 800347a:	6021      	strge	r1, [r4, #0]
 800347c:	b90e      	cbnz	r6, 8003482 <_printf_i+0x11a>
 800347e:	2d00      	cmp	r5, #0
 8003480:	d04d      	beq.n	800351e <_printf_i+0x1b6>
 8003482:	4615      	mov	r5, r2
 8003484:	fbb6 f1f3 	udiv	r1, r6, r3
 8003488:	fb03 6711 	mls	r7, r3, r1, r6
 800348c:	5dc7      	ldrb	r7, [r0, r7]
 800348e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003492:	4637      	mov	r7, r6
 8003494:	42bb      	cmp	r3, r7
 8003496:	460e      	mov	r6, r1
 8003498:	d9f4      	bls.n	8003484 <_printf_i+0x11c>
 800349a:	2b08      	cmp	r3, #8
 800349c:	d10b      	bne.n	80034b6 <_printf_i+0x14e>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	07de      	lsls	r6, r3, #31
 80034a2:	d508      	bpl.n	80034b6 <_printf_i+0x14e>
 80034a4:	6923      	ldr	r3, [r4, #16]
 80034a6:	6861      	ldr	r1, [r4, #4]
 80034a8:	4299      	cmp	r1, r3
 80034aa:	bfde      	ittt	le
 80034ac:	2330      	movle	r3, #48	; 0x30
 80034ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034b6:	1b52      	subs	r2, r2, r5
 80034b8:	6122      	str	r2, [r4, #16]
 80034ba:	464b      	mov	r3, r9
 80034bc:	4621      	mov	r1, r4
 80034be:	4640      	mov	r0, r8
 80034c0:	f8cd a000 	str.w	sl, [sp]
 80034c4:	aa03      	add	r2, sp, #12
 80034c6:	f7ff fedf 	bl	8003288 <_printf_common>
 80034ca:	3001      	adds	r0, #1
 80034cc:	d14c      	bne.n	8003568 <_printf_i+0x200>
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295
 80034d2:	b004      	add	sp, #16
 80034d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d8:	4834      	ldr	r0, [pc, #208]	; (80035ac <_printf_i+0x244>)
 80034da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80034de:	6829      	ldr	r1, [r5, #0]
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80034e6:	6029      	str	r1, [r5, #0]
 80034e8:	061d      	lsls	r5, r3, #24
 80034ea:	d514      	bpl.n	8003516 <_printf_i+0x1ae>
 80034ec:	07df      	lsls	r7, r3, #31
 80034ee:	bf44      	itt	mi
 80034f0:	f043 0320 	orrmi.w	r3, r3, #32
 80034f4:	6023      	strmi	r3, [r4, #0]
 80034f6:	b91e      	cbnz	r6, 8003500 <_printf_i+0x198>
 80034f8:	6823      	ldr	r3, [r4, #0]
 80034fa:	f023 0320 	bic.w	r3, r3, #32
 80034fe:	6023      	str	r3, [r4, #0]
 8003500:	2310      	movs	r3, #16
 8003502:	e7af      	b.n	8003464 <_printf_i+0xfc>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	f043 0320 	orr.w	r3, r3, #32
 800350a:	6023      	str	r3, [r4, #0]
 800350c:	2378      	movs	r3, #120	; 0x78
 800350e:	4828      	ldr	r0, [pc, #160]	; (80035b0 <_printf_i+0x248>)
 8003510:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003514:	e7e3      	b.n	80034de <_printf_i+0x176>
 8003516:	0659      	lsls	r1, r3, #25
 8003518:	bf48      	it	mi
 800351a:	b2b6      	uxthmi	r6, r6
 800351c:	e7e6      	b.n	80034ec <_printf_i+0x184>
 800351e:	4615      	mov	r5, r2
 8003520:	e7bb      	b.n	800349a <_printf_i+0x132>
 8003522:	682b      	ldr	r3, [r5, #0]
 8003524:	6826      	ldr	r6, [r4, #0]
 8003526:	1d18      	adds	r0, r3, #4
 8003528:	6961      	ldr	r1, [r4, #20]
 800352a:	6028      	str	r0, [r5, #0]
 800352c:	0635      	lsls	r5, r6, #24
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	d501      	bpl.n	8003536 <_printf_i+0x1ce>
 8003532:	6019      	str	r1, [r3, #0]
 8003534:	e002      	b.n	800353c <_printf_i+0x1d4>
 8003536:	0670      	lsls	r0, r6, #25
 8003538:	d5fb      	bpl.n	8003532 <_printf_i+0x1ca>
 800353a:	8019      	strh	r1, [r3, #0]
 800353c:	2300      	movs	r3, #0
 800353e:	4615      	mov	r5, r2
 8003540:	6123      	str	r3, [r4, #16]
 8003542:	e7ba      	b.n	80034ba <_printf_i+0x152>
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	2100      	movs	r1, #0
 8003548:	1d1a      	adds	r2, r3, #4
 800354a:	602a      	str	r2, [r5, #0]
 800354c:	681d      	ldr	r5, [r3, #0]
 800354e:	6862      	ldr	r2, [r4, #4]
 8003550:	4628      	mov	r0, r5
 8003552:	f000 f82f 	bl	80035b4 <memchr>
 8003556:	b108      	cbz	r0, 800355c <_printf_i+0x1f4>
 8003558:	1b40      	subs	r0, r0, r5
 800355a:	6060      	str	r0, [r4, #4]
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	6123      	str	r3, [r4, #16]
 8003560:	2300      	movs	r3, #0
 8003562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003566:	e7a8      	b.n	80034ba <_printf_i+0x152>
 8003568:	462a      	mov	r2, r5
 800356a:	4649      	mov	r1, r9
 800356c:	4640      	mov	r0, r8
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	47d0      	blx	sl
 8003572:	3001      	adds	r0, #1
 8003574:	d0ab      	beq.n	80034ce <_printf_i+0x166>
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	079b      	lsls	r3, r3, #30
 800357a:	d413      	bmi.n	80035a4 <_printf_i+0x23c>
 800357c:	68e0      	ldr	r0, [r4, #12]
 800357e:	9b03      	ldr	r3, [sp, #12]
 8003580:	4298      	cmp	r0, r3
 8003582:	bfb8      	it	lt
 8003584:	4618      	movlt	r0, r3
 8003586:	e7a4      	b.n	80034d2 <_printf_i+0x16a>
 8003588:	2301      	movs	r3, #1
 800358a:	4632      	mov	r2, r6
 800358c:	4649      	mov	r1, r9
 800358e:	4640      	mov	r0, r8
 8003590:	47d0      	blx	sl
 8003592:	3001      	adds	r0, #1
 8003594:	d09b      	beq.n	80034ce <_printf_i+0x166>
 8003596:	3501      	adds	r5, #1
 8003598:	68e3      	ldr	r3, [r4, #12]
 800359a:	9903      	ldr	r1, [sp, #12]
 800359c:	1a5b      	subs	r3, r3, r1
 800359e:	42ab      	cmp	r3, r5
 80035a0:	dcf2      	bgt.n	8003588 <_printf_i+0x220>
 80035a2:	e7eb      	b.n	800357c <_printf_i+0x214>
 80035a4:	2500      	movs	r5, #0
 80035a6:	f104 0619 	add.w	r6, r4, #25
 80035aa:	e7f5      	b.n	8003598 <_printf_i+0x230>
 80035ac:	0800391d 	.word	0x0800391d
 80035b0:	0800392e 	.word	0x0800392e

080035b4 <memchr>:
 80035b4:	4603      	mov	r3, r0
 80035b6:	b510      	push	{r4, lr}
 80035b8:	b2c9      	uxtb	r1, r1
 80035ba:	4402      	add	r2, r0
 80035bc:	4293      	cmp	r3, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	d101      	bne.n	80035c6 <memchr+0x12>
 80035c2:	2000      	movs	r0, #0
 80035c4:	e003      	b.n	80035ce <memchr+0x1a>
 80035c6:	7804      	ldrb	r4, [r0, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	428c      	cmp	r4, r1
 80035cc:	d1f6      	bne.n	80035bc <memchr+0x8>
 80035ce:	bd10      	pop	{r4, pc}

080035d0 <memcpy>:
 80035d0:	440a      	add	r2, r1
 80035d2:	4291      	cmp	r1, r2
 80035d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035d8:	d100      	bne.n	80035dc <memcpy+0xc>
 80035da:	4770      	bx	lr
 80035dc:	b510      	push	{r4, lr}
 80035de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035e2:	4291      	cmp	r1, r2
 80035e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035e8:	d1f9      	bne.n	80035de <memcpy+0xe>
 80035ea:	bd10      	pop	{r4, pc}

080035ec <memmove>:
 80035ec:	4288      	cmp	r0, r1
 80035ee:	b510      	push	{r4, lr}
 80035f0:	eb01 0402 	add.w	r4, r1, r2
 80035f4:	d902      	bls.n	80035fc <memmove+0x10>
 80035f6:	4284      	cmp	r4, r0
 80035f8:	4623      	mov	r3, r4
 80035fa:	d807      	bhi.n	800360c <memmove+0x20>
 80035fc:	1e43      	subs	r3, r0, #1
 80035fe:	42a1      	cmp	r1, r4
 8003600:	d008      	beq.n	8003614 <memmove+0x28>
 8003602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800360a:	e7f8      	b.n	80035fe <memmove+0x12>
 800360c:	4601      	mov	r1, r0
 800360e:	4402      	add	r2, r0
 8003610:	428a      	cmp	r2, r1
 8003612:	d100      	bne.n	8003616 <memmove+0x2a>
 8003614:	bd10      	pop	{r4, pc}
 8003616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800361a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800361e:	e7f7      	b.n	8003610 <memmove+0x24>

08003620 <_free_r>:
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	4605      	mov	r5, r0
 8003624:	2900      	cmp	r1, #0
 8003626:	d040      	beq.n	80036aa <_free_r+0x8a>
 8003628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800362c:	1f0c      	subs	r4, r1, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	bfb8      	it	lt
 8003632:	18e4      	addlt	r4, r4, r3
 8003634:	f000 f910 	bl	8003858 <__malloc_lock>
 8003638:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <_free_r+0x8c>)
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	b933      	cbnz	r3, 800364c <_free_r+0x2c>
 800363e:	6063      	str	r3, [r4, #4]
 8003640:	6014      	str	r4, [r2, #0]
 8003642:	4628      	mov	r0, r5
 8003644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003648:	f000 b90c 	b.w	8003864 <__malloc_unlock>
 800364c:	42a3      	cmp	r3, r4
 800364e:	d908      	bls.n	8003662 <_free_r+0x42>
 8003650:	6820      	ldr	r0, [r4, #0]
 8003652:	1821      	adds	r1, r4, r0
 8003654:	428b      	cmp	r3, r1
 8003656:	bf01      	itttt	eq
 8003658:	6819      	ldreq	r1, [r3, #0]
 800365a:	685b      	ldreq	r3, [r3, #4]
 800365c:	1809      	addeq	r1, r1, r0
 800365e:	6021      	streq	r1, [r4, #0]
 8003660:	e7ed      	b.n	800363e <_free_r+0x1e>
 8003662:	461a      	mov	r2, r3
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b10b      	cbz	r3, 800366c <_free_r+0x4c>
 8003668:	42a3      	cmp	r3, r4
 800366a:	d9fa      	bls.n	8003662 <_free_r+0x42>
 800366c:	6811      	ldr	r1, [r2, #0]
 800366e:	1850      	adds	r0, r2, r1
 8003670:	42a0      	cmp	r0, r4
 8003672:	d10b      	bne.n	800368c <_free_r+0x6c>
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	4401      	add	r1, r0
 8003678:	1850      	adds	r0, r2, r1
 800367a:	4283      	cmp	r3, r0
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	d1e0      	bne.n	8003642 <_free_r+0x22>
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4401      	add	r1, r0
 8003686:	6011      	str	r1, [r2, #0]
 8003688:	6053      	str	r3, [r2, #4]
 800368a:	e7da      	b.n	8003642 <_free_r+0x22>
 800368c:	d902      	bls.n	8003694 <_free_r+0x74>
 800368e:	230c      	movs	r3, #12
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	e7d6      	b.n	8003642 <_free_r+0x22>
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	1821      	adds	r1, r4, r0
 8003698:	428b      	cmp	r3, r1
 800369a:	bf01      	itttt	eq
 800369c:	6819      	ldreq	r1, [r3, #0]
 800369e:	685b      	ldreq	r3, [r3, #4]
 80036a0:	1809      	addeq	r1, r1, r0
 80036a2:	6021      	streq	r1, [r4, #0]
 80036a4:	6063      	str	r3, [r4, #4]
 80036a6:	6054      	str	r4, [r2, #4]
 80036a8:	e7cb      	b.n	8003642 <_free_r+0x22>
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	2000012c 	.word	0x2000012c

080036b0 <sbrk_aligned>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4e0e      	ldr	r6, [pc, #56]	; (80036ec <sbrk_aligned+0x3c>)
 80036b4:	460c      	mov	r4, r1
 80036b6:	6831      	ldr	r1, [r6, #0]
 80036b8:	4605      	mov	r5, r0
 80036ba:	b911      	cbnz	r1, 80036c2 <sbrk_aligned+0x12>
 80036bc:	f000 f8bc 	bl	8003838 <_sbrk_r>
 80036c0:	6030      	str	r0, [r6, #0]
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f8b7 	bl	8003838 <_sbrk_r>
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	d00a      	beq.n	80036e4 <sbrk_aligned+0x34>
 80036ce:	1cc4      	adds	r4, r0, #3
 80036d0:	f024 0403 	bic.w	r4, r4, #3
 80036d4:	42a0      	cmp	r0, r4
 80036d6:	d007      	beq.n	80036e8 <sbrk_aligned+0x38>
 80036d8:	1a21      	subs	r1, r4, r0
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 f8ac 	bl	8003838 <_sbrk_r>
 80036e0:	3001      	adds	r0, #1
 80036e2:	d101      	bne.n	80036e8 <sbrk_aligned+0x38>
 80036e4:	f04f 34ff 	mov.w	r4, #4294967295
 80036e8:	4620      	mov	r0, r4
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	20000130 	.word	0x20000130

080036f0 <_malloc_r>:
 80036f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f4:	1ccd      	adds	r5, r1, #3
 80036f6:	f025 0503 	bic.w	r5, r5, #3
 80036fa:	3508      	adds	r5, #8
 80036fc:	2d0c      	cmp	r5, #12
 80036fe:	bf38      	it	cc
 8003700:	250c      	movcc	r5, #12
 8003702:	2d00      	cmp	r5, #0
 8003704:	4607      	mov	r7, r0
 8003706:	db01      	blt.n	800370c <_malloc_r+0x1c>
 8003708:	42a9      	cmp	r1, r5
 800370a:	d905      	bls.n	8003718 <_malloc_r+0x28>
 800370c:	230c      	movs	r3, #12
 800370e:	2600      	movs	r6, #0
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	4630      	mov	r0, r6
 8003714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003718:	4e2e      	ldr	r6, [pc, #184]	; (80037d4 <_malloc_r+0xe4>)
 800371a:	f000 f89d 	bl	8003858 <__malloc_lock>
 800371e:	6833      	ldr	r3, [r6, #0]
 8003720:	461c      	mov	r4, r3
 8003722:	bb34      	cbnz	r4, 8003772 <_malloc_r+0x82>
 8003724:	4629      	mov	r1, r5
 8003726:	4638      	mov	r0, r7
 8003728:	f7ff ffc2 	bl	80036b0 <sbrk_aligned>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	4604      	mov	r4, r0
 8003730:	d14d      	bne.n	80037ce <_malloc_r+0xde>
 8003732:	6834      	ldr	r4, [r6, #0]
 8003734:	4626      	mov	r6, r4
 8003736:	2e00      	cmp	r6, #0
 8003738:	d140      	bne.n	80037bc <_malloc_r+0xcc>
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	4631      	mov	r1, r6
 800373e:	4638      	mov	r0, r7
 8003740:	eb04 0803 	add.w	r8, r4, r3
 8003744:	f000 f878 	bl	8003838 <_sbrk_r>
 8003748:	4580      	cmp	r8, r0
 800374a:	d13a      	bne.n	80037c2 <_malloc_r+0xd2>
 800374c:	6821      	ldr	r1, [r4, #0]
 800374e:	3503      	adds	r5, #3
 8003750:	1a6d      	subs	r5, r5, r1
 8003752:	f025 0503 	bic.w	r5, r5, #3
 8003756:	3508      	adds	r5, #8
 8003758:	2d0c      	cmp	r5, #12
 800375a:	bf38      	it	cc
 800375c:	250c      	movcc	r5, #12
 800375e:	4638      	mov	r0, r7
 8003760:	4629      	mov	r1, r5
 8003762:	f7ff ffa5 	bl	80036b0 <sbrk_aligned>
 8003766:	3001      	adds	r0, #1
 8003768:	d02b      	beq.n	80037c2 <_malloc_r+0xd2>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	442b      	add	r3, r5
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	e00e      	b.n	8003790 <_malloc_r+0xa0>
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	1b52      	subs	r2, r2, r5
 8003776:	d41e      	bmi.n	80037b6 <_malloc_r+0xc6>
 8003778:	2a0b      	cmp	r2, #11
 800377a:	d916      	bls.n	80037aa <_malloc_r+0xba>
 800377c:	1961      	adds	r1, r4, r5
 800377e:	42a3      	cmp	r3, r4
 8003780:	6025      	str	r5, [r4, #0]
 8003782:	bf18      	it	ne
 8003784:	6059      	strne	r1, [r3, #4]
 8003786:	6863      	ldr	r3, [r4, #4]
 8003788:	bf08      	it	eq
 800378a:	6031      	streq	r1, [r6, #0]
 800378c:	5162      	str	r2, [r4, r5]
 800378e:	604b      	str	r3, [r1, #4]
 8003790:	4638      	mov	r0, r7
 8003792:	f104 060b 	add.w	r6, r4, #11
 8003796:	f000 f865 	bl	8003864 <__malloc_unlock>
 800379a:	f026 0607 	bic.w	r6, r6, #7
 800379e:	1d23      	adds	r3, r4, #4
 80037a0:	1af2      	subs	r2, r6, r3
 80037a2:	d0b6      	beq.n	8003712 <_malloc_r+0x22>
 80037a4:	1b9b      	subs	r3, r3, r6
 80037a6:	50a3      	str	r3, [r4, r2]
 80037a8:	e7b3      	b.n	8003712 <_malloc_r+0x22>
 80037aa:	6862      	ldr	r2, [r4, #4]
 80037ac:	42a3      	cmp	r3, r4
 80037ae:	bf0c      	ite	eq
 80037b0:	6032      	streq	r2, [r6, #0]
 80037b2:	605a      	strne	r2, [r3, #4]
 80037b4:	e7ec      	b.n	8003790 <_malloc_r+0xa0>
 80037b6:	4623      	mov	r3, r4
 80037b8:	6864      	ldr	r4, [r4, #4]
 80037ba:	e7b2      	b.n	8003722 <_malloc_r+0x32>
 80037bc:	4634      	mov	r4, r6
 80037be:	6876      	ldr	r6, [r6, #4]
 80037c0:	e7b9      	b.n	8003736 <_malloc_r+0x46>
 80037c2:	230c      	movs	r3, #12
 80037c4:	4638      	mov	r0, r7
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	f000 f84c 	bl	8003864 <__malloc_unlock>
 80037cc:	e7a1      	b.n	8003712 <_malloc_r+0x22>
 80037ce:	6025      	str	r5, [r4, #0]
 80037d0:	e7de      	b.n	8003790 <_malloc_r+0xa0>
 80037d2:	bf00      	nop
 80037d4:	2000012c 	.word	0x2000012c

080037d8 <_realloc_r>:
 80037d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037dc:	4680      	mov	r8, r0
 80037de:	4614      	mov	r4, r2
 80037e0:	460e      	mov	r6, r1
 80037e2:	b921      	cbnz	r1, 80037ee <_realloc_r+0x16>
 80037e4:	4611      	mov	r1, r2
 80037e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ea:	f7ff bf81 	b.w	80036f0 <_malloc_r>
 80037ee:	b92a      	cbnz	r2, 80037fc <_realloc_r+0x24>
 80037f0:	f7ff ff16 	bl	8003620 <_free_r>
 80037f4:	4625      	mov	r5, r4
 80037f6:	4628      	mov	r0, r5
 80037f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037fc:	f000 f838 	bl	8003870 <_malloc_usable_size_r>
 8003800:	4284      	cmp	r4, r0
 8003802:	4607      	mov	r7, r0
 8003804:	d802      	bhi.n	800380c <_realloc_r+0x34>
 8003806:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800380a:	d812      	bhi.n	8003832 <_realloc_r+0x5a>
 800380c:	4621      	mov	r1, r4
 800380e:	4640      	mov	r0, r8
 8003810:	f7ff ff6e 	bl	80036f0 <_malloc_r>
 8003814:	4605      	mov	r5, r0
 8003816:	2800      	cmp	r0, #0
 8003818:	d0ed      	beq.n	80037f6 <_realloc_r+0x1e>
 800381a:	42bc      	cmp	r4, r7
 800381c:	4622      	mov	r2, r4
 800381e:	4631      	mov	r1, r6
 8003820:	bf28      	it	cs
 8003822:	463a      	movcs	r2, r7
 8003824:	f7ff fed4 	bl	80035d0 <memcpy>
 8003828:	4631      	mov	r1, r6
 800382a:	4640      	mov	r0, r8
 800382c:	f7ff fef8 	bl	8003620 <_free_r>
 8003830:	e7e1      	b.n	80037f6 <_realloc_r+0x1e>
 8003832:	4635      	mov	r5, r6
 8003834:	e7df      	b.n	80037f6 <_realloc_r+0x1e>
	...

08003838 <_sbrk_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	2300      	movs	r3, #0
 800383c:	4d05      	ldr	r5, [pc, #20]	; (8003854 <_sbrk_r+0x1c>)
 800383e:	4604      	mov	r4, r0
 8003840:	4608      	mov	r0, r1
 8003842:	602b      	str	r3, [r5, #0]
 8003844:	f7fd f8ee 	bl	8000a24 <_sbrk>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d102      	bne.n	8003852 <_sbrk_r+0x1a>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	b103      	cbz	r3, 8003852 <_sbrk_r+0x1a>
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	20000134 	.word	0x20000134

08003858 <__malloc_lock>:
 8003858:	4801      	ldr	r0, [pc, #4]	; (8003860 <__malloc_lock+0x8>)
 800385a:	f000 b811 	b.w	8003880 <__retarget_lock_acquire_recursive>
 800385e:	bf00      	nop
 8003860:	20000138 	.word	0x20000138

08003864 <__malloc_unlock>:
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <__malloc_unlock+0x8>)
 8003866:	f000 b80c 	b.w	8003882 <__retarget_lock_release_recursive>
 800386a:	bf00      	nop
 800386c:	20000138 	.word	0x20000138

08003870 <_malloc_usable_size_r>:
 8003870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003874:	1f18      	subs	r0, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfbc      	itt	lt
 800387a:	580b      	ldrlt	r3, [r1, r0]
 800387c:	18c0      	addlt	r0, r0, r3
 800387e:	4770      	bx	lr

08003880 <__retarget_lock_acquire_recursive>:
 8003880:	4770      	bx	lr

08003882 <__retarget_lock_release_recursive>:
 8003882:	4770      	bx	lr

08003884 <_init>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr

08003890 <_fini>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr

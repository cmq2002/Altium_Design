
lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800511c  0800511c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800511c  0800511c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800511c  0800511c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08005194  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08005194  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3f4  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002412  00000000  00000000  0002f48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00032890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e2e  00000000  00000000  000337b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dce  00000000  00000000  0004c5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0f1  00000000  00000000  0005e3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb49d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000475c  00000000  00000000  000eb4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005038 	.word	0x08005038

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005038 	.word	0x08005038

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <dht20_init>:

uint16_t value_x10[2] = {0, 0};
char temp[16], humid[16];
int status = INIT;

void dht20_init(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
	//Set register when call a wrong reset
	uint8_t init[3];

	init[0] = 0xA8;
 8000162:	23a8      	movs	r3, #168	; 0xa8
 8000164:	713b      	strb	r3, [r7, #4]
	init[1] = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800016a:	2300      	movs	r3, #0
 800016c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 800016e:	1d3a      	adds	r2, r7, #4
 8000170:	23ff      	movs	r3, #255	; 0xff
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	2303      	movs	r3, #3
 8000176:	2170      	movs	r1, #112	; 0x70
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <dht20_init+0x54>)
 800017a:	f001 fd79 	bl	8001c70 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800017e:	2014      	movs	r0, #20
 8000180:	f001 f89a 	bl	80012b8 <HAL_Delay>

	init[0] = 0xBE;
 8000184:	23be      	movs	r3, #190	; 0xbe
 8000186:	713b      	strb	r3, [r7, #4]
	init[1] = 0x08;
 8000188:	2308      	movs	r3, #8
 800018a:	717b      	strb	r3, [r7, #5]
	init[2] = 0x00;
 800018c:	2300      	movs	r3, #0
 800018e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) init, 3, 0xFF);
 8000190:	1d3a      	adds	r2, r7, #4
 8000192:	23ff      	movs	r3, #255	; 0xff
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2303      	movs	r3, #3
 8000198:	2170      	movs	r1, #112	; 0x70
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <dht20_init+0x54>)
 800019c:	f001 fd68 	bl	8001c70 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80001a0:	2014      	movs	r0, #20
 80001a2:	f001 f889 	bl	80012b8 <HAL_Delay>
}
 80001a6:	bf00      	nop
 80001a8:	3708      	adds	r7, #8
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	200000b4 	.word	0x200000b4

080001b4 <dht20_reset>:

void dht20_reset(uint8_t regist){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	//reset register
	uint8_t reset[3], reply[3];

	reset[0] = regist;
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	733b      	strb	r3, [r7, #12]
	reset[1] = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	737b      	strb	r3, [r7, #13]
	reset[2] = 0x00;
 80001c6:	2300      	movs	r3, #0
 80001c8:	73bb      	strb	r3, [r7, #14]
 	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 80001ca:	f107 020c 	add.w	r2, r7, #12
 80001ce:	23ff      	movs	r3, #255	; 0xff
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2303      	movs	r3, #3
 80001d4:	2170      	movs	r1, #112	; 0x70
 80001d6:	4814      	ldr	r0, [pc, #80]	; (8000228 <dht20_reset+0x74>)
 80001d8:	f001 fd4a 	bl	8001c70 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80001dc:	200a      	movs	r0, #10
 80001de:	f001 f86b 	bl	80012b8 <HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) reply, 3, 0xFF);
 80001e2:	f107 0208 	add.w	r2, r7, #8
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2303      	movs	r3, #3
 80001ec:	2171      	movs	r1, #113	; 0x71
 80001ee:	480e      	ldr	r0, [pc, #56]	; (8000228 <dht20_reset+0x74>)
 80001f0:	f001 fe3c 	bl	8001e6c <HAL_I2C_Master_Receive>
	reset[0] = 0xB0 | regist;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	733b      	strb	r3, [r7, #12]
	reset[1] = reply[1];
 80001fe:	7a7b      	ldrb	r3, [r7, #9]
 8000200:	737b      	strb	r3, [r7, #13]
	reset[2] = reply[2];
 8000202:	7abb      	ldrb	r3, [r7, #10]
 8000204:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(10);
 8000206:	200a      	movs	r0, #10
 8000208:	f001 f856 	bl	80012b8 <HAL_Delay>

	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) reset, 3, 0xFF);
 800020c:	f107 020c 	add.w	r2, r7, #12
 8000210:	23ff      	movs	r3, #255	; 0xff
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2303      	movs	r3, #3
 8000216:	2170      	movs	r1, #112	; 0x70
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <dht20_reset+0x74>)
 800021a:	f001 fd29 	bl	8001c70 <HAL_I2C_Master_Transmit>
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200000b4 	.word	0x200000b4

0800022c <dht20_start>:

void dht20_start(void){
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af02      	add	r7, sp, #8
	//query the DHT20
	uint8_t status[1];
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) status, 1, 0xFF);
 8000232:	1d3a      	adds	r2, r7, #4
 8000234:	23ff      	movs	r3, #255	; 0xff
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2301      	movs	r3, #1
 800023a:	2171      	movs	r1, #113	; 0x71
 800023c:	481b      	ldr	r0, [pc, #108]	; (80002ac <dht20_start+0x80>)
 800023e:	f001 fe15 	bl	8001e6c <HAL_I2C_Master_Receive>

	if((status[0] & 0x18) != 0x18){
 8000242:	793b      	ldrb	r3, [r7, #4]
 8000244:	f003 0318 	and.w	r3, r3, #24
 8000248:	2b18      	cmp	r3, #24
 800024a:	d00d      	beq.n	8000268 <dht20_start+0x3c>
		dht20_reset(0x1B);
 800024c:	201b      	movs	r0, #27
 800024e:	f7ff ffb1 	bl	80001b4 <dht20_reset>
		dht20_reset(0x1C);
 8000252:	201c      	movs	r0, #28
 8000254:	f7ff ffae 	bl	80001b4 <dht20_reset>
		dht20_reset(0x1E);
 8000258:	201e      	movs	r0, #30
 800025a:	f7ff ffab 	bl	80001b4 <dht20_reset>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2102      	movs	r1, #2
 8000262:	4813      	ldr	r0, [pc, #76]	; (80002b0 <dht20_start+0x84>)
 8000264:	f001 fb8e 	bl	8001984 <HAL_GPIO_WritePin>
	}

	if ((status[0] & 0x18) == 0x18){
 8000268:	793b      	ldrb	r3, [r7, #4]
 800026a:	f003 0318 	and.w	r3, r3, #24
 800026e:	2b18      	cmp	r3, #24
 8000270:	d104      	bne.n	800027c <dht20_start+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000272:	2201      	movs	r2, #1
 8000274:	2102      	movs	r1, #2
 8000276:	480e      	ldr	r0, [pc, #56]	; (80002b0 <dht20_start+0x84>)
 8000278:	f001 fb84 	bl	8001984 <HAL_GPIO_WritePin>
	}

	uint8_t data[3] = {0xAC, 0x33, 0x00};
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <dht20_start+0x88>)
 800027e:	463b      	mov	r3, r7
 8000280:	6812      	ldr	r2, [r2, #0]
 8000282:	4611      	mov	r1, r2
 8000284:	8019      	strh	r1, [r3, #0]
 8000286:	3302      	adds	r3, #2
 8000288:	0c12      	lsrs	r2, r2, #16
 800028a:	701a      	strb	r2, [r3, #0]

	//HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) trigger, 1, 0xFF);
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_DHT20, (uint8_t*) data, 3, 0xFF);
 800028c:	463a      	mov	r2, r7
 800028e:	23ff      	movs	r3, #255	; 0xff
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2303      	movs	r3, #3
 8000294:	2170      	movs	r1, #112	; 0x70
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <dht20_start+0x80>)
 8000298:	f001 fcea 	bl	8001c70 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 800029c:	2050      	movs	r0, #80	; 0x50
 800029e:	f001 f80b 	bl	80012b8 <HAL_Delay>
}
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000b4 	.word	0x200000b4
 80002b0:	40010800 	.word	0x40010800
 80002b4:	08005050 	.word	0x08005050

080002b8 <dht20_read>:

void dht20_read(uint16_t* value){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af02      	add	r7, sp, #8
 80002be:	6078      	str	r0, [r7, #4]
	dht20_start();
 80002c0:	f7ff ffb4 	bl	800022c <dht20_start>
	uint8_t data[7];
	uint32_t Temper = 0, Humid = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	2300      	movs	r3, #0
 80002ca:	613b      	str	r3, [r7, #16]
	HAL_I2C_Master_Receive(&hi2c1, SLAVE_ADDRESS_DHT20 | 0x01, (uint8_t*) data, 7, 0xFF);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	23ff      	movs	r3, #255	; 0xff
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2307      	movs	r3, #7
 80002d6:	2171      	movs	r1, #113	; 0x71
 80002d8:	4824      	ldr	r0, [pc, #144]	; (800036c <dht20_read+0xb4>)
 80002da:	f001 fdc7 	bl	8001e6c <HAL_I2C_Master_Receive>

	//Humid
	Humid = (Humid | data[1]) << 8;
 80002de:	7a7b      	ldrb	r3, [r7, #9]
 80002e0:	461a      	mov	r2, r3
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	613b      	str	r3, [r7, #16]
	Humid = (Humid | data[2]) << 8;
 80002ea:	7abb      	ldrb	r3, [r7, #10]
 80002ec:	461a      	mov	r2, r3
 80002ee:	693b      	ldr	r3, [r7, #16]
 80002f0:	4313      	orrs	r3, r2
 80002f2:	021b      	lsls	r3, r3, #8
 80002f4:	613b      	str	r3, [r7, #16]
	Humid = Humid | data[3];
 80002f6:	7afb      	ldrb	r3, [r7, #11]
 80002f8:	461a      	mov	r2, r3
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	613b      	str	r3, [r7, #16]
	Humid = Humid >> 4;
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	091b      	lsrs	r3, r3, #4
 8000304:	613b      	str	r3, [r7, #16]
    Humid = (Humid * 100 * 10 / 1024 / 1024);
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800030c:	fb02 f303 	mul.w	r3, r2, r3
 8000310:	0d1b      	lsrs	r3, r3, #20
 8000312:	613b      	str	r3, [r7, #16]
    value[0] = Humid;
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	b29a      	uxth	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	801a      	strh	r2, [r3, #0]

	//Temperature
    Temper = (Temper | data[3]) << 8;
 800031c:	7afb      	ldrb	r3, [r7, #11]
 800031e:	461a      	mov	r2, r3
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4313      	orrs	r3, r2
 8000324:	021b      	lsls	r3, r3, #8
 8000326:	617b      	str	r3, [r7, #20]
    Temper = (Temper | data[4]) << 8;
 8000328:	7b3b      	ldrb	r3, [r7, #12]
 800032a:	461a      	mov	r2, r3
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	4313      	orrs	r3, r2
 8000330:	021b      	lsls	r3, r3, #8
 8000332:	617b      	str	r3, [r7, #20]
    Temper = Temper | data[5];
 8000334:	7b7b      	ldrb	r3, [r7, #13]
 8000336:	461a      	mov	r2, r3
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	4313      	orrs	r3, r2
 800033c:	617b      	str	r3, [r7, #20]
    Temper = Temper & 0xfffff;
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000344:	617b      	str	r3, [r7, #20]
    Temper = Temper*200*10/1024/1024 - 500;
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800034c:	fb02 f303 	mul.w	r3, r2, r3
 8000350:	0d1b      	lsrs	r3, r3, #20
 8000352:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000356:	617b      	str	r3, [r7, #20]
	value[1] = Temper;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3302      	adds	r3, #2
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	b292      	uxth	r2, r2
 8000360:	801a      	strh	r2, [r3, #0]

}
 8000362:	bf00      	nop
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	200000b4 	.word	0x200000b4

08000370 <init_reading>:

void init_reading(void){
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	dht20_init();
 8000374:	f7ff fef2 	bl	800015c <dht20_init>
	dht20_read(value_x10);
 8000378:	4802      	ldr	r0, [pc, #8]	; (8000384 <init_reading+0x14>)
 800037a:	f7ff ff9d 	bl	80002b8 <dht20_read>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	2000008c 	.word	0x2000008c

08000388 <fsm_run>:

void fsm_run(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af02      	add	r7, sp, #8
	switch(status){
 800038e:	4b2a      	ldr	r3, [pc, #168]	; (8000438 <fsm_run+0xb0>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d002      	beq.n	800039c <fsm_run+0x14>
 8000396:	2b01      	cmp	r3, #1
 8000398:	d007      	beq.n	80003aa <fsm_run+0x22>
				sprintf(humid,"Humid: %01d.%d %%",value_x10[0]/10,value_x10[0]%10);
				setTimer1(300);
			}
			break;
		default:
			break;
 800039a:	e048      	b.n	800042e <fsm_run+0xa6>
			setTimer1(1);
 800039c:	2001      	movs	r0, #1
 800039e:	f000 faff 	bl	80009a0 <setTimer1>
			status = READ;
 80003a2:	4b25      	ldr	r3, [pc, #148]	; (8000438 <fsm_run+0xb0>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	601a      	str	r2, [r3, #0]
			break;
 80003a8:	e041      	b.n	800042e <fsm_run+0xa6>
			if (timer1_flag == 1){
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <fsm_run+0xb4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d13c      	bne.n	800042c <fsm_run+0xa4>
				dht20_read(value_x10);
 80003b2:	4823      	ldr	r0, [pc, #140]	; (8000440 <fsm_run+0xb8>)
 80003b4:	f7ff ff80 	bl	80002b8 <dht20_read>
				sprintf(temp, "Temp:  %d.%d %cC",value_x10[1]/10,value_x10[1]%10 ,0b11011111);
 80003b8:	4b21      	ldr	r3, [pc, #132]	; (8000440 <fsm_run+0xb8>)
 80003ba:	885b      	ldrh	r3, [r3, #2]
 80003bc:	4a21      	ldr	r2, [pc, #132]	; (8000444 <fsm_run+0xbc>)
 80003be:	fba2 2303 	umull	r2, r3, r2, r3
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <fsm_run+0xb8>)
 80003ca:	885a      	ldrh	r2, [r3, #2]
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <fsm_run+0xbc>)
 80003ce:	fba3 1302 	umull	r1, r3, r3, r2
 80003d2:	08d9      	lsrs	r1, r3, #3
 80003d4:	460b      	mov	r3, r1
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	440b      	add	r3, r1
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	b29b      	uxth	r3, r3
 80003e0:	461a      	mov	r2, r3
 80003e2:	23df      	movs	r3, #223	; 0xdf
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	4613      	mov	r3, r2
 80003e8:	4602      	mov	r2, r0
 80003ea:	4917      	ldr	r1, [pc, #92]	; (8000448 <fsm_run+0xc0>)
 80003ec:	4817      	ldr	r0, [pc, #92]	; (800044c <fsm_run+0xc4>)
 80003ee:	f004 f9a9 	bl	8004744 <siprintf>
				sprintf(humid,"Humid: %01d.%d %%",value_x10[0]/10,value_x10[0]%10);
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <fsm_run+0xb8>)
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	4a13      	ldr	r2, [pc, #76]	; (8000444 <fsm_run+0xbc>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	08db      	lsrs	r3, r3, #3
 80003fe:	b29b      	uxth	r3, r3
 8000400:	4618      	mov	r0, r3
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <fsm_run+0xb8>)
 8000404:	881a      	ldrh	r2, [r3, #0]
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <fsm_run+0xbc>)
 8000408:	fba3 1302 	umull	r1, r3, r3, r2
 800040c:	08d9      	lsrs	r1, r3, #3
 800040e:	460b      	mov	r3, r1
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	440b      	add	r3, r1
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	b29b      	uxth	r3, r3
 800041a:	4602      	mov	r2, r0
 800041c:	490c      	ldr	r1, [pc, #48]	; (8000450 <fsm_run+0xc8>)
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <fsm_run+0xcc>)
 8000420:	f004 f990 	bl	8004744 <siprintf>
				setTimer1(300);
 8000424:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000428:	f000 faba 	bl	80009a0 <setTimer1>
			break;
 800042c:	bf00      	nop
	}
	lcd_show_value();
 800042e:	f000 f8f9 	bl	8000624 <lcd_show_value>
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200000b0 	.word	0x200000b0
 800043c:	20000198 	.word	0x20000198
 8000440:	2000008c 	.word	0x2000008c
 8000444:	cccccccd 	.word	0xcccccccd
 8000448:	08005054 	.word	0x08005054
 800044c:	20000090 	.word	0x20000090
 8000450:	08005068 	.word	0x08005068
 8000454:	200000a0 	.word	0x200000a0

08000458 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x3F << 1)  // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af02      	add	r7, sp, #8
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	f023 030f 	bic.w	r3, r3, #15
 8000468:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	011b      	lsls	r3, r3, #4
 800046e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	f043 030c 	orr.w	r3, r3, #12
 8000476:	b2db      	uxtb	r3, r3
 8000478:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	f043 0308 	orr.w	r3, r3, #8
 8000480:	b2db      	uxtb	r3, r3
 8000482:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000484:	7bbb      	ldrb	r3, [r7, #14]
 8000486:	f043 030c 	orr.w	r3, r3, #12
 800048a:	b2db      	uxtb	r3, r3
 800048c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800048e:	7bbb      	ldrb	r3, [r7, #14]
 8000490:	f043 0308 	orr.w	r3, r3, #8
 8000494:	b2db      	uxtb	r3, r3
 8000496:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000498:	f107 0208 	add.w	r2, r7, #8
 800049c:	2364      	movs	r3, #100	; 0x64
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2304      	movs	r3, #4
 80004a2:	217e      	movs	r1, #126	; 0x7e
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <lcd_send_cmd+0x5c>)
 80004a6:	f001 fbe3 	bl	8001c70 <HAL_I2C_Master_Transmit>
}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000b4 	.word	0x200000b4

080004b8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af02      	add	r7, sp, #8
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	f023 030f 	bic.w	r3, r3, #15
 80004c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	011b      	lsls	r3, r3, #4
 80004ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	f043 030d 	orr.w	r3, r3, #13
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	f043 0309 	orr.w	r3, r3, #9
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80004e4:	7bbb      	ldrb	r3, [r7, #14]
 80004e6:	f043 030d 	orr.w	r3, r3, #13
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80004ee:	7bbb      	ldrb	r3, [r7, #14]
 80004f0:	f043 0309 	orr.w	r3, r3, #9
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004f8:	f107 0208 	add.w	r2, r7, #8
 80004fc:	2364      	movs	r3, #100	; 0x64
 80004fe:	9300      	str	r3, [sp, #0]
 8000500:	2304      	movs	r3, #4
 8000502:	217e      	movs	r1, #126	; 0x7e
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <lcd_send_data+0x5c>)
 8000506:	f001 fbb3 	bl	8001c70 <HAL_I2C_Master_Transmit>
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000b4 	.word	0x200000b4

08000518 <lcd_init>:

void lcd_init (void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800051c:	2033      	movs	r0, #51	; 0x33
 800051e:	f7ff ff9b 	bl	8000458 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000522:	2032      	movs	r0, #50	; 0x32
 8000524:	f7ff ff98 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000528:	2032      	movs	r0, #50	; 0x32
 800052a:	f000 fec5 	bl	80012b8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800052e:	2028      	movs	r0, #40	; 0x28
 8000530:	f7ff ff92 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000534:	2032      	movs	r0, #50	; 0x32
 8000536:	f000 febf 	bl	80012b8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800053a:	2001      	movs	r0, #1
 800053c:	f7ff ff8c 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000540:	2032      	movs	r0, #50	; 0x32
 8000542:	f000 feb9 	bl	80012b8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000546:	2006      	movs	r0, #6
 8000548:	f7ff ff86 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 800054c:	2032      	movs	r0, #50	; 0x32
 800054e:	f000 feb3 	bl	80012b8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000552:	200c      	movs	r0, #12
 8000554:	f7ff ff80 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000558:	2032      	movs	r0, #50	; 0x32
 800055a:	f000 fead 	bl	80012b8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800055e:	2002      	movs	r0, #2
 8000560:	f7ff ff7a 	bl	8000458 <lcd_send_cmd>
	HAL_Delay(50);
 8000564:	2032      	movs	r0, #50	; 0x32
 8000566:	f000 fea7 	bl	80012b8 <HAL_Delay>
	lcd_send_cmd (0x80);
 800056a:	2080      	movs	r0, #128	; 0x80
 800056c:	f7ff ff74 	bl	8000458 <lcd_send_cmd>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800057c:	e006      	b.n	800058c <lcd_send_string+0x18>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff ff96 	bl	80004b8 <lcd_send_data>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f4      	bne.n	800057e <lcd_send_string+0xa>
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <lcd_clear_display>:

void lcd_clear_display (void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80005a2:	2001      	movs	r0, #1
 80005a4:	f7ff ff58 	bl	8000458 <lcd_send_cmd>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 0)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d108      	bne.n	80005ce <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row  + col;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4413      	add	r3, r2
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	3b80      	subs	r3, #128	; 0x80
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e008      	b.n	80005e0 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	3340      	adds	r3, #64	; 0x40
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	b25b      	sxtb	r3, r3
 80005d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff38 	bl	8000458 <lcd_send_cmd>
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <lcd_greeting>:

void lcd_greeting (void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	  lcd_clear_display();
 80005f4:	f7ff ffd3 	bl	800059e <lcd_clear_display>
	  lcd_init();
 80005f8:	f7ff ff8e 	bl	8000518 <lcd_init>
	  lcd_goto_XY(0, 0);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ffd4 	bl	80005ac <lcd_goto_XY>
	  lcd_send_string("HCMUT Dev Team");
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <lcd_greeting+0x2c>)
 8000606:	f7ff ffb5 	bl	8000574 <lcd_send_string>
	  lcd_goto_XY(1, 0);
 800060a:	2100      	movs	r1, #0
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff ffcd 	bl	80005ac <lcd_goto_XY>
	  lcd_send_string("Waiting...");
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <lcd_greeting+0x30>)
 8000614:	f7ff ffae 	bl	8000574 <lcd_send_string>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	0800507c 	.word	0x0800507c
 8000620:	0800508c 	.word	0x0800508c

08000624 <lcd_show_value>:

void lcd_show_value(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	  lcd_goto_XY(0, 0);
 8000628:	2100      	movs	r1, #0
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffbe 	bl	80005ac <lcd_goto_XY>
	  lcd_send_string(humid);
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <lcd_show_value+0x24>)
 8000632:	f7ff ff9f 	bl	8000574 <lcd_send_string>
	  lcd_goto_XY(1, 0);
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff ffb7 	bl	80005ac <lcd_goto_XY>
	  lcd_send_string(temp);
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <lcd_show_value+0x28>)
 8000640:	f7ff ff98 	bl	8000574 <lcd_send_string>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000a0 	.word	0x200000a0
 800064c:	20000090 	.word	0x20000090

08000650 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <HAL_UART_RxCpltCallback+0x50>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d119      	bne.n	8000696 <HAL_UART_RxCpltCallback+0x46>
//		HAL_UART_Transmit(&huart2, &buffer_byte, 1, 500);
		buffer[index_buffer] = buffer_byte;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <HAL_UART_RxCpltCallback+0x54>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <HAL_UART_RxCpltCallback+0x58>)
 8000668:	7811      	ldrb	r1, [r2, #0]
 800066a:	4a10      	ldr	r2, [pc, #64]	; (80006ac <HAL_UART_RxCpltCallback+0x5c>)
 800066c:	54d1      	strb	r1, [r2, r3]
		index_buffer++;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <HAL_UART_RxCpltCallback+0x54>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <HAL_UART_RxCpltCallback+0x54>)
 8000676:	6013      	str	r3, [r2, #0]
		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_UART_RxCpltCallback+0x54>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b1e      	cmp	r3, #30
 800067e:	d102      	bne.n	8000686 <HAL_UART_RxCpltCallback+0x36>
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_UART_RxCpltCallback+0x54>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
		buffer_flag = 1;
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_UART_RxCpltCallback+0x60>)
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	4906      	ldr	r1, [pc, #24]	; (80006a8 <HAL_UART_RxCpltCallback+0x58>)
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <HAL_UART_RxCpltCallback+0x64>)
 8000692:	f003 fb98 	bl	8003dc6 <HAL_UART_Receive_IT>
	}
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40004400 	.word	0x40004400
 80006a4:	2000020c 	.word	0x2000020c
 80006a8:	200001e8 	.word	0x200001e8
 80006ac:	200001ec 	.word	0x200001ec
 80006b0:	20000210 	.word	0x20000210
 80006b4:	20000150 	.word	0x20000150

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f000 fd9a 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f82a 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f912 	bl	80008ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c8:	f000 f86c 	bl	80007a4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006cc:	f000 f8e4 	bl	8000898 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006d0:	f000 f896 	bl	8000800 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <main+0x50>)
 80006d6:	f002 feed 	bl	80034b4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	490b      	ldr	r1, [pc, #44]	; (800070c <main+0x54>)
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <main+0x58>)
 80006e0:	f003 fb71 	bl	8003dc6 <HAL_UART_Receive_IT>
  Scan_Addr(); //Scan the address of I2C device
 80006e4:	f000 fcfe 	bl	80010e4 <Scan_Addr>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_greeting();
 80006e8:	f7ff ff82 	bl	80005f0 <lcd_greeting>
  init_reading();
 80006ec:	f7ff fe40 	bl	8000370 <init_reading>
  while (1)
  {
	  if (buffer_flag == 1){
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <main+0x5c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d104      	bne.n	8000702 <main+0x4a>
		  cmd_parser_fsm();
 80006f8:	f000 fbb8 	bl	8000e6c <cmd_parser_fsm>
		  buffer_flag = 0;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <main+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	  }
	  uart_comms_fsm();
 8000702:	f000 fcc7 	bl	8001094 <uart_comms_fsm>
	  if (buffer_flag == 1){
 8000706:	e7f3      	b.n	80006f0 <main+0x38>
 8000708:	20000108 	.word	0x20000108
 800070c:	200001e8 	.word	0x200001e8
 8000710:	20000150 	.word	0x20000150
 8000714:	20000210 	.word	0x20000210

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b090      	sub	sp, #64	; 0x40
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0318 	add.w	r3, r7, #24
 8000722:	2228      	movs	r2, #40	; 0x28
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 ffd0 	bl	80046cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073a:	2301      	movs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000742:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000756:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fa3d 	bl	8002be0 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800076c:	f000 f912 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fcaa 	bl	80030e4 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000796:	f000 f8fd 	bl	8000994 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3740      	adds	r7, #64	; 0x40
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <MX_I2C1_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_I2C1_Init+0x58>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_I2C1_Init+0x50>)
 80007e2:	f001 f901 	bl	80019e8 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 f8d2 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000b4 	.word	0x200000b4
 80007f8:	40005400 	.word	0x40005400
 80007fc:	000186a0 	.word	0x000186a0

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_TIM2_Init+0x94>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_TIM2_Init+0x94>)
 8000826:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800082a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_TIM2_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_TIM2_Init+0x94>)
 8000834:	2209      	movs	r2, #9
 8000836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_TIM2_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM2_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_TIM2_Init+0x94>)
 8000846:	f002 fde5 	bl	8003414 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000850:	f000 f8a0 	bl	8000994 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4619      	mov	r1, r3
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <MX_TIM2_Init+0x94>)
 8000862:	f002 ff81 	bl	8003768 <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 f892 	bl	8000994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_TIM2_Init+0x94>)
 800087e:	f003 f953 	bl	8003b28 <HAL_TIMEx_MasterConfigSynchronization>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000888:	f000 f884 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000108 	.word	0x20000108

08000898 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <MX_USART2_UART_Init+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f003 f99a 	bl	8003c08 <HAL_UART_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008da:	f000 f85b 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000150 	.word	0x20000150
 80008e8:	40004400 	.word	0x40004400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_GPIO_Init+0x8c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_GPIO_Init+0x8c>)
 8000906:	f043 0320 	orr.w	r3, r3, #32
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_GPIO_Init+0x8c>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_GPIO_Init+0x8c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a16      	ldr	r2, [pc, #88]	; (8000978 <MX_GPIO_Init+0x8c>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_GPIO_Init+0x8c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_GPIO_Init+0x8c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a10      	ldr	r2, [pc, #64]	; (8000978 <MX_GPIO_Init+0x8c>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_GPIO_Init+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2102      	movs	r1, #2
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <MX_GPIO_Init+0x90>)
 800094e:	f001 f819 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000952:	2302      	movs	r3, #2
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2302      	movs	r3, #2
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_GPIO_Init+0x90>)
 800096a:	f000 fe87 	bl	800167c <HAL_GPIO_Init>

}
 800096e:	bf00      	nop
 8000970:	3720      	adds	r7, #32
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800

08000980 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	timerRun();
 8000988:	f000 f832 	bl	80009f0 <timerRun>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <setTimer1>:
int timer9_flag = 0;

int timer10_counter = 0;
int timer10_flag = 0;

void setTimer1(int duration){
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80009a8:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <setTimer1+0x20>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <setTimer1+0x24>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000194 	.word	0x20000194
 80009c4:	20000198 	.word	0x20000198

080009c8 <setTimer2>:

void setTimer2(int duration){
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <setTimer2+0x20>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <setTimer2+0x24>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2000019c 	.word	0x2000019c
 80009ec:	200001a0 	.word	0x200001a0

080009f0 <timerRun>:
void setTimer10(int duration){
	timer10_counter = duration;
	timer10_flag = 0;
}

void timerRun(){
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80009f4:	4b51      	ldr	r3, [pc, #324]	; (8000b3c <timerRun+0x14c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	dd0b      	ble.n	8000a14 <timerRun+0x24>
		timer1_counter--;
 80009fc:	4b4f      	ldr	r3, [pc, #316]	; (8000b3c <timerRun+0x14c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a4e      	ldr	r2, [pc, #312]	; (8000b3c <timerRun+0x14c>)
 8000a04:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000a06:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <timerRun+0x14c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d102      	bne.n	8000a14 <timerRun+0x24>
			timer1_flag = 1;
 8000a0e:	4b4c      	ldr	r3, [pc, #304]	; (8000b40 <timerRun+0x150>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000a14:	4b4b      	ldr	r3, [pc, #300]	; (8000b44 <timerRun+0x154>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dd0b      	ble.n	8000a34 <timerRun+0x44>
		timer2_counter--;
 8000a1c:	4b49      	ldr	r3, [pc, #292]	; (8000b44 <timerRun+0x154>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	4a48      	ldr	r2, [pc, #288]	; (8000b44 <timerRun+0x154>)
 8000a24:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000a26:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <timerRun+0x154>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <timerRun+0x44>
			timer2_flag = 1;
 8000a2e:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <timerRun+0x158>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <timerRun+0x15c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	dd0b      	ble.n	8000a54 <timerRun+0x64>
		timer3_counter--;
 8000a3c:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <timerRun+0x15c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <timerRun+0x15c>)
 8000a44:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000a46:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <timerRun+0x15c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <timerRun+0x64>
			timer3_flag = 1;
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <timerRun+0x160>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8000a54:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <timerRun+0x164>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dd0b      	ble.n	8000a74 <timerRun+0x84>
		timer4_counter--;
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <timerRun+0x164>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	4a3c      	ldr	r2, [pc, #240]	; (8000b54 <timerRun+0x164>)
 8000a64:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000a66:	4b3b      	ldr	r3, [pc, #236]	; (8000b54 <timerRun+0x164>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d102      	bne.n	8000a74 <timerRun+0x84>
			timer4_flag = 1;
 8000a6e:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <timerRun+0x168>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8000a74:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <timerRun+0x16c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	dd0b      	ble.n	8000a94 <timerRun+0xa4>
		timer5_counter--;
 8000a7c:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <timerRun+0x16c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	4a36      	ldr	r2, [pc, #216]	; (8000b5c <timerRun+0x16c>)
 8000a84:	6013      	str	r3, [r2, #0]
		if(timer5_counter == 0){
 8000a86:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <timerRun+0x16c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <timerRun+0xa4>
			timer5_flag = 1;
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <timerRun+0x170>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8000a94:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <timerRun+0x174>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	dd0b      	ble.n	8000ab4 <timerRun+0xc4>
		timer6_counter--;
 8000a9c:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <timerRun+0x174>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a30      	ldr	r2, [pc, #192]	; (8000b64 <timerRun+0x174>)
 8000aa4:	6013      	str	r3, [r2, #0]
		if(timer6_counter == 0){
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <timerRun+0x174>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <timerRun+0xc4>
			timer6_flag = 1;
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <timerRun+0x178>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer7_counter > 0){
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <timerRun+0x17c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	dd0b      	ble.n	8000ad4 <timerRun+0xe4>
		timer7_counter--;
 8000abc:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <timerRun+0x17c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	4a2a      	ldr	r2, [pc, #168]	; (8000b6c <timerRun+0x17c>)
 8000ac4:	6013      	str	r3, [r2, #0]
		if(timer7_counter == 0){
 8000ac6:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <timerRun+0x17c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <timerRun+0xe4>
			timer7_flag = 1;
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <timerRun+0x180>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer8_counter > 0){
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <timerRun+0x184>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dd0b      	ble.n	8000af4 <timerRun+0x104>
		timer8_counter--;
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <timerRun+0x184>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <timerRun+0x184>)
 8000ae4:	6013      	str	r3, [r2, #0]
		if(timer8_counter == 0){
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <timerRun+0x184>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <timerRun+0x104>
			timer8_flag = 1;
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <timerRun+0x188>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer9_counter > 0){
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <timerRun+0x18c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	dd0b      	ble.n	8000b14 <timerRun+0x124>
		timer9_counter--;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <timerRun+0x18c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4a1e      	ldr	r2, [pc, #120]	; (8000b7c <timerRun+0x18c>)
 8000b04:	6013      	str	r3, [r2, #0]
		if(timer9_counter == 0){
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <timerRun+0x18c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <timerRun+0x124>
			timer9_flag = 1;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <timerRun+0x190>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer10_counter > 0){
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <timerRun+0x194>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dd0b      	ble.n	8000b34 <timerRun+0x144>
		timer10_counter--;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <timerRun+0x194>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	4a18      	ldr	r2, [pc, #96]	; (8000b84 <timerRun+0x194>)
 8000b24:	6013      	str	r3, [r2, #0]
		if(timer10_counter == 0){
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <timerRun+0x194>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <timerRun+0x144>
			timer10_flag = 1;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <timerRun+0x198>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000194 	.word	0x20000194
 8000b40:	20000198 	.word	0x20000198
 8000b44:	2000019c 	.word	0x2000019c
 8000b48:	200001a0 	.word	0x200001a0
 8000b4c:	200001a4 	.word	0x200001a4
 8000b50:	200001a8 	.word	0x200001a8
 8000b54:	200001ac 	.word	0x200001ac
 8000b58:	200001b0 	.word	0x200001b0
 8000b5c:	200001b4 	.word	0x200001b4
 8000b60:	200001b8 	.word	0x200001b8
 8000b64:	200001bc 	.word	0x200001bc
 8000b68:	200001c0 	.word	0x200001c0
 8000b6c:	200001c4 	.word	0x200001c4
 8000b70:	200001c8 	.word	0x200001c8
 8000b74:	200001cc 	.word	0x200001cc
 8000b78:	200001d0 	.word	0x200001d0
 8000b7c:	200001d4 	.word	0x200001d4
 8000b80:	200001d8 	.word	0x200001d8
 8000b84:	200001dc 	.word	0x200001dc
 8000b88:	200001e0 	.word	0x200001e0

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_MspInit+0x5c>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <HAL_MspInit+0x5c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_MspInit+0x5c>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_MspInit+0x5c>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_MspInit+0x5c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_MspInit+0x5c>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_MspInit+0x60>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_MspInit+0x60>)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010000 	.word	0x40010000

08000bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <HAL_I2C_MspInit+0x90>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d132      	bne.n	8000c76 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4812      	ldr	r0, [pc, #72]	; (8000c88 <HAL_I2C_MspInit+0x98>)
 8000c3e:	f000 fd1d 	bl	800167c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_I2C_MspInit+0x9c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <HAL_I2C_MspInit+0x9c>)
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_I2C_MspInit+0x94>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	; 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40010000 	.word	0x40010000

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca0:	d113      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	61d3      	str	r3, [r2, #28]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_TIM_Base_MspInit+0x44>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	201c      	movs	r0, #28
 8000cc0:	f000 fbf5 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc4:	201c      	movs	r0, #28
 8000cc6:	f000 fc0e 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_UART_MspInit+0x98>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d137      	bne.n	8000d68 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_UART_MspInit+0x9c>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <HAL_UART_MspInit+0x9c>)
 8000cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d02:	61d3      	str	r3, [r2, #28]
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_UART_MspInit+0x9c>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_UART_MspInit+0x9c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_UART_MspInit+0x9c>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_UART_MspInit+0x9c>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480f      	ldr	r0, [pc, #60]	; (8000d78 <HAL_UART_MspInit+0xa0>)
 8000d3c:	f000 fc9e 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d40:	2308      	movs	r3, #8
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	4809      	ldr	r0, [pc, #36]	; (8000d78 <HAL_UART_MspInit+0xa0>)
 8000d54:	f000 fc92 	bl	800167c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2026      	movs	r0, #38	; 0x26
 8000d5e:	f000 fba6 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d62:	2026      	movs	r0, #38	; 0x26
 8000d64:	f000 fbbf 	bl	80014e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40004400 	.word	0x40004400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010800 	.word	0x40010800

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 fa5d 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM2_IRQHandler+0x10>)
 8000dd2:	f002 fbc1 	bl	8003558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000108 	.word	0x20000108

08000de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <USART2_IRQHandler+0x10>)
 8000de6:	f003 f81f 	bl	8003e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000150 	.word	0x20000150

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f003 fc28 	bl	8004678 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20005000 	.word	0x20005000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200001e4 	.word	0x200001e4
 8000e5c:	20000238 	.word	0x20000238

08000e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <cmd_parser_fsm>:
//Locally use
int cmdParserStatus = IDLE;
int cmd_index = 0;

void cmd_parser_fsm()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	switch (cmdParserStatus)
 8000e70:	4b81      	ldr	r3, [pc, #516]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	f200 80ee 	bhi.w	8001056 <cmd_parser_fsm+0x1ea>
 8000e7a:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <cmd_parser_fsm+0x14>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e9d 	.word	0x08000e9d
 8000e84:	08000ed1 	.word	0x08000ed1
 8000e88:	08000f21 	.word	0x08000f21
 8000e8c:	08000f5d 	.word	0x08000f5d
 8000e90:	08000f9d 	.word	0x08000f9d
 8000e94:	08000fd7 	.word	0x08000fd7
 8000e98:	08001011 	.word	0x08001011
	{
	case IDLE:
		if (buffer[cmd_index] == '!')
 8000e9c:	4b77      	ldr	r3, [pc, #476]	; (800107c <cmd_parser_fsm+0x210>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a77      	ldr	r2, [pc, #476]	; (8001080 <cmd_parser_fsm+0x214>)
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	2b21      	cmp	r3, #33	; 0x21
 8000ea6:	d102      	bne.n	8000eae <cmd_parser_fsm+0x42>
		{
			cmdParserStatus = CMD_WAITING;
 8000ea8:	4b73      	ldr	r3, [pc, #460]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]
		}
		cmd_index++;
 8000eae:	4b73      	ldr	r3, [pc, #460]	; (800107c <cmd_parser_fsm+0x210>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a71      	ldr	r2, [pc, #452]	; (800107c <cmd_parser_fsm+0x210>)
 8000eb6:	6013      	str	r3, [r2, #0]
		if (buffer_flag == 0)
 8000eb8:	4b72      	ldr	r3, [pc, #456]	; (8001084 <cmd_parser_fsm+0x218>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 80cc 	bne.w	800105a <cmd_parser_fsm+0x1ee>
		{
			index_buffer = 0;
 8000ec2:	4b71      	ldr	r3, [pc, #452]	; (8001088 <cmd_parser_fsm+0x21c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
			cmd_index = 0;
 8000ec8:	4b6c      	ldr	r3, [pc, #432]	; (800107c <cmd_parser_fsm+0x210>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ece:	e0c4      	b.n	800105a <cmd_parser_fsm+0x1ee>
	case CMD_WAITING:
		if (buffer[cmd_index] == 'O')
 8000ed0:	4b6a      	ldr	r3, [pc, #424]	; (800107c <cmd_parser_fsm+0x210>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a6a      	ldr	r2, [pc, #424]	; (8001080 <cmd_parser_fsm+0x214>)
 8000ed6:	5cd3      	ldrb	r3, [r2, r3]
 8000ed8:	2b4f      	cmp	r3, #79	; 0x4f
 8000eda:	d103      	bne.n	8000ee4 <cmd_parser_fsm+0x78>
		{
			cmdParserStatus = CMD_WAITING_O;
 8000edc:	4b66      	ldr	r3, [pc, #408]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000ede:	2202      	movs	r2, #2
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	e00c      	b.n	8000efe <cmd_parser_fsm+0x92>
		}
		else if (buffer[cmd_index] == 'R')
 8000ee4:	4b65      	ldr	r3, [pc, #404]	; (800107c <cmd_parser_fsm+0x210>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a65      	ldr	r2, [pc, #404]	; (8001080 <cmd_parser_fsm+0x214>)
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	2b52      	cmp	r3, #82	; 0x52
 8000eee:	d103      	bne.n	8000ef8 <cmd_parser_fsm+0x8c>
		{
			cmdParserStatus = CMD_WAITING_R;
 8000ef0:	4b61      	ldr	r3, [pc, #388]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e002      	b.n	8000efe <cmd_parser_fsm+0x92>
		}
		else cmdParserStatus = IDLE;
 8000ef8:	4b5f      	ldr	r3, [pc, #380]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
		cmd_index++;
 8000efe:	4b5f      	ldr	r3, [pc, #380]	; (800107c <cmd_parser_fsm+0x210>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a5d      	ldr	r2, [pc, #372]	; (800107c <cmd_parser_fsm+0x210>)
 8000f06:	6013      	str	r3, [r2, #0]
		if (buffer_flag == 0)
 8000f08:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <cmd_parser_fsm+0x218>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f040 80a6 	bne.w	800105e <cmd_parser_fsm+0x1f2>
		{
			index_buffer = 0;
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <cmd_parser_fsm+0x21c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
			cmd_index = 0;
 8000f18:	4b58      	ldr	r3, [pc, #352]	; (800107c <cmd_parser_fsm+0x210>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f1e:	e09e      	b.n	800105e <cmd_parser_fsm+0x1f2>
//-----------------------------------------------------
	case CMD_WAITING_O:
		if (buffer[cmd_index] == 'K')
 8000f20:	4b56      	ldr	r3, [pc, #344]	; (800107c <cmd_parser_fsm+0x210>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a56      	ldr	r2, [pc, #344]	; (8001080 <cmd_parser_fsm+0x214>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	2b4b      	cmp	r3, #75	; 0x4b
 8000f2a:	d103      	bne.n	8000f34 <cmd_parser_fsm+0xc8>
		{
			cmdParserStatus = CMD_WAITING_OK;
 8000f2c:	4b52      	ldr	r3, [pc, #328]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000f2e:	2203      	movs	r2, #3
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e002      	b.n	8000f3a <cmd_parser_fsm+0xce>
		}
		else cmdParserStatus = IDLE;
 8000f34:	4b50      	ldr	r3, [pc, #320]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
		cmd_index++;
 8000f3a:	4b50      	ldr	r3, [pc, #320]	; (800107c <cmd_parser_fsm+0x210>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	4a4e      	ldr	r2, [pc, #312]	; (800107c <cmd_parser_fsm+0x210>)
 8000f42:	6013      	str	r3, [r2, #0]
		if (buffer_flag == 0)
 8000f44:	4b4f      	ldr	r3, [pc, #316]	; (8001084 <cmd_parser_fsm+0x218>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f040 808a 	bne.w	8001062 <cmd_parser_fsm+0x1f6>
		{
			index_buffer = 0;
 8000f4e:	4b4e      	ldr	r3, [pc, #312]	; (8001088 <cmd_parser_fsm+0x21c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
			cmd_index = 0;
 8000f54:	4b49      	ldr	r3, [pc, #292]	; (800107c <cmd_parser_fsm+0x210>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f5a:	e082      	b.n	8001062 <cmd_parser_fsm+0x1f6>
	case CMD_WAITING_OK:
		if (buffer[cmd_index] == '#')
 8000f5c:	4b47      	ldr	r3, [pc, #284]	; (800107c <cmd_parser_fsm+0x210>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a47      	ldr	r2, [pc, #284]	; (8001080 <cmd_parser_fsm+0x214>)
 8000f62:	5cd3      	ldrb	r3, [r2, r3]
 8000f64:	2b23      	cmp	r3, #35	; 0x23
 8000f66:	d106      	bne.n	8000f76 <cmd_parser_fsm+0x10a>
		{
			isOK = 1;
 8000f68:	4b48      	ldr	r3, [pc, #288]	; (800108c <cmd_parser_fsm+0x220>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
			cmdParserStatus = IDLE;
 8000f6e:	4b42      	ldr	r3, [pc, #264]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e002      	b.n	8000f7c <cmd_parser_fsm+0x110>
		}
		else cmdParserStatus = IDLE;
 8000f76:	4b40      	ldr	r3, [pc, #256]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
		cmd_index++;
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	; (800107c <cmd_parser_fsm+0x210>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	4a3e      	ldr	r2, [pc, #248]	; (800107c <cmd_parser_fsm+0x210>)
 8000f84:	6013      	str	r3, [r2, #0]
		if (buffer_flag == 0)
 8000f86:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <cmd_parser_fsm+0x218>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d16b      	bne.n	8001066 <cmd_parser_fsm+0x1fa>
		{
			index_buffer = 0;
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	; (8001088 <cmd_parser_fsm+0x21c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
			cmd_index = 0;
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <cmd_parser_fsm+0x210>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f9a:	e064      	b.n	8001066 <cmd_parser_fsm+0x1fa>
//-----------------------------------------------------
	case CMD_WAITING_R:
		if (buffer[cmd_index] == 'S')
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <cmd_parser_fsm+0x210>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a37      	ldr	r2, [pc, #220]	; (8001080 <cmd_parser_fsm+0x214>)
 8000fa2:	5cd3      	ldrb	r3, [r2, r3]
 8000fa4:	2b53      	cmp	r3, #83	; 0x53
 8000fa6:	d103      	bne.n	8000fb0 <cmd_parser_fsm+0x144>
		{
			cmdParserStatus = CMD_WAITING_RS;
 8000fa8:	4b33      	ldr	r3, [pc, #204]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000faa:	2205      	movs	r2, #5
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e002      	b.n	8000fb6 <cmd_parser_fsm+0x14a>
		}
		else cmdParserStatus = IDLE;
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
		cmd_index++;
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <cmd_parser_fsm+0x210>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a2f      	ldr	r2, [pc, #188]	; (800107c <cmd_parser_fsm+0x210>)
 8000fbe:	6013      	str	r3, [r2, #0]
		if (buffer_flag == 0)
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <cmd_parser_fsm+0x218>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d150      	bne.n	800106a <cmd_parser_fsm+0x1fe>
		{
			index_buffer = 0;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <cmd_parser_fsm+0x21c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
			cmd_index = 0;
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <cmd_parser_fsm+0x210>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
		}
		break;
 8000fd4:	e049      	b.n	800106a <cmd_parser_fsm+0x1fe>
	case CMD_WAITING_RS:
		if (buffer[cmd_index] == 'T')
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <cmd_parser_fsm+0x210>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <cmd_parser_fsm+0x214>)
 8000fdc:	5cd3      	ldrb	r3, [r2, r3]
 8000fde:	2b54      	cmp	r3, #84	; 0x54
 8000fe0:	d103      	bne.n	8000fea <cmd_parser_fsm+0x17e>
		{
			cmdParserStatus = CMD_WAITING_RST;
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000fe4:	2206      	movs	r2, #6
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e002      	b.n	8000ff0 <cmd_parser_fsm+0x184>
		}
		else cmdParserStatus = IDLE;
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <cmd_parser_fsm+0x20c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
		cmd_index++;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <cmd_parser_fsm+0x210>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <cmd_parser_fsm+0x210>)
 8000ff8:	6013      	str	r3, [r2, #0]
		if (buffer_flag == 0)
 8000ffa:	4b22      	ldr	r3, [pc, #136]	; (8001084 <cmd_parser_fsm+0x218>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d135      	bne.n	800106e <cmd_parser_fsm+0x202>
		{
			index_buffer = 0;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <cmd_parser_fsm+0x21c>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
			cmd_index = 0;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <cmd_parser_fsm+0x210>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
		}
		break;
 800100e:	e02e      	b.n	800106e <cmd_parser_fsm+0x202>
	case CMD_WAITING_RST:
		if (buffer[cmd_index] == '#')
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <cmd_parser_fsm+0x210>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <cmd_parser_fsm+0x214>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	2b23      	cmp	r3, #35	; 0x23
 800101a:	d109      	bne.n	8001030 <cmd_parser_fsm+0x1c4>
		{
			isRST = 1;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <cmd_parser_fsm+0x224>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
			setTimer2(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff fcd0 	bl	80009c8 <setTimer2>
			cmdParserStatus = IDLE;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <cmd_parser_fsm+0x20c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e002      	b.n	8001036 <cmd_parser_fsm+0x1ca>
		}
		else cmdParserStatus = IDLE;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <cmd_parser_fsm+0x20c>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
		cmd_index++;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <cmd_parser_fsm+0x210>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <cmd_parser_fsm+0x210>)
 800103e:	6013      	str	r3, [r2, #0]
		if (buffer_flag == 0)
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <cmd_parser_fsm+0x218>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d114      	bne.n	8001072 <cmd_parser_fsm+0x206>
		{
			index_buffer = 0;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <cmd_parser_fsm+0x21c>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
			cmd_index = 0;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <cmd_parser_fsm+0x210>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
		}
		break;
 8001054:	e00d      	b.n	8001072 <cmd_parser_fsm+0x206>
//-----------------------------------------------------
	default:
		break;
 8001056:	bf00      	nop
 8001058:	e00c      	b.n	8001074 <cmd_parser_fsm+0x208>
		break;
 800105a:	bf00      	nop
 800105c:	e00a      	b.n	8001074 <cmd_parser_fsm+0x208>
		break;
 800105e:	bf00      	nop
 8001060:	e008      	b.n	8001074 <cmd_parser_fsm+0x208>
		break;
 8001062:	bf00      	nop
 8001064:	e006      	b.n	8001074 <cmd_parser_fsm+0x208>
		break;
 8001066:	bf00      	nop
 8001068:	e004      	b.n	8001074 <cmd_parser_fsm+0x208>
		break;
 800106a:	bf00      	nop
 800106c:	e002      	b.n	8001074 <cmd_parser_fsm+0x208>
		break;
 800106e:	bf00      	nop
 8001070:	e000      	b.n	8001074 <cmd_parser_fsm+0x208>
		break;
 8001072:	bf00      	nop
	}
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000021c 	.word	0x2000021c
 800107c:	20000220 	.word	0x20000220
 8001080:	200001ec 	.word	0x200001ec
 8001084:	20000210 	.word	0x20000210
 8001088:	2000020c 	.word	0x2000020c
 800108c:	20000218 	.word	0x20000218
 8001090:	20000214 	.word	0x20000214

08001094 <uart_comms_fsm>:

void uart_comms_fsm()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	if (isRST == 1)
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <uart_comms_fsm+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10c      	bne.n	80010ba <uart_comms_fsm+0x26>
	{
		if (timer2_flag == 1){
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <uart_comms_fsm+0x44>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d106      	bne.n	80010b6 <uart_comms_fsm+0x22>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80010a8:	2102      	movs	r1, #2
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <uart_comms_fsm+0x48>)
 80010ac:	f000 fc82 	bl	80019b4 <HAL_GPIO_TogglePin>
			setTimer2(100);
 80010b0:	2064      	movs	r0, #100	; 0x64
 80010b2:	f7ff fc89 	bl	80009c8 <setTimer2>
		}
		fsm_run();
 80010b6:	f7ff f967 	bl	8000388 <fsm_run>
	}
	if (isOK == 1)
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <uart_comms_fsm+0x4c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d105      	bne.n	80010ce <uart_comms_fsm+0x3a>
	{
		isOK = 0;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <uart_comms_fsm+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
		isRST = 0;
 80010c8:	4b02      	ldr	r3, [pc, #8]	; (80010d4 <uart_comms_fsm+0x40>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
	}
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000214 	.word	0x20000214
 80010d8:	200001a0 	.word	0x200001a0
 80010dc:	40010800 	.word	0x40010800
 80010e0:	20000218 	.word	0x20000218

080010e4 <Scan_Addr>:

void Scan_Addr() {
 80010e4:	b5b0      	push	{r4, r5, r7, lr}
 80010e6:	b098      	sub	sp, #96	; 0x60
 80010e8:	af00      	add	r7, sp, #0
    char info[] = "\r\n\r\nScanning I2C bus...\r\n";
 80010ea:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <Scan_Addr+0xb0>)
 80010ec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80010f0:	461d      	mov	r5, r3
 80010f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010fa:	c403      	stmia	r4!, {r0, r1}
 80010fc:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80010fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f822 	bl	800014c <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	4820      	ldr	r0, [pc, #128]	; (8001198 <Scan_Addr+0xb4>)
 8001116:	f002 fdc4 	bl	8003ca2 <HAL_UART_Transmit>

    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 800111a:	2300      	movs	r3, #0
 800111c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001120:	e02f      	b.n	8001182 <Scan_Addr+0x9e>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8001122:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	b299      	uxth	r1, r3
 800112a:	230a      	movs	r3, #10
 800112c:	2201      	movs	r2, #1
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <Scan_Addr+0xb8>)
 8001130:	f001 f8fc 	bl	800232c <HAL_I2C_IsDeviceReady>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK) {
 800113a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800113e:	2b00      	cmp	r3, #0
 8001140:	d113      	bne.n	800116a <Scan_Addr+0x86>
            char msg[64];
            snprintf(msg, sizeof(msg), "0x%02X", i);
 8001142:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001146:	4638      	mov	r0, r7
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <Scan_Addr+0xbc>)
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	f003 fac6 	bl	80046dc <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f7fe fffa 	bl	800014c <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	4639      	mov	r1, r7
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <Scan_Addr+0xb4>)
 8001164:	f002 fd9d 	bl	8003ca2 <HAL_UART_Transmit>
 8001168:	e006      	b.n	8001178 <Scan_Addr+0x94>
        } else {
            HAL_UART_Transmit(&huart2, (uint8_t*)".", 1, HAL_MAX_DELAY);
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	2201      	movs	r2, #1
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <Scan_Addr+0xc0>)
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <Scan_Addr+0xb4>)
 8001174:	f002 fd95 	bl	8003ca2 <HAL_UART_Transmit>
    for(uint16_t i = 0; i < 128; i++) {
 8001178:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800117c:	3301      	adds	r3, #1
 800117e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001182:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001186:	2b7f      	cmp	r3, #127	; 0x7f
 8001188:	d9cb      	bls.n	8001122 <Scan_Addr+0x3e>
        }
    }
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	3760      	adds	r7, #96	; 0x60
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	080050a4 	.word	0x080050a4
 8001198:	20000150 	.word	0x20000150
 800119c:	200000b4 	.word	0x200000b4
 80011a0:	08005098 	.word	0x08005098
 80011a4:	080050a0 	.word	0x080050a0

080011a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ce:	f7ff fe47 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f003 fa57 	bl	8004684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d6:	f7ff fa6f 	bl	80006b8 <main>
  bx lr
 80011da:	4770      	bx	lr
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011e4:	08005124 	.word	0x08005124
  ldr r2, =_sbss
 80011e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011ec:	20000238 	.word	0x20000238

080011f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC1_2_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x28>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x28>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f947 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	200f      	movs	r0, #15
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fcbc 	bl	8000b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f95f 	bl	8001502 <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f927 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x20>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_IncTick+0x20>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000224 	.word	0x20000224

080012a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b02      	ldr	r3, [pc, #8]	; (80012b4 <HAL_GetTick+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	20000224 	.word	0x20000224

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffe0 	bl	80012a4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4906      	ldr	r1, [pc, #24]	; (8001398 <__NVIC_EnableIRQ+0x34>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff90 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff2d 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff42 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff90 	bl	80013f0 <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5f 	bl	800139c <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff35 	bl	8001364 <__NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa2 	bl	8001454 <SysTick_Config>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151a:	b480      	push	{r7}
 800151c:	b085      	sub	sp, #20
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800152c:	2b02      	cmp	r3, #2
 800152e:	d008      	beq.n	8001542 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2204      	movs	r2, #4
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e020      	b.n	8001584 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 020e 	bic.w	r2, r2, #14
 8001550:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156a:	2101      	movs	r1, #1
 800156c:	fa01 f202 	lsl.w	r2, r1, r2
 8001570:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
	...

08001590 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d005      	beq.n	80015b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2204      	movs	r2, #4
 80015aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e051      	b.n	8001656 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 020e 	bic.w	r2, r2, #14
 80015c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <HAL_DMA_Abort_IT+0xd0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d029      	beq.n	8001630 <HAL_DMA_Abort_IT+0xa0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <HAL_DMA_Abort_IT+0xd4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d022      	beq.n	800162c <HAL_DMA_Abort_IT+0x9c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <HAL_DMA_Abort_IT+0xd8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d01a      	beq.n	8001626 <HAL_DMA_Abort_IT+0x96>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_DMA_Abort_IT+0xdc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d012      	beq.n	8001620 <HAL_DMA_Abort_IT+0x90>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_DMA_Abort_IT+0xe0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00a      	beq.n	800161a <HAL_DMA_Abort_IT+0x8a>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <HAL_DMA_Abort_IT+0xe4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d102      	bne.n	8001614 <HAL_DMA_Abort_IT+0x84>
 800160e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001612:	e00e      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 8001614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001618:	e00b      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 800161a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161e:	e008      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	e005      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 8001626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162a:	e002      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 800162c:	2310      	movs	r3, #16
 800162e:	e000      	b.n	8001632 <HAL_DMA_Abort_IT+0xa2>
 8001630:	2301      	movs	r3, #1
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_DMA_Abort_IT+0xe8>)
 8001634:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
    } 
  }
  return status;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40020008 	.word	0x40020008
 8001664:	4002001c 	.word	0x4002001c
 8001668:	40020030 	.word	0x40020030
 800166c:	40020044 	.word	0x40020044
 8001670:	40020058 	.word	0x40020058
 8001674:	4002006c 	.word	0x4002006c
 8001678:	40020000 	.word	0x40020000

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b08b      	sub	sp, #44	; 0x2c
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e169      	b.n	8001964 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001690:	2201      	movs	r2, #1
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 8158 	bne.w	800195e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a9a      	ldr	r2, [pc, #616]	; (800191c <HAL_GPIO_Init+0x2a0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d05e      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016b8:	4a98      	ldr	r2, [pc, #608]	; (800191c <HAL_GPIO_Init+0x2a0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d875      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016be:	4a98      	ldr	r2, [pc, #608]	; (8001920 <HAL_GPIO_Init+0x2a4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d058      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016c4:	4a96      	ldr	r2, [pc, #600]	; (8001920 <HAL_GPIO_Init+0x2a4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d86f      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ca:	4a96      	ldr	r2, [pc, #600]	; (8001924 <HAL_GPIO_Init+0x2a8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d052      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016d0:	4a94      	ldr	r2, [pc, #592]	; (8001924 <HAL_GPIO_Init+0x2a8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d869      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016d6:	4a94      	ldr	r2, [pc, #592]	; (8001928 <HAL_GPIO_Init+0x2ac>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04c      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016dc:	4a92      	ldr	r2, [pc, #584]	; (8001928 <HAL_GPIO_Init+0x2ac>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d863      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016e2:	4a92      	ldr	r2, [pc, #584]	; (800192c <HAL_GPIO_Init+0x2b0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d046      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
 80016e8:	4a90      	ldr	r2, [pc, #576]	; (800192c <HAL_GPIO_Init+0x2b0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d85d      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d82a      	bhi.n	8001748 <HAL_GPIO_Init+0xcc>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d859      	bhi.n	80017aa <HAL_GPIO_Init+0x12e>
 80016f6:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <HAL_GPIO_Init+0x80>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001751 	.word	0x08001751
 8001704:	08001763 	.word	0x08001763
 8001708:	080017a5 	.word	0x080017a5
 800170c:	080017ab 	.word	0x080017ab
 8001710:	080017ab 	.word	0x080017ab
 8001714:	080017ab 	.word	0x080017ab
 8001718:	080017ab 	.word	0x080017ab
 800171c:	080017ab 	.word	0x080017ab
 8001720:	080017ab 	.word	0x080017ab
 8001724:	080017ab 	.word	0x080017ab
 8001728:	080017ab 	.word	0x080017ab
 800172c:	080017ab 	.word	0x080017ab
 8001730:	080017ab 	.word	0x080017ab
 8001734:	080017ab 	.word	0x080017ab
 8001738:	080017ab 	.word	0x080017ab
 800173c:	080017ab 	.word	0x080017ab
 8001740:	08001759 	.word	0x08001759
 8001744:	0800176d 	.word	0x0800176d
 8001748:	4a79      	ldr	r2, [pc, #484]	; (8001930 <HAL_GPIO_Init+0x2b4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d013      	beq.n	8001776 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174e:	e02c      	b.n	80017aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e029      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	3304      	adds	r3, #4
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e024      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	3308      	adds	r3, #8
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e01f      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	330c      	adds	r3, #12
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e01a      	b.n	80017ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177e:	2304      	movs	r3, #4
 8001780:	623b      	str	r3, [r7, #32]
          break;
 8001782:	e013      	b.n	80017ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800178c:	2308      	movs	r3, #8
 800178e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	611a      	str	r2, [r3, #16]
          break;
 8001796:	e009      	b.n	80017ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001798:	2308      	movs	r3, #8
 800179a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	615a      	str	r2, [r3, #20]
          break;
 80017a2:	e003      	b.n	80017ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x130>
          break;
 80017aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d801      	bhi.n	80017b6 <HAL_GPIO_Init+0x13a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	e001      	b.n	80017ba <HAL_GPIO_Init+0x13e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2bff      	cmp	r3, #255	; 0xff
 80017c0:	d802      	bhi.n	80017c8 <HAL_GPIO_Init+0x14c>
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e002      	b.n	80017ce <HAL_GPIO_Init+0x152>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	3b08      	subs	r3, #8
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	210f      	movs	r1, #15
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	401a      	ands	r2, r3
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80b1 	beq.w	800195e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <HAL_GPIO_Init+0x2b8>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001814:	4a48      	ldr	r2, [pc, #288]	; (8001938 <HAL_GPIO_Init+0x2bc>)
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a40      	ldr	r2, [pc, #256]	; (800193c <HAL_GPIO_Init+0x2c0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d013      	beq.n	8001868 <HAL_GPIO_Init+0x1ec>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3f      	ldr	r2, [pc, #252]	; (8001940 <HAL_GPIO_Init+0x2c4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00d      	beq.n	8001864 <HAL_GPIO_Init+0x1e8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3e      	ldr	r2, [pc, #248]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d007      	beq.n	8001860 <HAL_GPIO_Init+0x1e4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a3d      	ldr	r2, [pc, #244]	; (8001948 <HAL_GPIO_Init+0x2cc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_GPIO_Init+0x1e0>
 8001858:	2303      	movs	r3, #3
 800185a:	e006      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 800185c:	2304      	movs	r3, #4
 800185e:	e004      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001860:	2302      	movs	r3, #2
 8001862:	e002      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_GPIO_Init+0x1ee>
 8001868:	2300      	movs	r3, #0
 800186a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186c:	f002 0203 	and.w	r2, r2, #3
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	4093      	lsls	r3, r2
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800187a:	492f      	ldr	r1, [pc, #188]	; (8001938 <HAL_GPIO_Init+0x2bc>)
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_GPIO_Init+0x2d0>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	492c      	ldr	r1, [pc, #176]	; (800194c <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4928      	ldr	r1, [pc, #160]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018bc:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4922      	ldr	r1, [pc, #136]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	491e      	ldr	r1, [pc, #120]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	4918      	ldr	r1, [pc, #96]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4914      	ldr	r1, [pc, #80]	; (800194c <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d021      	beq.n	8001950 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_GPIO_Init+0x2d0>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
 8001918:	e021      	b.n	800195e <HAL_GPIO_Init+0x2e2>
 800191a:	bf00      	nop
 800191c:	10320000 	.word	0x10320000
 8001920:	10310000 	.word	0x10310000
 8001924:	10220000 	.word	0x10220000
 8001928:	10210000 	.word	0x10210000
 800192c:	10120000 	.word	0x10120000
 8001930:	10110000 	.word	0x10110000
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000
 800193c:	40010800 	.word	0x40010800
 8001940:	40010c00 	.word	0x40010c00
 8001944:	40011000 	.word	0x40011000
 8001948:	40011400 	.word	0x40011400
 800194c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_GPIO_Init+0x304>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	43db      	mvns	r3, r3
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <HAL_GPIO_Init+0x304>)
 800195a:	4013      	ands	r3, r2
 800195c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	3301      	adds	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	fa22 f303 	lsr.w	r3, r2, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f ae8e 	bne.w	8001690 <HAL_GPIO_Init+0x14>
  }
}
 8001974:	bf00      	nop
 8001976:	bf00      	nop
 8001978:	372c      	adds	r7, #44	; 0x2c
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	611a      	str	r2, [r3, #16]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43d9      	mvns	r1, r3
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	400b      	ands	r3, r1
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	611a      	str	r2, [r3, #16]
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
	...

080019e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e12b      	b.n	8001c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d106      	bne.n	8001a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff f8ee 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2224      	movs	r2, #36	; 0x24
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0201 	bic.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a4c:	f001 fc9c 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 8001a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4a81      	ldr	r2, [pc, #516]	; (8001c5c <HAL_I2C_Init+0x274>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d807      	bhi.n	8001a6c <HAL_I2C_Init+0x84>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a80      	ldr	r2, [pc, #512]	; (8001c60 <HAL_I2C_Init+0x278>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	bf94      	ite	ls
 8001a64:	2301      	movls	r3, #1
 8001a66:	2300      	movhi	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e006      	b.n	8001a7a <HAL_I2C_Init+0x92>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a7d      	ldr	r2, [pc, #500]	; (8001c64 <HAL_I2C_Init+0x27c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	bf94      	ite	ls
 8001a74:	2301      	movls	r3, #1
 8001a76:	2300      	movhi	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0e7      	b.n	8001c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4a78      	ldr	r2, [pc, #480]	; (8001c68 <HAL_I2C_Init+0x280>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0c9b      	lsrs	r3, r3, #18
 8001a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a6a      	ldr	r2, [pc, #424]	; (8001c5c <HAL_I2C_Init+0x274>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d802      	bhi.n	8001abc <HAL_I2C_Init+0xd4>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	e009      	b.n	8001ad0 <HAL_I2C_Init+0xe8>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ac2:	fb02 f303 	mul.w	r3, r2, r3
 8001ac6:	4a69      	ldr	r2, [pc, #420]	; (8001c6c <HAL_I2C_Init+0x284>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	099b      	lsrs	r3, r3, #6
 8001ace:	3301      	adds	r3, #1
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	495c      	ldr	r1, [pc, #368]	; (8001c5c <HAL_I2C_Init+0x274>)
 8001aec:	428b      	cmp	r3, r1
 8001aee:	d819      	bhi.n	8001b24 <HAL_I2C_Init+0x13c>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e59      	subs	r1, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001afe:	1c59      	adds	r1, r3, #1
 8001b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b04:	400b      	ands	r3, r1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <HAL_I2C_Init+0x138>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1e59      	subs	r1, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1e:	e051      	b.n	8001bc4 <HAL_I2C_Init+0x1dc>
 8001b20:	2304      	movs	r3, #4
 8001b22:	e04f      	b.n	8001bc4 <HAL_I2C_Init+0x1dc>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d111      	bne.n	8001b50 <HAL_I2C_Init+0x168>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1e58      	subs	r0, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	440b      	add	r3, r1
 8001b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	e012      	b.n	8001b76 <HAL_I2C_Init+0x18e>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1e58      	subs	r0, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	0099      	lsls	r1, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b66:	3301      	adds	r3, #1
 8001b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf0c      	ite	eq
 8001b70:	2301      	moveq	r3, #1
 8001b72:	2300      	movne	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Init+0x196>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e022      	b.n	8001bc4 <HAL_I2C_Init+0x1dc>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10e      	bne.n	8001ba4 <HAL_I2C_Init+0x1bc>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1e58      	subs	r0, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6859      	ldr	r1, [r3, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	440b      	add	r3, r1
 8001b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba2:	e00f      	b.n	8001bc4 <HAL_I2C_Init+0x1dc>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1e58      	subs	r0, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	0099      	lsls	r1, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	6809      	ldr	r1, [r1, #0]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6911      	ldr	r1, [r2, #16]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68d2      	ldr	r2, [r2, #12]
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	430b      	orrs	r3, r1
 8001c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	000186a0 	.word	0x000186a0
 8001c60:	001e847f 	.word	0x001e847f
 8001c64:	003d08ff 	.word	0x003d08ff
 8001c68:	431bde83 	.word	0x431bde83
 8001c6c:	10624dd3 	.word	0x10624dd3

08001c70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	817b      	strh	r3, [r7, #10]
 8001c80:	4613      	mov	r3, r2
 8001c82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff fb0e 	bl	80012a4 <HAL_GetTick>
 8001c88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	f040 80e0 	bne.w	8001e58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2319      	movs	r3, #25
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4970      	ldr	r1, [pc, #448]	; (8001e64 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 fdc0 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e0d3      	b.n	8001e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_I2C_Master_Transmit+0x50>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e0cc      	b.n	8001e5a <HAL_I2C_Master_Transmit+0x1ea>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d007      	beq.n	8001ce6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2221      	movs	r2, #33	; 0x21
 8001cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2210      	movs	r2, #16
 8001d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	893a      	ldrh	r2, [r7, #8]
 8001d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a50      	ldr	r2, [pc, #320]	; (8001e68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d28:	8979      	ldrh	r1, [r7, #10]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fc2a 	bl	8002588 <I2C_MasterRequestWrite>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e08d      	b.n	8001e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d54:	e066      	b.n	8001e24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	6a39      	ldr	r1, [r7, #32]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fe3a 	bl	80029d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00d      	beq.n	8001d82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d107      	bne.n	8001d7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d11b      	bne.n	8001df8 <HAL_I2C_Master_Transmit+0x188>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d017      	beq.n	8001df8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	6a39      	ldr	r1, [r7, #32]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 fe2a 	bl	8002a56 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00d      	beq.n	8001e24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d107      	bne.n	8001e20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e01a      	b.n	8001e5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d194      	bne.n	8001d56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e000      	b.n	8001e5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
  }
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	00100002 	.word	0x00100002
 8001e68:	ffff0000 	.word	0xffff0000

08001e6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	461a      	mov	r2, r3
 8001e78:	460b      	mov	r3, r1
 8001e7a:	817b      	strh	r3, [r7, #10]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff fa0e 	bl	80012a4 <HAL_GetTick>
 8001e88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	f040 823f 	bne.w	8002316 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2319      	movs	r3, #25
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	497f      	ldr	r1, [pc, #508]	; (80020a0 <HAL_I2C_Master_Receive+0x234>)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fcc0 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e232      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_I2C_Master_Receive+0x54>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e22b      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d007      	beq.n	8001ee6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2222      	movs	r2, #34	; 0x22
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2210      	movs	r2, #16
 8001f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	893a      	ldrh	r2, [r7, #8]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <HAL_I2C_Master_Receive+0x238>)
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f28:	8979      	ldrh	r1, [r7, #10]
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fbac 	bl	800268c <I2C_MasterRequestRead>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e1ec      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d113      	bne.n	8001f6e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e1c0      	b.n	80022f0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d11e      	bne.n	8001fb4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f86:	b672      	cpsid	i
}
 8001f88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fb0:	b662      	cpsie	i
}
 8001fb2:	e035      	b.n	8002020 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d11e      	bne.n	8001ffa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ff6:	b662      	cpsie	i
}
 8001ff8:	e012      	b.n	8002020 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002020:	e166      	b.n	80022f0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b03      	cmp	r3, #3
 8002028:	f200 811f 	bhi.w	800226a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	2b01      	cmp	r3, #1
 8002032:	d123      	bne.n	800207c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fd4d 	bl	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e167      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
 800207a:	e139      	b.n	80022f0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b02      	cmp	r3, #2
 8002082:	d152      	bne.n	800212a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	2200      	movs	r2, #0
 800208c:	4906      	ldr	r1, [pc, #24]	; (80020a8 <HAL_I2C_Master_Receive+0x23c>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fbca 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e13c      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
 800209e:	bf00      	nop
 80020a0:	00100002 	.word	0x00100002
 80020a4:	ffff0000 	.word	0xffff0000
 80020a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80020ac:	b672      	cpsid	i
}
 80020ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020f2:	b662      	cpsie	i
}
 80020f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002128:	e0e2      	b.n	80022f0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	2200      	movs	r2, #0
 8002132:	497b      	ldr	r1, [pc, #492]	; (8002320 <HAL_I2C_Master_Receive+0x4b4>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fb77 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0e9      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002152:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800218a:	4b66      	ldr	r3, [pc, #408]	; (8002324 <HAL_I2C_Master_Receive+0x4b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	4a65      	ldr	r2, [pc, #404]	; (8002328 <HAL_I2C_Master_Receive+0x4bc>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0a1a      	lsrs	r2, r3, #8
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00da      	lsls	r2, r3, #3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d118      	bne.n	80021e2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0220 	orr.w	r2, r3, #32
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80021d2:	b662      	cpsie	i
}
 80021d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e09a      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d1d9      	bne.n	80021a4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002232:	b662      	cpsie	i
}
 8002234:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002268:	e042      	b.n	80022f0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fc32 	bl	8002ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e04c      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d118      	bne.n	80022f0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f47f ae94 	bne.w	8002022 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002316:	2302      	movs	r3, #2
  }
}
 8002318:	4618      	mov	r0, r3
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	00010004 	.word	0x00010004
 8002324:	20000000 	.word	0x20000000
 8002328:	14f8b589 	.word	0x14f8b589

0800232c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	460b      	mov	r3, r1
 800233a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7fe ffb2 	bl	80012a4 <HAL_GetTick>
 8002340:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b20      	cmp	r3, #32
 8002350:	f040 8111 	bne.w	8002576 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2319      	movs	r3, #25
 800235a:	2201      	movs	r2, #1
 800235c:	4988      	ldr	r1, [pc, #544]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fa62 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	e104      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_I2C_IsDeviceReady+0x50>
 8002378:	2302      	movs	r3, #2
 800237a:	e0fd      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d007      	beq.n	80023a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2224      	movs	r2, #36	; 0x24
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a70      	ldr	r2, [pc, #448]	; (8002584 <HAL_I2C_IsDeviceReady+0x258>)
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 fa20 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023fc:	d103      	bne.n	8002406 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0b6      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002418:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800241a:	f7fe ff43 	bl	80012a4 <HAL_GetTick>
 800241e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002444:	bf0c      	ite	eq
 8002446:	2301      	moveq	r3, #1
 8002448:	2300      	movne	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800244e:	e025      	b.n	800249c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002450:	f7fe ff28 	bl	80012a4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d302      	bcc.n	8002466 <HAL_I2C_IsDeviceReady+0x13a>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	22a0      	movs	r2, #160	; 0xa0
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b02      	cmp	r3, #2
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2ba0      	cmp	r3, #160	; 0xa0
 80024a6:	d005      	beq.n	80024b4 <HAL_I2C_IsDeviceReady+0x188>
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <HAL_I2C_IsDeviceReady+0x188>
 80024ae:	7dbb      	ldrb	r3, [r7, #22]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0cd      	beq.n	8002450 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d129      	bne.n	800251e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	4921      	ldr	r1, [pc, #132]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f994 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e036      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e02c      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002536:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	490f      	ldr	r1, [pc, #60]	; (8002580 <HAL_I2C_IsDeviceReady+0x254>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f970 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e012      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	3301      	adds	r3, #1
 8002556:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	f4ff af32 	bcc.w	80023c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002576:	2302      	movs	r3, #2
  }
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000

08002588 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	460b      	mov	r3, r1
 8002596:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d006      	beq.n	80025b2 <I2C_MasterRequestWrite+0x2a>
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d003      	beq.n	80025b2 <I2C_MasterRequestWrite+0x2a>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025b0:	d108      	bne.n	80025c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e00b      	b.n	80025dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d107      	bne.n	80025dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f91d 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002602:	d103      	bne.n	800260c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e035      	b.n	800267c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002618:	d108      	bne.n	800262c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800261a:	897b      	ldrh	r3, [r7, #10]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	e01b      	b.n	8002664 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800262c:	897b      	ldrh	r3, [r7, #10]
 800262e:	11db      	asrs	r3, r3, #7
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f003 0306 	and.w	r3, r3, #6
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f063 030f 	orn	r3, r3, #15
 800263c:	b2da      	uxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <I2C_MasterRequestWrite+0xfc>)
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f943 	bl	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e010      	b.n	800267c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	4907      	ldr	r1, [pc, #28]	; (8002688 <I2C_MasterRequestWrite+0x100>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f933 	bl	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	00010008 	.word	0x00010008
 8002688:	00010002 	.word	0x00010002

0800268c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	460b      	mov	r3, r1
 800269a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d006      	beq.n	80026c6 <I2C_MasterRequestRead+0x3a>
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d003      	beq.n	80026c6 <I2C_MasterRequestRead+0x3a>
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026c4:	d108      	bne.n	80026d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e00b      	b.n	80026f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	2b11      	cmp	r3, #17
 80026de:	d107      	bne.n	80026f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f893 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002716:	d103      	bne.n	8002720 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e079      	b.n	8002818 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800272c:	d108      	bne.n	8002740 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800272e:	897b      	ldrh	r3, [r7, #10]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	e05f      	b.n	8002800 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002740:	897b      	ldrh	r3, [r7, #10]
 8002742:	11db      	asrs	r3, r3, #7
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 0306 	and.w	r3, r3, #6
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f063 030f 	orn	r3, r3, #15
 8002750:	b2da      	uxtb	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4930      	ldr	r1, [pc, #192]	; (8002820 <I2C_MasterRequestRead+0x194>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f8b9 	bl	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e054      	b.n	8002818 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800276e:	897b      	ldrh	r3, [r7, #10]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4929      	ldr	r1, [pc, #164]	; (8002824 <I2C_MasterRequestRead+0x198>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f8a9 	bl	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e044      	b.n	8002818 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f831 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027da:	d103      	bne.n	80027e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e017      	b.n	8002818 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	11db      	asrs	r3, r3, #7
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0306 	and.w	r3, r3, #6
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f063 030e 	orn	r3, r3, #14
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	4907      	ldr	r1, [pc, #28]	; (8002824 <I2C_MasterRequestRead+0x198>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f865 	bl	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	00010008 	.word	0x00010008
 8002824:	00010002 	.word	0x00010002

08002828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002838:	e025      	b.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d021      	beq.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7fe fd2f 	bl	80012a4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d116      	bne.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e023      	b.n	80028ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10d      	bne.n	80028ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4013      	ands	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	e00c      	b.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	43da      	mvns	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4013      	ands	r3, r2
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d0b6      	beq.n	800283a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e4:	e051      	b.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f4:	d123      	bne.n	800293e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002904:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800290e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f043 0204 	orr.w	r2, r3, #4
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e046      	b.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d021      	beq.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002946:	f7fe fcad 	bl	80012a4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d302      	bcc.n	800295c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d116      	bne.n	800298a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e020      	b.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d10c      	bne.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4013      	ands	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e00b      	b.n	80029c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	43da      	mvns	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4013      	ands	r3, r2
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d18d      	bne.n	80028e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e0:	e02d      	b.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8ce 	bl	8002b84 <I2C_IsAcknowledgeFailed>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e02d      	b.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d021      	beq.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fe fc53 	bl	80012a4 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d116      	bne.n	8002a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e007      	b.n	8002a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d1ca      	bne.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a62:	e02d      	b.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f88d 	bl	8002b84 <I2C_IsAcknowledgeFailed>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e02d      	b.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d021      	beq.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7c:	f7fe fc12 	bl	80012a4 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d302      	bcc.n	8002a92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e007      	b.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d1ca      	bne.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ae4:	e042      	b.n	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d119      	bne.n	8002b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0210 	mvn.w	r2, #16
 8002afc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e029      	b.n	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b28:	f7fe fbbc 	bl	80012a4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d302      	bcc.n	8002b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e007      	b.n	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d1b5      	bne.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d11b      	bne.n	8002bd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ba4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e272      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8087 	beq.w	8002d0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c00:	4b92      	ldr	r3, [pc, #584]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d00c      	beq.n	8002c26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c0c:	4b8f      	ldr	r3, [pc, #572]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d112      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5e>
 8002c18:	4b8c      	ldr	r3, [pc, #560]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c24:	d10b      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c26:	4b89      	ldr	r3, [pc, #548]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d06c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x12c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d168      	bne.n	8002d0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e24c      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x76>
 8002c48:	4b80      	ldr	r3, [pc, #512]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7f      	ldr	r2, [pc, #508]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	e02e      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b7b      	ldr	r3, [pc, #492]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7a      	ldr	r2, [pc, #488]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b78      	ldr	r3, [pc, #480]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a77      	ldr	r2, [pc, #476]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e01d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0xbc>
 8002c82:	4b72      	ldr	r3, [pc, #456]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a71      	ldr	r2, [pc, #452]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a6e      	ldr	r2, [pc, #440]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xd4>
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a6a      	ldr	r2, [pc, #424]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a67      	ldr	r2, [pc, #412]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7fe faf2 	bl	80012a4 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe faee 	bl	80012a4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e200      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b5d      	ldr	r3, [pc, #372]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xe4>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fade 	bl	80012a4 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fada 	bl	80012a4 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1ec      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x10c>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d063      	beq.n	8002de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1a:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d26:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d11c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x18c>
 8002d32:	4b46      	ldr	r3, [pc, #280]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x176>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e1c0      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4939      	ldr	r1, [pc, #228]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	e03a      	b.n	8002de2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d74:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <HAL_RCC_OscConfig+0x270>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fa93 	bl	80012a4 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fe fa8f 	bl	80012a4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1a1      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4927      	ldr	r1, [pc, #156]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	e015      	b.n	8002de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_RCC_OscConfig+0x270>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fa72 	bl	80012a4 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fa6e 	bl	80012a4 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e180      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d03a      	beq.n	8002e64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d019      	beq.n	8002e2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fa52 	bl	80012a4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe fa4e 	bl	80012a4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e160      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e22:	2001      	movs	r0, #1
 8002e24:	f000 fad8 	bl	80033d8 <RCC_Delay>
 8002e28:	e01c      	b.n	8002e64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe fa38 	bl	80012a4 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e36:	e00f      	b.n	8002e58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe fa34 	bl	80012a4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d908      	bls.n	8002e58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e146      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	42420000 	.word	0x42420000
 8002e54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	4b92      	ldr	r3, [pc, #584]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e9      	bne.n	8002e38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a6 	beq.w	8002fbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10d      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b88      	ldr	r3, [pc, #544]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4a87      	ldr	r2, [pc, #540]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	61d3      	str	r3, [r2, #28]
 8002e8e:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b82      	ldr	r3, [pc, #520]	; (80030a8 <HAL_RCC_OscConfig+0x4c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d118      	bne.n	8002edc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eaa:	4b7f      	ldr	r3, [pc, #508]	; (80030a8 <HAL_RCC_OscConfig+0x4c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7e      	ldr	r2, [pc, #504]	; (80030a8 <HAL_RCC_OscConfig+0x4c8>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe f9f5 	bl	80012a4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebe:	f7fe f9f1 	bl	80012a4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e103      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <HAL_RCC_OscConfig+0x4c8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x312>
 8002ee4:	4b6f      	ldr	r3, [pc, #444]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4a6e      	ldr	r2, [pc, #440]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6213      	str	r3, [r2, #32]
 8002ef0:	e02d      	b.n	8002f4e <HAL_RCC_OscConfig+0x36e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x334>
 8002efa:	4b6a      	ldr	r3, [pc, #424]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a69      	ldr	r2, [pc, #420]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	4b67      	ldr	r3, [pc, #412]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	4a66      	ldr	r2, [pc, #408]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6213      	str	r3, [r2, #32]
 8002f12:	e01c      	b.n	8002f4e <HAL_RCC_OscConfig+0x36e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x356>
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a60      	ldr	r2, [pc, #384]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4a5d      	ldr	r2, [pc, #372]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6213      	str	r3, [r2, #32]
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0x36e>
 8002f36:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a5a      	ldr	r2, [pc, #360]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6213      	str	r3, [r2, #32]
 8002f42:	4b58      	ldr	r3, [pc, #352]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4a57      	ldr	r2, [pc, #348]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d015      	beq.n	8002f82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7fe f9a5 	bl	80012a4 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe f9a1 	bl	80012a4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0b1      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ee      	beq.n	8002f5e <HAL_RCC_OscConfig+0x37e>
 8002f80:	e014      	b.n	8002fac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe f98f 	bl	80012a4 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe f98b 	bl	80012a4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e09b      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ee      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b3c      	ldr	r3, [pc, #240]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4a3b      	ldr	r2, [pc, #236]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8087 	beq.w	80030d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d061      	beq.n	8003098 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d146      	bne.n	800306a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b33      	ldr	r3, [pc, #204]	; (80030ac <HAL_RCC_OscConfig+0x4cc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe f95f 	bl	80012a4 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe f95b 	bl	80012a4 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e06d      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffc:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d108      	bne.n	8003024 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003012:	4b24      	ldr	r3, [pc, #144]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4921      	ldr	r1, [pc, #132]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003024:	4b1f      	ldr	r3, [pc, #124]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a19      	ldr	r1, [r3, #32]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	430b      	orrs	r3, r1
 8003036:	491b      	ldr	r1, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_OscConfig+0x4cc>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fe f92f 	bl	80012a4 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe f92b 	bl	80012a4 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e03d      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800305c:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x46a>
 8003068:	e035      	b.n	80030d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_RCC_OscConfig+0x4cc>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe f918 	bl	80012a4 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe f914 	bl	80012a4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e026      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_RCC_OscConfig+0x4c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x498>
 8003096:	e01e      	b.n	80030d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e019      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40007000 	.word	0x40007000
 80030ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_OscConfig+0x500>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000

080030e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0d0      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d910      	bls.n	8003128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b67      	ldr	r3, [pc, #412]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	4965      	ldr	r1, [pc, #404]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800314a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d040      	beq.n	8003204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d115      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e073      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06b      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f023 0203 	bic.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4936      	ldr	r1, [pc, #216]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d4:	f7fe f866 	bl	80012a4 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031dc:	f7fe f862 	bl	80012a4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e053      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 020c 	and.w	r2, r3, #12
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	429a      	cmp	r2, r3
 8003202:	d1eb      	bne.n	80031dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d210      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0207 	bic.w	r2, r3, #7
 800321a:	4922      	ldr	r1, [pc, #136]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4602      	mov	r2, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	490a      	ldr	r1, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	5ccb      	ldrb	r3, [r1, r3]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1cc>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd ffc4 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	080050d0 	.word	0x080050d0
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b490      	push	{r4, r7}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_RCC_GetSysClockFreq+0xac>)
 80032c0:	1d3c      	adds	r4, r7, #4
 80032c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032c8:	f240 2301 	movw	r3, #513	; 0x201
 80032cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032e2:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d002      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_GetSysClockFreq+0x46>
 80032f6:	e02b      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032fa:	623b      	str	r3, [r7, #32]
      break;
 80032fc:	e02b      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	0c9b      	lsrs	r3, r3, #18
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3328      	adds	r3, #40	; 0x28
 8003308:	443b      	add	r3, r7
 800330a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800330e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_GetSysClockFreq+0xb0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0c5b      	lsrs	r3, r3, #17
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	3328      	adds	r3, #40	; 0x28
 8003326:	443b      	add	r3, r7
 8003328:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800332c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4a0e      	ldr	r2, [pc, #56]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003332:	fb03 f202 	mul.w	r2, r3, r2
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	e004      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	623b      	str	r3, [r7, #32]
      break;
 800334e:	e002      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003352:	623b      	str	r3, [r7, #32]
      break;
 8003354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003356:	6a3b      	ldr	r3, [r7, #32]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3728      	adds	r7, #40	; 0x28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc90      	pop	{r4, r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	080050c0 	.word	0x080050c0
 8003368:	40021000 	.word	0x40021000
 800336c:	007a1200 	.word	0x007a1200
 8003370:	003d0900 	.word	0x003d0900

08003374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003378:	4b02      	ldr	r3, [pc, #8]	; (8003384 <HAL_RCC_GetHCLKFreq+0x10>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	20000000 	.word	0x20000000

08003388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800338c:	f7ff fff2 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	; (80033ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	080050e0 	.word	0x080050e0

080033b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033b4:	f7ff ffde 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	0adb      	lsrs	r3, r3, #11
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4903      	ldr	r1, [pc, #12]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	080050e0 	.word	0x080050e0

080033d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <RCC_Delay+0x34>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <RCC_Delay+0x38>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0a5b      	lsrs	r3, r3, #9
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f4:	bf00      	nop
  }
  while (Delay --);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	60fa      	str	r2, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f9      	bne.n	80033f4 <RCC_Delay+0x1c>
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr
 800340c:	20000000 	.word	0x20000000
 8003410:	10624dd3 	.word	0x10624dd3

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fc28 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 fa70 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e03a      	b.n	8003542 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a18      	ldr	r2, [pc, #96]	; (800354c <HAL_TIM_Base_Start_IT+0x98>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00e      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d009      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <HAL_TIM_Base_Start_IT+0x9c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d004      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x58>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a13      	ldr	r2, [pc, #76]	; (8003554 <HAL_TIM_Base_Start_IT+0xa0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b06      	cmp	r3, #6
 800351c:	d010      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352e:	e007      	b.n	8003540 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d122      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d11b      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0202 	mvn.w	r2, #2
 8003584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f9b1 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 80035a0:	e005      	b.n	80035ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9a4 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f9b3 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d122      	bne.n	8003608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d11b      	bne.n	8003608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0204 	mvn.w	r2, #4
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2202      	movs	r2, #2
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f987 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f97a 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f989 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b08      	cmp	r3, #8
 8003614:	d122      	bne.n	800365c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d11b      	bne.n	800365c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f06f 0208 	mvn.w	r2, #8
 800362c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2204      	movs	r2, #4
 8003632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f95d 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 8003648:	e005      	b.n	8003656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f950 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f95f 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b10      	cmp	r3, #16
 8003668:	d122      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b10      	cmp	r3, #16
 8003676:	d11b      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0210 	mvn.w	r2, #16
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2208      	movs	r2, #8
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f933 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f926 	bl	80038f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f935 	bl	8003914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d10e      	bne.n	80036dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f06f 0201 	mvn.w	r2, #1
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd f952 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	2b80      	cmp	r3, #128	; 0x80
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fa77 	bl	8003bf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8f9 	bl	8003926 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b20      	cmp	r3, #32
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0220 	mvn.w	r2, #32
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fa42 	bl	8003be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIM_ConfigClockSource+0x18>
 800377c:	2302      	movs	r3, #2
 800377e:	e0b3      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x180>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800379e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b8:	d03e      	beq.n	8003838 <HAL_TIM_ConfigClockSource+0xd0>
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037be:	f200 8087 	bhi.w	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c6:	f000 8085 	beq.w	80038d4 <HAL_TIM_ConfigClockSource+0x16c>
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d87f      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037d0:	2b70      	cmp	r3, #112	; 0x70
 80037d2:	d01a      	beq.n	800380a <HAL_TIM_ConfigClockSource+0xa2>
 80037d4:	2b70      	cmp	r3, #112	; 0x70
 80037d6:	d87b      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037d8:	2b60      	cmp	r3, #96	; 0x60
 80037da:	d050      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x116>
 80037dc:	2b60      	cmp	r3, #96	; 0x60
 80037de:	d877      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037e0:	2b50      	cmp	r3, #80	; 0x50
 80037e2:	d03c      	beq.n	800385e <HAL_TIM_ConfigClockSource+0xf6>
 80037e4:	2b50      	cmp	r3, #80	; 0x50
 80037e6:	d873      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d058      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x136>
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d86f      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d064      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x156>
 80037f4:	2b30      	cmp	r3, #48	; 0x30
 80037f6:	d86b      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d060      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x156>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d867      	bhi.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05c      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x156>
 8003804:	2b10      	cmp	r3, #16
 8003806:	d05a      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003808:	e062      	b.n	80038d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6899      	ldr	r1, [r3, #8]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f000 f966 	bl	8003aea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800382c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	609a      	str	r2, [r3, #8]
      break;
 8003836:	e04e      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	f000 f94f 	bl	8003aea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800385a:	609a      	str	r2, [r3, #8]
      break;
 800385c:	e03b      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	461a      	mov	r2, r3
 800386c:	f000 f8c6 	bl	80039fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2150      	movs	r1, #80	; 0x50
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f91d 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 800387c:	e02b      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	461a      	mov	r2, r3
 800388c:	f000 f8e4 	bl	8003a58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2160      	movs	r1, #96	; 0x60
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f90d 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 800389c:	e01b      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 f8a6 	bl	80039fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2140      	movs	r1, #64	; 0x40
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f8fd 	bl	8003ab6 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e00b      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f000 f8f4 	bl	8003ab6 <TIM_ITRx_SetConfig>
        break;
 80038ce:	e002      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a29      	ldr	r2, [pc, #164]	; (80039f0 <TIM_Base_SetConfig+0xb8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00b      	beq.n	8003968 <TIM_Base_SetConfig+0x30>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d007      	beq.n	8003968 <TIM_Base_SetConfig+0x30>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <TIM_Base_SetConfig+0xbc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0x30>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <TIM_Base_SetConfig+0xc0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d108      	bne.n	800397a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <TIM_Base_SetConfig+0xb8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0x62>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0x62>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <TIM_Base_SetConfig+0xbc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <TIM_Base_SetConfig+0xc0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <TIM_Base_SetConfig+0xb8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800

080039fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f023 0201 	bic.w	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 030a 	bic.w	r3, r3, #10
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f023 0210 	bic.w	r2, r3, #16
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	031b      	lsls	r3, r3, #12
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f043 0307 	orr.w	r3, r3, #7
 8003ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b087      	sub	sp, #28
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	021a      	lsls	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	609a      	str	r2, [r3, #8]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e046      	b.n	8003bce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8c:	d009      	beq.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10c      	bne.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40000800 	.word	0x40000800

08003be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e03f      	b.n	8003c9a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd f852 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fc85 	bl	800455c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b08a      	sub	sp, #40	; 0x28
 8003ca6:	af02      	add	r7, sp, #8
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d17c      	bne.n	8003dbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_UART_Transmit+0x2c>
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e075      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x3e>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e06e      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2221      	movs	r2, #33	; 0x21
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cf6:	f7fd fad5 	bl	80012a4 <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d10:	d108      	bne.n	8003d24 <HAL_UART_Transmit+0x82>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e003      	b.n	8003d2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d34:	e02a      	b.n	8003d8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fa38 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e036      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	3302      	adds	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	e007      	b.n	8003d7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	781a      	ldrb	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1cf      	bne.n	8003d36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2140      	movs	r1, #64	; 0x40
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fa08 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e006      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b20      	cmp	r3, #32
 8003dde:	d11d      	bne.n	8003e1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_Receive_IT+0x26>
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e016      	b.n	8003e1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Receive_IT+0x38>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e00f      	b.n	8003e1e <HAL_UART_Receive_IT+0x58>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa19 	bl	800424a <UART_Start_Receive_IT>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_UART_IRQHandler+0x52>
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fac9 	bl	800440a <UART_Receive_IT>
      return;
 8003e78:	e17b      	b.n	8004172 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80b1 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x1bc>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_UART_IRQHandler+0x70>
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a6 	beq.w	8003fe4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x90>
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xb0>
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed0:	f043 0202 	orr.w	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xd0>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f043 0204 	orr.w	r2, r3, #4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00f      	beq.n	8003f22 <HAL_UART_IRQHandler+0xfa>
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <HAL_UART_IRQHandler+0xee>
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f043 0208 	orr.w	r2, r3, #8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 811e 	beq.w	8004168 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_UART_IRQHandler+0x11e>
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa62 	bl	800440a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <HAL_UART_IRQHandler+0x146>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d031      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9a4 	bl	80042bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d023      	beq.n	8003fca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d013      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	4a76      	ldr	r2, [pc, #472]	; (8004178 <HAL_UART_IRQHandler+0x350>)
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd faf2 	bl	8001590 <HAL_DMA_Abort_IT>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	e00e      	b.n	8003fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8e3 	bl	800418e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	e00a      	b.n	8003fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8df 	bl	800418e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	e006      	b.n	8003fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8db 	bl	800418e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fde:	e0c3      	b.n	8004168 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	bf00      	nop
    return;
 8003fe2:	e0c1      	b.n	8004168 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	f040 80a1 	bne.w	8004130 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 809b 	beq.w	8004130 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8095 	beq.w	8004130 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04e      	beq.n	80040c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004034:	8a3b      	ldrh	r3, [r7, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8098 	beq.w	800416c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004040:	8a3a      	ldrh	r2, [r7, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	f080 8092 	bcs.w	800416c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8a3a      	ldrh	r2, [r7, #16]
 800404c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b20      	cmp	r3, #32
 8004056:	d02b      	beq.n	80040b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004066:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0210 	bic.w	r2, r2, #16
 80040a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fd fa35 	bl	800151a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4619      	mov	r1, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f86d 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040c6:	e051      	b.n	800416c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d047      	beq.n	8004170 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040e0:	8a7b      	ldrh	r3, [r7, #18]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d044      	beq.n	8004170 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0210 	bic.w	r2, r2, #16
 8004122:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004124:	8a7b      	ldrh	r3, [r7, #18]
 8004126:	4619      	mov	r1, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f839 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800412e:	e01f      	b.n	8004170 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_UART_IRQHandler+0x324>
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f8f9 	bl	800433c <UART_Transmit_IT>
    return;
 800414a:	e012      	b.n	8004172 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00d      	beq.n	8004172 <HAL_UART_IRQHandler+0x34a>
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f93a 	bl	80043da <UART_EndTransmit_IT>
    return;
 8004166:	e004      	b.n	8004172 <HAL_UART_IRQHandler+0x34a>
    return;
 8004168:	bf00      	nop
 800416a:	e002      	b.n	8004172 <HAL_UART_IRQHandler+0x34a>
      return;
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <HAL_UART_IRQHandler+0x34a>
      return;
 8004170:	bf00      	nop
  }
}
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	08004315 	.word	0x08004315

0800417c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	e02c      	b.n	8004222 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d028      	beq.n	8004222 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d6:	f7fd f865 	bl	80012a4 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d21d      	bcs.n	8004222 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e00f      	b.n	8004242 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	bf0c      	ite	eq
 8004232:	2301      	moveq	r3, #1
 8004234:	2300      	movne	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	429a      	cmp	r2, r3
 800423e:	d0c3      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	4613      	mov	r3, r2
 8004256:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2222      	movs	r2, #34	; 0x22
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0220 	orr.w	r2, r2, #32
 80042ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d107      	bne.n	80042fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0210 	bic.w	r2, r2, #16
 80042fa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff ff2d 	bl	800418e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b21      	cmp	r3, #33	; 0x21
 800434e:	d13e      	bne.n	80043ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004358:	d114      	bne.n	8004384 <UART_Transmit_IT+0x48>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d110      	bne.n	8004384 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004376:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]
 8004382:	e008      	b.n	8004396 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	1c59      	adds	r1, r3, #1
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6211      	str	r1, [r2, #32]
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4619      	mov	r1, r3
 80043a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10f      	bne.n	80043ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043ce:	2302      	movs	r3, #2
  }
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff febe 	bl	800417c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b086      	sub	sp, #24
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b22      	cmp	r3, #34	; 0x22
 800441c:	f040 8099 	bne.w	8004552 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d117      	bne.n	800445a <UART_Receive_IT+0x50>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d113      	bne.n	800445a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	b29b      	uxth	r3, r3
 8004444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004448:	b29a      	uxth	r2, r3
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
 8004458:	e026      	b.n	80044a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446c:	d007      	beq.n	800447e <UART_Receive_IT+0x74>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <UART_Receive_IT+0x82>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e008      	b.n	800449e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004498:	b2da      	uxtb	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d148      	bne.n	800454e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0220 	bic.w	r2, r2, #32
 80044ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d123      	bne.n	8004544 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0210 	bic.w	r2, r2, #16
 8004510:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d10a      	bne.n	8004536 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fe2f 	bl	80041a0 <HAL_UARTEx_RxEventCallback>
 8004542:	e002      	b.n	800454a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fc f883 	bl	8000650 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e002      	b.n	8004554 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004596:	f023 030c 	bic.w	r3, r3, #12
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2c      	ldr	r2, [pc, #176]	; (8004670 <UART_SetConfig+0x114>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d103      	bne.n	80045cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fe fef4 	bl	80033b0 <HAL_RCC_GetPCLK2Freq>
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	e002      	b.n	80045d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045cc:	f7fe fedc 	bl	8003388 <HAL_RCC_GetPCLK1Freq>
 80045d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009a      	lsls	r2, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	4a22      	ldr	r2, [pc, #136]	; (8004674 <UART_SetConfig+0x118>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	0119      	lsls	r1, r3, #4
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009a      	lsls	r2, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	fbb2 f2f3 	udiv	r2, r2, r3
 8004608:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <UART_SetConfig+0x118>)
 800460a:	fba3 0302 	umull	r0, r3, r3, r2
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	2064      	movs	r0, #100	; 0x64
 8004612:	fb00 f303 	mul.w	r3, r0, r3
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	3332      	adds	r3, #50	; 0x32
 800461c:	4a15      	ldr	r2, [pc, #84]	; (8004674 <UART_SetConfig+0x118>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004628:	4419      	add	r1, r3
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009a      	lsls	r2, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <UART_SetConfig+0x118>)
 8004642:	fba3 0302 	umull	r0, r3, r3, r2
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2064      	movs	r0, #100	; 0x64
 800464a:	fb00 f303 	mul.w	r3, r0, r3
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	3332      	adds	r3, #50	; 0x32
 8004654:	4a07      	ldr	r2, [pc, #28]	; (8004674 <UART_SetConfig+0x118>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	440a      	add	r2, r1
 8004666:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40013800 	.word	0x40013800
 8004674:	51eb851f 	.word	0x51eb851f

08004678 <__errno>:
 8004678:	4b01      	ldr	r3, [pc, #4]	; (8004680 <__errno+0x8>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	2000000c 	.word	0x2000000c

08004684 <__libc_init_array>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	2600      	movs	r6, #0
 8004688:	4d0c      	ldr	r5, [pc, #48]	; (80046bc <__libc_init_array+0x38>)
 800468a:	4c0d      	ldr	r4, [pc, #52]	; (80046c0 <__libc_init_array+0x3c>)
 800468c:	1b64      	subs	r4, r4, r5
 800468e:	10a4      	asrs	r4, r4, #2
 8004690:	42a6      	cmp	r6, r4
 8004692:	d109      	bne.n	80046a8 <__libc_init_array+0x24>
 8004694:	f000 fcd0 	bl	8005038 <_init>
 8004698:	2600      	movs	r6, #0
 800469a:	4d0a      	ldr	r5, [pc, #40]	; (80046c4 <__libc_init_array+0x40>)
 800469c:	4c0a      	ldr	r4, [pc, #40]	; (80046c8 <__libc_init_array+0x44>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	42a6      	cmp	r6, r4
 80046a4:	d105      	bne.n	80046b2 <__libc_init_array+0x2e>
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ac:	4798      	blx	r3
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7ee      	b.n	8004690 <__libc_init_array+0xc>
 80046b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b6:	4798      	blx	r3
 80046b8:	3601      	adds	r6, #1
 80046ba:	e7f2      	b.n	80046a2 <__libc_init_array+0x1e>
 80046bc:	0800511c 	.word	0x0800511c
 80046c0:	0800511c 	.word	0x0800511c
 80046c4:	0800511c 	.word	0x0800511c
 80046c8:	08005120 	.word	0x08005120

080046cc <memset>:
 80046cc:	4603      	mov	r3, r0
 80046ce:	4402      	add	r2, r0
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d100      	bne.n	80046d6 <memset+0xa>
 80046d4:	4770      	bx	lr
 80046d6:	f803 1b01 	strb.w	r1, [r3], #1
 80046da:	e7f9      	b.n	80046d0 <memset+0x4>

080046dc <sniprintf>:
 80046dc:	b40c      	push	{r2, r3}
 80046de:	b530      	push	{r4, r5, lr}
 80046e0:	4b17      	ldr	r3, [pc, #92]	; (8004740 <sniprintf+0x64>)
 80046e2:	1e0c      	subs	r4, r1, #0
 80046e4:	681d      	ldr	r5, [r3, #0]
 80046e6:	b09d      	sub	sp, #116	; 0x74
 80046e8:	da08      	bge.n	80046fc <sniprintf+0x20>
 80046ea:	238b      	movs	r3, #139	; 0x8b
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	b01d      	add	sp, #116	; 0x74
 80046f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046f8:	b002      	add	sp, #8
 80046fa:	4770      	bx	lr
 80046fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004700:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004704:	bf0c      	ite	eq
 8004706:	4623      	moveq	r3, r4
 8004708:	f104 33ff 	addne.w	r3, r4, #4294967295
 800470c:	9304      	str	r3, [sp, #16]
 800470e:	9307      	str	r3, [sp, #28]
 8004710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004714:	9002      	str	r0, [sp, #8]
 8004716:	9006      	str	r0, [sp, #24]
 8004718:	f8ad 3016 	strh.w	r3, [sp, #22]
 800471c:	4628      	mov	r0, r5
 800471e:	ab21      	add	r3, sp, #132	; 0x84
 8004720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004722:	a902      	add	r1, sp, #8
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	f000 f889 	bl	800483c <_svfiprintf_r>
 800472a:	1c43      	adds	r3, r0, #1
 800472c:	bfbc      	itt	lt
 800472e:	238b      	movlt	r3, #139	; 0x8b
 8004730:	602b      	strlt	r3, [r5, #0]
 8004732:	2c00      	cmp	r4, #0
 8004734:	d0dd      	beq.n	80046f2 <sniprintf+0x16>
 8004736:	2200      	movs	r2, #0
 8004738:	9b02      	ldr	r3, [sp, #8]
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	e7d9      	b.n	80046f2 <sniprintf+0x16>
 800473e:	bf00      	nop
 8004740:	2000000c 	.word	0x2000000c

08004744 <siprintf>:
 8004744:	b40e      	push	{r1, r2, r3}
 8004746:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800474a:	b500      	push	{lr}
 800474c:	b09c      	sub	sp, #112	; 0x70
 800474e:	ab1d      	add	r3, sp, #116	; 0x74
 8004750:	9002      	str	r0, [sp, #8]
 8004752:	9006      	str	r0, [sp, #24]
 8004754:	9107      	str	r1, [sp, #28]
 8004756:	9104      	str	r1, [sp, #16]
 8004758:	4808      	ldr	r0, [pc, #32]	; (800477c <siprintf+0x38>)
 800475a:	4909      	ldr	r1, [pc, #36]	; (8004780 <siprintf+0x3c>)
 800475c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004760:	9105      	str	r1, [sp, #20]
 8004762:	6800      	ldr	r0, [r0, #0]
 8004764:	a902      	add	r1, sp, #8
 8004766:	9301      	str	r3, [sp, #4]
 8004768:	f000 f868 	bl	800483c <_svfiprintf_r>
 800476c:	2200      	movs	r2, #0
 800476e:	9b02      	ldr	r3, [sp, #8]
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	b01c      	add	sp, #112	; 0x70
 8004774:	f85d eb04 	ldr.w	lr, [sp], #4
 8004778:	b003      	add	sp, #12
 800477a:	4770      	bx	lr
 800477c:	2000000c 	.word	0x2000000c
 8004780:	ffff0208 	.word	0xffff0208

08004784 <__ssputs_r>:
 8004784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004788:	688e      	ldr	r6, [r1, #8]
 800478a:	4682      	mov	sl, r0
 800478c:	429e      	cmp	r6, r3
 800478e:	460c      	mov	r4, r1
 8004790:	4690      	mov	r8, r2
 8004792:	461f      	mov	r7, r3
 8004794:	d838      	bhi.n	8004808 <__ssputs_r+0x84>
 8004796:	898a      	ldrh	r2, [r1, #12]
 8004798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800479c:	d032      	beq.n	8004804 <__ssputs_r+0x80>
 800479e:	6825      	ldr	r5, [r4, #0]
 80047a0:	6909      	ldr	r1, [r1, #16]
 80047a2:	3301      	adds	r3, #1
 80047a4:	eba5 0901 	sub.w	r9, r5, r1
 80047a8:	6965      	ldr	r5, [r4, #20]
 80047aa:	444b      	add	r3, r9
 80047ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047b4:	106d      	asrs	r5, r5, #1
 80047b6:	429d      	cmp	r5, r3
 80047b8:	bf38      	it	cc
 80047ba:	461d      	movcc	r5, r3
 80047bc:	0553      	lsls	r3, r2, #21
 80047be:	d531      	bpl.n	8004824 <__ssputs_r+0xa0>
 80047c0:	4629      	mov	r1, r5
 80047c2:	f000 fb6f 	bl	8004ea4 <_malloc_r>
 80047c6:	4606      	mov	r6, r0
 80047c8:	b950      	cbnz	r0, 80047e0 <__ssputs_r+0x5c>
 80047ca:	230c      	movs	r3, #12
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	f8ca 3000 	str.w	r3, [sl]
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e0:	464a      	mov	r2, r9
 80047e2:	6921      	ldr	r1, [r4, #16]
 80047e4:	f000 face 	bl	8004d84 <memcpy>
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	6126      	str	r6, [r4, #16]
 80047f6:	444e      	add	r6, r9
 80047f8:	6026      	str	r6, [r4, #0]
 80047fa:	463e      	mov	r6, r7
 80047fc:	6165      	str	r5, [r4, #20]
 80047fe:	eba5 0509 	sub.w	r5, r5, r9
 8004802:	60a5      	str	r5, [r4, #8]
 8004804:	42be      	cmp	r6, r7
 8004806:	d900      	bls.n	800480a <__ssputs_r+0x86>
 8004808:	463e      	mov	r6, r7
 800480a:	4632      	mov	r2, r6
 800480c:	4641      	mov	r1, r8
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	f000 fac6 	bl	8004da0 <memmove>
 8004814:	68a3      	ldr	r3, [r4, #8]
 8004816:	2000      	movs	r0, #0
 8004818:	1b9b      	subs	r3, r3, r6
 800481a:	60a3      	str	r3, [r4, #8]
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	4433      	add	r3, r6
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	e7db      	b.n	80047dc <__ssputs_r+0x58>
 8004824:	462a      	mov	r2, r5
 8004826:	f000 fbb1 	bl	8004f8c <_realloc_r>
 800482a:	4606      	mov	r6, r0
 800482c:	2800      	cmp	r0, #0
 800482e:	d1e1      	bne.n	80047f4 <__ssputs_r+0x70>
 8004830:	4650      	mov	r0, sl
 8004832:	6921      	ldr	r1, [r4, #16]
 8004834:	f000 face 	bl	8004dd4 <_free_r>
 8004838:	e7c7      	b.n	80047ca <__ssputs_r+0x46>
	...

0800483c <_svfiprintf_r>:
 800483c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004840:	4698      	mov	r8, r3
 8004842:	898b      	ldrh	r3, [r1, #12]
 8004844:	4607      	mov	r7, r0
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	460d      	mov	r5, r1
 800484a:	4614      	mov	r4, r2
 800484c:	b09d      	sub	sp, #116	; 0x74
 800484e:	d50e      	bpl.n	800486e <_svfiprintf_r+0x32>
 8004850:	690b      	ldr	r3, [r1, #16]
 8004852:	b963      	cbnz	r3, 800486e <_svfiprintf_r+0x32>
 8004854:	2140      	movs	r1, #64	; 0x40
 8004856:	f000 fb25 	bl	8004ea4 <_malloc_r>
 800485a:	6028      	str	r0, [r5, #0]
 800485c:	6128      	str	r0, [r5, #16]
 800485e:	b920      	cbnz	r0, 800486a <_svfiprintf_r+0x2e>
 8004860:	230c      	movs	r3, #12
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	f04f 30ff 	mov.w	r0, #4294967295
 8004868:	e0d1      	b.n	8004a0e <_svfiprintf_r+0x1d2>
 800486a:	2340      	movs	r3, #64	; 0x40
 800486c:	616b      	str	r3, [r5, #20]
 800486e:	2300      	movs	r3, #0
 8004870:	9309      	str	r3, [sp, #36]	; 0x24
 8004872:	2320      	movs	r3, #32
 8004874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004878:	2330      	movs	r3, #48	; 0x30
 800487a:	f04f 0901 	mov.w	r9, #1
 800487e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004882:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a28 <_svfiprintf_r+0x1ec>
 8004886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800488a:	4623      	mov	r3, r4
 800488c:	469a      	mov	sl, r3
 800488e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004892:	b10a      	cbz	r2, 8004898 <_svfiprintf_r+0x5c>
 8004894:	2a25      	cmp	r2, #37	; 0x25
 8004896:	d1f9      	bne.n	800488c <_svfiprintf_r+0x50>
 8004898:	ebba 0b04 	subs.w	fp, sl, r4
 800489c:	d00b      	beq.n	80048b6 <_svfiprintf_r+0x7a>
 800489e:	465b      	mov	r3, fp
 80048a0:	4622      	mov	r2, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	4638      	mov	r0, r7
 80048a6:	f7ff ff6d 	bl	8004784 <__ssputs_r>
 80048aa:	3001      	adds	r0, #1
 80048ac:	f000 80aa 	beq.w	8004a04 <_svfiprintf_r+0x1c8>
 80048b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b2:	445a      	add	r2, fp
 80048b4:	9209      	str	r2, [sp, #36]	; 0x24
 80048b6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80a2 	beq.w	8004a04 <_svfiprintf_r+0x1c8>
 80048c0:	2300      	movs	r3, #0
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ca:	f10a 0a01 	add.w	sl, sl, #1
 80048ce:	9304      	str	r3, [sp, #16]
 80048d0:	9307      	str	r3, [sp, #28]
 80048d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048d6:	931a      	str	r3, [sp, #104]	; 0x68
 80048d8:	4654      	mov	r4, sl
 80048da:	2205      	movs	r2, #5
 80048dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e0:	4851      	ldr	r0, [pc, #324]	; (8004a28 <_svfiprintf_r+0x1ec>)
 80048e2:	f000 fa41 	bl	8004d68 <memchr>
 80048e6:	9a04      	ldr	r2, [sp, #16]
 80048e8:	b9d8      	cbnz	r0, 8004922 <_svfiprintf_r+0xe6>
 80048ea:	06d0      	lsls	r0, r2, #27
 80048ec:	bf44      	itt	mi
 80048ee:	2320      	movmi	r3, #32
 80048f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f4:	0711      	lsls	r1, r2, #28
 80048f6:	bf44      	itt	mi
 80048f8:	232b      	movmi	r3, #43	; 0x2b
 80048fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004902:	2b2a      	cmp	r3, #42	; 0x2a
 8004904:	d015      	beq.n	8004932 <_svfiprintf_r+0xf6>
 8004906:	4654      	mov	r4, sl
 8004908:	2000      	movs	r0, #0
 800490a:	f04f 0c0a 	mov.w	ip, #10
 800490e:	9a07      	ldr	r2, [sp, #28]
 8004910:	4621      	mov	r1, r4
 8004912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004916:	3b30      	subs	r3, #48	; 0x30
 8004918:	2b09      	cmp	r3, #9
 800491a:	d94e      	bls.n	80049ba <_svfiprintf_r+0x17e>
 800491c:	b1b0      	cbz	r0, 800494c <_svfiprintf_r+0x110>
 800491e:	9207      	str	r2, [sp, #28]
 8004920:	e014      	b.n	800494c <_svfiprintf_r+0x110>
 8004922:	eba0 0308 	sub.w	r3, r0, r8
 8004926:	fa09 f303 	lsl.w	r3, r9, r3
 800492a:	4313      	orrs	r3, r2
 800492c:	46a2      	mov	sl, r4
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	e7d2      	b.n	80048d8 <_svfiprintf_r+0x9c>
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	1d19      	adds	r1, r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	9103      	str	r1, [sp, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	bfbb      	ittet	lt
 800493e:	425b      	neglt	r3, r3
 8004940:	f042 0202 	orrlt.w	r2, r2, #2
 8004944:	9307      	strge	r3, [sp, #28]
 8004946:	9307      	strlt	r3, [sp, #28]
 8004948:	bfb8      	it	lt
 800494a:	9204      	strlt	r2, [sp, #16]
 800494c:	7823      	ldrb	r3, [r4, #0]
 800494e:	2b2e      	cmp	r3, #46	; 0x2e
 8004950:	d10c      	bne.n	800496c <_svfiprintf_r+0x130>
 8004952:	7863      	ldrb	r3, [r4, #1]
 8004954:	2b2a      	cmp	r3, #42	; 0x2a
 8004956:	d135      	bne.n	80049c4 <_svfiprintf_r+0x188>
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	3402      	adds	r4, #2
 800495c:	1d1a      	adds	r2, r3, #4
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	9203      	str	r2, [sp, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfb8      	it	lt
 8004966:	f04f 33ff 	movlt.w	r3, #4294967295
 800496a:	9305      	str	r3, [sp, #20]
 800496c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a2c <_svfiprintf_r+0x1f0>
 8004970:	2203      	movs	r2, #3
 8004972:	4650      	mov	r0, sl
 8004974:	7821      	ldrb	r1, [r4, #0]
 8004976:	f000 f9f7 	bl	8004d68 <memchr>
 800497a:	b140      	cbz	r0, 800498e <_svfiprintf_r+0x152>
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	eba0 000a 	sub.w	r0, r0, sl
 8004982:	fa03 f000 	lsl.w	r0, r3, r0
 8004986:	9b04      	ldr	r3, [sp, #16]
 8004988:	3401      	adds	r4, #1
 800498a:	4303      	orrs	r3, r0
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004992:	2206      	movs	r2, #6
 8004994:	4826      	ldr	r0, [pc, #152]	; (8004a30 <_svfiprintf_r+0x1f4>)
 8004996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800499a:	f000 f9e5 	bl	8004d68 <memchr>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d038      	beq.n	8004a14 <_svfiprintf_r+0x1d8>
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <_svfiprintf_r+0x1f8>)
 80049a4:	bb1b      	cbnz	r3, 80049ee <_svfiprintf_r+0x1b2>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	3307      	adds	r3, #7
 80049aa:	f023 0307 	bic.w	r3, r3, #7
 80049ae:	3308      	adds	r3, #8
 80049b0:	9303      	str	r3, [sp, #12]
 80049b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b4:	4433      	add	r3, r6
 80049b6:	9309      	str	r3, [sp, #36]	; 0x24
 80049b8:	e767      	b.n	800488a <_svfiprintf_r+0x4e>
 80049ba:	460c      	mov	r4, r1
 80049bc:	2001      	movs	r0, #1
 80049be:	fb0c 3202 	mla	r2, ip, r2, r3
 80049c2:	e7a5      	b.n	8004910 <_svfiprintf_r+0xd4>
 80049c4:	2300      	movs	r3, #0
 80049c6:	f04f 0c0a 	mov.w	ip, #10
 80049ca:	4619      	mov	r1, r3
 80049cc:	3401      	adds	r4, #1
 80049ce:	9305      	str	r3, [sp, #20]
 80049d0:	4620      	mov	r0, r4
 80049d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d6:	3a30      	subs	r2, #48	; 0x30
 80049d8:	2a09      	cmp	r2, #9
 80049da:	d903      	bls.n	80049e4 <_svfiprintf_r+0x1a8>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0c5      	beq.n	800496c <_svfiprintf_r+0x130>
 80049e0:	9105      	str	r1, [sp, #20]
 80049e2:	e7c3      	b.n	800496c <_svfiprintf_r+0x130>
 80049e4:	4604      	mov	r4, r0
 80049e6:	2301      	movs	r3, #1
 80049e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ec:	e7f0      	b.n	80049d0 <_svfiprintf_r+0x194>
 80049ee:	ab03      	add	r3, sp, #12
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	462a      	mov	r2, r5
 80049f4:	4638      	mov	r0, r7
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <_svfiprintf_r+0x1fc>)
 80049f8:	a904      	add	r1, sp, #16
 80049fa:	f3af 8000 	nop.w
 80049fe:	1c42      	adds	r2, r0, #1
 8004a00:	4606      	mov	r6, r0
 8004a02:	d1d6      	bne.n	80049b2 <_svfiprintf_r+0x176>
 8004a04:	89ab      	ldrh	r3, [r5, #12]
 8004a06:	065b      	lsls	r3, r3, #25
 8004a08:	f53f af2c 	bmi.w	8004864 <_svfiprintf_r+0x28>
 8004a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a0e:	b01d      	add	sp, #116	; 0x74
 8004a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a14:	ab03      	add	r3, sp, #12
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	462a      	mov	r2, r5
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <_svfiprintf_r+0x1fc>)
 8004a1e:	a904      	add	r1, sp, #16
 8004a20:	f000 f87c 	bl	8004b1c <_printf_i>
 8004a24:	e7eb      	b.n	80049fe <_svfiprintf_r+0x1c2>
 8004a26:	bf00      	nop
 8004a28:	080050e8 	.word	0x080050e8
 8004a2c:	080050ee 	.word	0x080050ee
 8004a30:	080050f2 	.word	0x080050f2
 8004a34:	00000000 	.word	0x00000000
 8004a38:	08004785 	.word	0x08004785

08004a3c <_printf_common>:
 8004a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	4616      	mov	r6, r2
 8004a42:	4699      	mov	r9, r3
 8004a44:	688a      	ldr	r2, [r1, #8]
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	4607      	mov	r7, r0
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	bfb8      	it	lt
 8004a4e:	4613      	movlt	r3, r2
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a56:	460c      	mov	r4, r1
 8004a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a5c:	b10a      	cbz	r2, 8004a62 <_printf_common+0x26>
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	0699      	lsls	r1, r3, #26
 8004a66:	bf42      	ittt	mi
 8004a68:	6833      	ldrmi	r3, [r6, #0]
 8004a6a:	3302      	addmi	r3, #2
 8004a6c:	6033      	strmi	r3, [r6, #0]
 8004a6e:	6825      	ldr	r5, [r4, #0]
 8004a70:	f015 0506 	ands.w	r5, r5, #6
 8004a74:	d106      	bne.n	8004a84 <_printf_common+0x48>
 8004a76:	f104 0a19 	add.w	sl, r4, #25
 8004a7a:	68e3      	ldr	r3, [r4, #12]
 8004a7c:	6832      	ldr	r2, [r6, #0]
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	42ab      	cmp	r3, r5
 8004a82:	dc28      	bgt.n	8004ad6 <_printf_common+0x9a>
 8004a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a88:	1e13      	subs	r3, r2, #0
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	bf18      	it	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	0692      	lsls	r2, r2, #26
 8004a92:	d42d      	bmi.n	8004af0 <_printf_common+0xb4>
 8004a94:	4649      	mov	r1, r9
 8004a96:	4638      	mov	r0, r7
 8004a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a9c:	47c0      	blx	r8
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d020      	beq.n	8004ae4 <_printf_common+0xa8>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	68e5      	ldr	r5, [r4, #12]
 8004aa6:	f003 0306 	and.w	r3, r3, #6
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf18      	it	ne
 8004aae:	2500      	movne	r5, #0
 8004ab0:	6832      	ldr	r2, [r6, #0]
 8004ab2:	f04f 0600 	mov.w	r6, #0
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	bf08      	it	eq
 8004aba:	1aad      	subeq	r5, r5, r2
 8004abc:	6922      	ldr	r2, [r4, #16]
 8004abe:	bf08      	it	eq
 8004ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	bfc4      	itt	gt
 8004ac8:	1a9b      	subgt	r3, r3, r2
 8004aca:	18ed      	addgt	r5, r5, r3
 8004acc:	341a      	adds	r4, #26
 8004ace:	42b5      	cmp	r5, r6
 8004ad0:	d11a      	bne.n	8004b08 <_printf_common+0xcc>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	e008      	b.n	8004ae8 <_printf_common+0xac>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4652      	mov	r2, sl
 8004ada:	4649      	mov	r1, r9
 8004adc:	4638      	mov	r0, r7
 8004ade:	47c0      	blx	r8
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d103      	bne.n	8004aec <_printf_common+0xb0>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aec:	3501      	adds	r5, #1
 8004aee:	e7c4      	b.n	8004a7a <_printf_common+0x3e>
 8004af0:	2030      	movs	r0, #48	; 0x30
 8004af2:	18e1      	adds	r1, r4, r3
 8004af4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004afe:	4422      	add	r2, r4
 8004b00:	3302      	adds	r3, #2
 8004b02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b06:	e7c5      	b.n	8004a94 <_printf_common+0x58>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c0      	blx	r8
 8004b12:	3001      	adds	r0, #1
 8004b14:	d0e6      	beq.n	8004ae4 <_printf_common+0xa8>
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7d9      	b.n	8004ace <_printf_common+0x92>
	...

08004b1c <_printf_i>:
 8004b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b20:	7e0f      	ldrb	r7, [r1, #24]
 8004b22:	4691      	mov	r9, r2
 8004b24:	2f78      	cmp	r7, #120	; 0x78
 8004b26:	4680      	mov	r8, r0
 8004b28:	460c      	mov	r4, r1
 8004b2a:	469a      	mov	sl, r3
 8004b2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b32:	d807      	bhi.n	8004b44 <_printf_i+0x28>
 8004b34:	2f62      	cmp	r7, #98	; 0x62
 8004b36:	d80a      	bhi.n	8004b4e <_printf_i+0x32>
 8004b38:	2f00      	cmp	r7, #0
 8004b3a:	f000 80d9 	beq.w	8004cf0 <_printf_i+0x1d4>
 8004b3e:	2f58      	cmp	r7, #88	; 0x58
 8004b40:	f000 80a4 	beq.w	8004c8c <_printf_i+0x170>
 8004b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b4c:	e03a      	b.n	8004bc4 <_printf_i+0xa8>
 8004b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b52:	2b15      	cmp	r3, #21
 8004b54:	d8f6      	bhi.n	8004b44 <_printf_i+0x28>
 8004b56:	a101      	add	r1, pc, #4	; (adr r1, 8004b5c <_printf_i+0x40>)
 8004b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bc9 	.word	0x08004bc9
 8004b64:	08004b45 	.word	0x08004b45
 8004b68:	08004b45 	.word	0x08004b45
 8004b6c:	08004b45 	.word	0x08004b45
 8004b70:	08004b45 	.word	0x08004b45
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004b45 	.word	0x08004b45
 8004b7c:	08004b45 	.word	0x08004b45
 8004b80:	08004b45 	.word	0x08004b45
 8004b84:	08004b45 	.word	0x08004b45
 8004b88:	08004cd7 	.word	0x08004cd7
 8004b8c:	08004bf9 	.word	0x08004bf9
 8004b90:	08004cb9 	.word	0x08004cb9
 8004b94:	08004b45 	.word	0x08004b45
 8004b98:	08004b45 	.word	0x08004b45
 8004b9c:	08004cf9 	.word	0x08004cf9
 8004ba0:	08004b45 	.word	0x08004b45
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004b45 	.word	0x08004b45
 8004bac:	08004b45 	.word	0x08004b45
 8004bb0:	08004cc1 	.word	0x08004cc1
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	1d1a      	adds	r2, r3, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	602a      	str	r2, [r5, #0]
 8004bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0a4      	b.n	8004d12 <_printf_i+0x1f6>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	6829      	ldr	r1, [r5, #0]
 8004bcc:	0606      	lsls	r6, r0, #24
 8004bce:	f101 0304 	add.w	r3, r1, #4
 8004bd2:	d50a      	bpl.n	8004bea <_printf_i+0xce>
 8004bd4:	680e      	ldr	r6, [r1, #0]
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	2e00      	cmp	r6, #0
 8004bda:	da03      	bge.n	8004be4 <_printf_i+0xc8>
 8004bdc:	232d      	movs	r3, #45	; 0x2d
 8004bde:	4276      	negs	r6, r6
 8004be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be4:	230a      	movs	r3, #10
 8004be6:	485e      	ldr	r0, [pc, #376]	; (8004d60 <_printf_i+0x244>)
 8004be8:	e019      	b.n	8004c1e <_printf_i+0x102>
 8004bea:	680e      	ldr	r6, [r1, #0]
 8004bec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	bf18      	it	ne
 8004bf4:	b236      	sxthne	r6, r6
 8004bf6:	e7ef      	b.n	8004bd8 <_printf_i+0xbc>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	6029      	str	r1, [r5, #0]
 8004c00:	0601      	lsls	r1, r0, #24
 8004c02:	d501      	bpl.n	8004c08 <_printf_i+0xec>
 8004c04:	681e      	ldr	r6, [r3, #0]
 8004c06:	e002      	b.n	8004c0e <_printf_i+0xf2>
 8004c08:	0646      	lsls	r6, r0, #25
 8004c0a:	d5fb      	bpl.n	8004c04 <_printf_i+0xe8>
 8004c0c:	881e      	ldrh	r6, [r3, #0]
 8004c0e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c10:	bf0c      	ite	eq
 8004c12:	2308      	moveq	r3, #8
 8004c14:	230a      	movne	r3, #10
 8004c16:	4852      	ldr	r0, [pc, #328]	; (8004d60 <_printf_i+0x244>)
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c1e:	6865      	ldr	r5, [r4, #4]
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	bfa8      	it	ge
 8004c24:	6821      	ldrge	r1, [r4, #0]
 8004c26:	60a5      	str	r5, [r4, #8]
 8004c28:	bfa4      	itt	ge
 8004c2a:	f021 0104 	bicge.w	r1, r1, #4
 8004c2e:	6021      	strge	r1, [r4, #0]
 8004c30:	b90e      	cbnz	r6, 8004c36 <_printf_i+0x11a>
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	d04d      	beq.n	8004cd2 <_printf_i+0x1b6>
 8004c36:	4615      	mov	r5, r2
 8004c38:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c3c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c40:	5dc7      	ldrb	r7, [r0, r7]
 8004c42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c46:	4637      	mov	r7, r6
 8004c48:	42bb      	cmp	r3, r7
 8004c4a:	460e      	mov	r6, r1
 8004c4c:	d9f4      	bls.n	8004c38 <_printf_i+0x11c>
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d10b      	bne.n	8004c6a <_printf_i+0x14e>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	07de      	lsls	r6, r3, #31
 8004c56:	d508      	bpl.n	8004c6a <_printf_i+0x14e>
 8004c58:	6923      	ldr	r3, [r4, #16]
 8004c5a:	6861      	ldr	r1, [r4, #4]
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	bfde      	ittt	le
 8004c60:	2330      	movle	r3, #48	; 0x30
 8004c62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c6a:	1b52      	subs	r2, r2, r5
 8004c6c:	6122      	str	r2, [r4, #16]
 8004c6e:	464b      	mov	r3, r9
 8004c70:	4621      	mov	r1, r4
 8004c72:	4640      	mov	r0, r8
 8004c74:	f8cd a000 	str.w	sl, [sp]
 8004c78:	aa03      	add	r2, sp, #12
 8004c7a:	f7ff fedf 	bl	8004a3c <_printf_common>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d14c      	bne.n	8004d1c <_printf_i+0x200>
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295
 8004c86:	b004      	add	sp, #16
 8004c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8c:	4834      	ldr	r0, [pc, #208]	; (8004d60 <_printf_i+0x244>)
 8004c8e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c92:	6829      	ldr	r1, [r5, #0]
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c9a:	6029      	str	r1, [r5, #0]
 8004c9c:	061d      	lsls	r5, r3, #24
 8004c9e:	d514      	bpl.n	8004cca <_printf_i+0x1ae>
 8004ca0:	07df      	lsls	r7, r3, #31
 8004ca2:	bf44      	itt	mi
 8004ca4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ca8:	6023      	strmi	r3, [r4, #0]
 8004caa:	b91e      	cbnz	r6, 8004cb4 <_printf_i+0x198>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	f023 0320 	bic.w	r3, r3, #32
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	e7af      	b.n	8004c18 <_printf_i+0xfc>
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	f043 0320 	orr.w	r3, r3, #32
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	2378      	movs	r3, #120	; 0x78
 8004cc2:	4828      	ldr	r0, [pc, #160]	; (8004d64 <_printf_i+0x248>)
 8004cc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cc8:	e7e3      	b.n	8004c92 <_printf_i+0x176>
 8004cca:	0659      	lsls	r1, r3, #25
 8004ccc:	bf48      	it	mi
 8004cce:	b2b6      	uxthmi	r6, r6
 8004cd0:	e7e6      	b.n	8004ca0 <_printf_i+0x184>
 8004cd2:	4615      	mov	r5, r2
 8004cd4:	e7bb      	b.n	8004c4e <_printf_i+0x132>
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	6826      	ldr	r6, [r4, #0]
 8004cda:	1d18      	adds	r0, r3, #4
 8004cdc:	6961      	ldr	r1, [r4, #20]
 8004cde:	6028      	str	r0, [r5, #0]
 8004ce0:	0635      	lsls	r5, r6, #24
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	d501      	bpl.n	8004cea <_printf_i+0x1ce>
 8004ce6:	6019      	str	r1, [r3, #0]
 8004ce8:	e002      	b.n	8004cf0 <_printf_i+0x1d4>
 8004cea:	0670      	lsls	r0, r6, #25
 8004cec:	d5fb      	bpl.n	8004ce6 <_printf_i+0x1ca>
 8004cee:	8019      	strh	r1, [r3, #0]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	4615      	mov	r5, r2
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	e7ba      	b.n	8004c6e <_printf_i+0x152>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	1d1a      	adds	r2, r3, #4
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	681d      	ldr	r5, [r3, #0]
 8004d02:	6862      	ldr	r2, [r4, #4]
 8004d04:	4628      	mov	r0, r5
 8004d06:	f000 f82f 	bl	8004d68 <memchr>
 8004d0a:	b108      	cbz	r0, 8004d10 <_printf_i+0x1f4>
 8004d0c:	1b40      	subs	r0, r0, r5
 8004d0e:	6060      	str	r0, [r4, #4]
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	6123      	str	r3, [r4, #16]
 8004d14:	2300      	movs	r3, #0
 8004d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1a:	e7a8      	b.n	8004c6e <_printf_i+0x152>
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4640      	mov	r0, r8
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	47d0      	blx	sl
 8004d26:	3001      	adds	r0, #1
 8004d28:	d0ab      	beq.n	8004c82 <_printf_i+0x166>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	079b      	lsls	r3, r3, #30
 8004d2e:	d413      	bmi.n	8004d58 <_printf_i+0x23c>
 8004d30:	68e0      	ldr	r0, [r4, #12]
 8004d32:	9b03      	ldr	r3, [sp, #12]
 8004d34:	4298      	cmp	r0, r3
 8004d36:	bfb8      	it	lt
 8004d38:	4618      	movlt	r0, r3
 8004d3a:	e7a4      	b.n	8004c86 <_printf_i+0x16a>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4632      	mov	r2, r6
 8004d40:	4649      	mov	r1, r9
 8004d42:	4640      	mov	r0, r8
 8004d44:	47d0      	blx	sl
 8004d46:	3001      	adds	r0, #1
 8004d48:	d09b      	beq.n	8004c82 <_printf_i+0x166>
 8004d4a:	3501      	adds	r5, #1
 8004d4c:	68e3      	ldr	r3, [r4, #12]
 8004d4e:	9903      	ldr	r1, [sp, #12]
 8004d50:	1a5b      	subs	r3, r3, r1
 8004d52:	42ab      	cmp	r3, r5
 8004d54:	dcf2      	bgt.n	8004d3c <_printf_i+0x220>
 8004d56:	e7eb      	b.n	8004d30 <_printf_i+0x214>
 8004d58:	2500      	movs	r5, #0
 8004d5a:	f104 0619 	add.w	r6, r4, #25
 8004d5e:	e7f5      	b.n	8004d4c <_printf_i+0x230>
 8004d60:	080050f9 	.word	0x080050f9
 8004d64:	0800510a 	.word	0x0800510a

08004d68 <memchr>:
 8004d68:	4603      	mov	r3, r0
 8004d6a:	b510      	push	{r4, lr}
 8004d6c:	b2c9      	uxtb	r1, r1
 8004d6e:	4402      	add	r2, r0
 8004d70:	4293      	cmp	r3, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	d101      	bne.n	8004d7a <memchr+0x12>
 8004d76:	2000      	movs	r0, #0
 8004d78:	e003      	b.n	8004d82 <memchr+0x1a>
 8004d7a:	7804      	ldrb	r4, [r0, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	428c      	cmp	r4, r1
 8004d80:	d1f6      	bne.n	8004d70 <memchr+0x8>
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <memcpy>:
 8004d84:	440a      	add	r2, r1
 8004d86:	4291      	cmp	r1, r2
 8004d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d8c:	d100      	bne.n	8004d90 <memcpy+0xc>
 8004d8e:	4770      	bx	lr
 8004d90:	b510      	push	{r4, lr}
 8004d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d96:	4291      	cmp	r1, r2
 8004d98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d9c:	d1f9      	bne.n	8004d92 <memcpy+0xe>
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <memmove>:
 8004da0:	4288      	cmp	r0, r1
 8004da2:	b510      	push	{r4, lr}
 8004da4:	eb01 0402 	add.w	r4, r1, r2
 8004da8:	d902      	bls.n	8004db0 <memmove+0x10>
 8004daa:	4284      	cmp	r4, r0
 8004dac:	4623      	mov	r3, r4
 8004dae:	d807      	bhi.n	8004dc0 <memmove+0x20>
 8004db0:	1e43      	subs	r3, r0, #1
 8004db2:	42a1      	cmp	r1, r4
 8004db4:	d008      	beq.n	8004dc8 <memmove+0x28>
 8004db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dbe:	e7f8      	b.n	8004db2 <memmove+0x12>
 8004dc0:	4601      	mov	r1, r0
 8004dc2:	4402      	add	r2, r0
 8004dc4:	428a      	cmp	r2, r1
 8004dc6:	d100      	bne.n	8004dca <memmove+0x2a>
 8004dc8:	bd10      	pop	{r4, pc}
 8004dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dd2:	e7f7      	b.n	8004dc4 <memmove+0x24>

08004dd4 <_free_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	2900      	cmp	r1, #0
 8004dda:	d040      	beq.n	8004e5e <_free_r+0x8a>
 8004ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de0:	1f0c      	subs	r4, r1, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bfb8      	it	lt
 8004de6:	18e4      	addlt	r4, r4, r3
 8004de8:	f000 f910 	bl	800500c <__malloc_lock>
 8004dec:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <_free_r+0x8c>)
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	b933      	cbnz	r3, 8004e00 <_free_r+0x2c>
 8004df2:	6063      	str	r3, [r4, #4]
 8004df4:	6014      	str	r4, [r2, #0]
 8004df6:	4628      	mov	r0, r5
 8004df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dfc:	f000 b90c 	b.w	8005018 <__malloc_unlock>
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	d908      	bls.n	8004e16 <_free_r+0x42>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	1821      	adds	r1, r4, r0
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	bf01      	itttt	eq
 8004e0c:	6819      	ldreq	r1, [r3, #0]
 8004e0e:	685b      	ldreq	r3, [r3, #4]
 8004e10:	1809      	addeq	r1, r1, r0
 8004e12:	6021      	streq	r1, [r4, #0]
 8004e14:	e7ed      	b.n	8004df2 <_free_r+0x1e>
 8004e16:	461a      	mov	r2, r3
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b10b      	cbz	r3, 8004e20 <_free_r+0x4c>
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d9fa      	bls.n	8004e16 <_free_r+0x42>
 8004e20:	6811      	ldr	r1, [r2, #0]
 8004e22:	1850      	adds	r0, r2, r1
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d10b      	bne.n	8004e40 <_free_r+0x6c>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	4401      	add	r1, r0
 8004e2c:	1850      	adds	r0, r2, r1
 8004e2e:	4283      	cmp	r3, r0
 8004e30:	6011      	str	r1, [r2, #0]
 8004e32:	d1e0      	bne.n	8004df6 <_free_r+0x22>
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4401      	add	r1, r0
 8004e3a:	6011      	str	r1, [r2, #0]
 8004e3c:	6053      	str	r3, [r2, #4]
 8004e3e:	e7da      	b.n	8004df6 <_free_r+0x22>
 8004e40:	d902      	bls.n	8004e48 <_free_r+0x74>
 8004e42:	230c      	movs	r3, #12
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	e7d6      	b.n	8004df6 <_free_r+0x22>
 8004e48:	6820      	ldr	r0, [r4, #0]
 8004e4a:	1821      	adds	r1, r4, r0
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	bf01      	itttt	eq
 8004e50:	6819      	ldreq	r1, [r3, #0]
 8004e52:	685b      	ldreq	r3, [r3, #4]
 8004e54:	1809      	addeq	r1, r1, r0
 8004e56:	6021      	streq	r1, [r4, #0]
 8004e58:	6063      	str	r3, [r4, #4]
 8004e5a:	6054      	str	r4, [r2, #4]
 8004e5c:	e7cb      	b.n	8004df6 <_free_r+0x22>
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	20000228 	.word	0x20000228

08004e64 <sbrk_aligned>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	4e0e      	ldr	r6, [pc, #56]	; (8004ea0 <sbrk_aligned+0x3c>)
 8004e68:	460c      	mov	r4, r1
 8004e6a:	6831      	ldr	r1, [r6, #0]
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	b911      	cbnz	r1, 8004e76 <sbrk_aligned+0x12>
 8004e70:	f000 f8bc 	bl	8004fec <_sbrk_r>
 8004e74:	6030      	str	r0, [r6, #0]
 8004e76:	4621      	mov	r1, r4
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 f8b7 	bl	8004fec <_sbrk_r>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	d00a      	beq.n	8004e98 <sbrk_aligned+0x34>
 8004e82:	1cc4      	adds	r4, r0, #3
 8004e84:	f024 0403 	bic.w	r4, r4, #3
 8004e88:	42a0      	cmp	r0, r4
 8004e8a:	d007      	beq.n	8004e9c <sbrk_aligned+0x38>
 8004e8c:	1a21      	subs	r1, r4, r0
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f8ac 	bl	8004fec <_sbrk_r>
 8004e94:	3001      	adds	r0, #1
 8004e96:	d101      	bne.n	8004e9c <sbrk_aligned+0x38>
 8004e98:	f04f 34ff 	mov.w	r4, #4294967295
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ea0:	2000022c 	.word	0x2000022c

08004ea4 <_malloc_r>:
 8004ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea8:	1ccd      	adds	r5, r1, #3
 8004eaa:	f025 0503 	bic.w	r5, r5, #3
 8004eae:	3508      	adds	r5, #8
 8004eb0:	2d0c      	cmp	r5, #12
 8004eb2:	bf38      	it	cc
 8004eb4:	250c      	movcc	r5, #12
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	4607      	mov	r7, r0
 8004eba:	db01      	blt.n	8004ec0 <_malloc_r+0x1c>
 8004ebc:	42a9      	cmp	r1, r5
 8004ebe:	d905      	bls.n	8004ecc <_malloc_r+0x28>
 8004ec0:	230c      	movs	r3, #12
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ecc:	4e2e      	ldr	r6, [pc, #184]	; (8004f88 <_malloc_r+0xe4>)
 8004ece:	f000 f89d 	bl	800500c <__malloc_lock>
 8004ed2:	6833      	ldr	r3, [r6, #0]
 8004ed4:	461c      	mov	r4, r3
 8004ed6:	bb34      	cbnz	r4, 8004f26 <_malloc_r+0x82>
 8004ed8:	4629      	mov	r1, r5
 8004eda:	4638      	mov	r0, r7
 8004edc:	f7ff ffc2 	bl	8004e64 <sbrk_aligned>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	d14d      	bne.n	8004f82 <_malloc_r+0xde>
 8004ee6:	6834      	ldr	r4, [r6, #0]
 8004ee8:	4626      	mov	r6, r4
 8004eea:	2e00      	cmp	r6, #0
 8004eec:	d140      	bne.n	8004f70 <_malloc_r+0xcc>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	4631      	mov	r1, r6
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	eb04 0803 	add.w	r8, r4, r3
 8004ef8:	f000 f878 	bl	8004fec <_sbrk_r>
 8004efc:	4580      	cmp	r8, r0
 8004efe:	d13a      	bne.n	8004f76 <_malloc_r+0xd2>
 8004f00:	6821      	ldr	r1, [r4, #0]
 8004f02:	3503      	adds	r5, #3
 8004f04:	1a6d      	subs	r5, r5, r1
 8004f06:	f025 0503 	bic.w	r5, r5, #3
 8004f0a:	3508      	adds	r5, #8
 8004f0c:	2d0c      	cmp	r5, #12
 8004f0e:	bf38      	it	cc
 8004f10:	250c      	movcc	r5, #12
 8004f12:	4638      	mov	r0, r7
 8004f14:	4629      	mov	r1, r5
 8004f16:	f7ff ffa5 	bl	8004e64 <sbrk_aligned>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d02b      	beq.n	8004f76 <_malloc_r+0xd2>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	442b      	add	r3, r5
 8004f22:	6023      	str	r3, [r4, #0]
 8004f24:	e00e      	b.n	8004f44 <_malloc_r+0xa0>
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	1b52      	subs	r2, r2, r5
 8004f2a:	d41e      	bmi.n	8004f6a <_malloc_r+0xc6>
 8004f2c:	2a0b      	cmp	r2, #11
 8004f2e:	d916      	bls.n	8004f5e <_malloc_r+0xba>
 8004f30:	1961      	adds	r1, r4, r5
 8004f32:	42a3      	cmp	r3, r4
 8004f34:	6025      	str	r5, [r4, #0]
 8004f36:	bf18      	it	ne
 8004f38:	6059      	strne	r1, [r3, #4]
 8004f3a:	6863      	ldr	r3, [r4, #4]
 8004f3c:	bf08      	it	eq
 8004f3e:	6031      	streq	r1, [r6, #0]
 8004f40:	5162      	str	r2, [r4, r5]
 8004f42:	604b      	str	r3, [r1, #4]
 8004f44:	4638      	mov	r0, r7
 8004f46:	f104 060b 	add.w	r6, r4, #11
 8004f4a:	f000 f865 	bl	8005018 <__malloc_unlock>
 8004f4e:	f026 0607 	bic.w	r6, r6, #7
 8004f52:	1d23      	adds	r3, r4, #4
 8004f54:	1af2      	subs	r2, r6, r3
 8004f56:	d0b6      	beq.n	8004ec6 <_malloc_r+0x22>
 8004f58:	1b9b      	subs	r3, r3, r6
 8004f5a:	50a3      	str	r3, [r4, r2]
 8004f5c:	e7b3      	b.n	8004ec6 <_malloc_r+0x22>
 8004f5e:	6862      	ldr	r2, [r4, #4]
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	bf0c      	ite	eq
 8004f64:	6032      	streq	r2, [r6, #0]
 8004f66:	605a      	strne	r2, [r3, #4]
 8004f68:	e7ec      	b.n	8004f44 <_malloc_r+0xa0>
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	6864      	ldr	r4, [r4, #4]
 8004f6e:	e7b2      	b.n	8004ed6 <_malloc_r+0x32>
 8004f70:	4634      	mov	r4, r6
 8004f72:	6876      	ldr	r6, [r6, #4]
 8004f74:	e7b9      	b.n	8004eea <_malloc_r+0x46>
 8004f76:	230c      	movs	r3, #12
 8004f78:	4638      	mov	r0, r7
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	f000 f84c 	bl	8005018 <__malloc_unlock>
 8004f80:	e7a1      	b.n	8004ec6 <_malloc_r+0x22>
 8004f82:	6025      	str	r5, [r4, #0]
 8004f84:	e7de      	b.n	8004f44 <_malloc_r+0xa0>
 8004f86:	bf00      	nop
 8004f88:	20000228 	.word	0x20000228

08004f8c <_realloc_r>:
 8004f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f90:	4680      	mov	r8, r0
 8004f92:	4614      	mov	r4, r2
 8004f94:	460e      	mov	r6, r1
 8004f96:	b921      	cbnz	r1, 8004fa2 <_realloc_r+0x16>
 8004f98:	4611      	mov	r1, r2
 8004f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9e:	f7ff bf81 	b.w	8004ea4 <_malloc_r>
 8004fa2:	b92a      	cbnz	r2, 8004fb0 <_realloc_r+0x24>
 8004fa4:	f7ff ff16 	bl	8004dd4 <_free_r>
 8004fa8:	4625      	mov	r5, r4
 8004faa:	4628      	mov	r0, r5
 8004fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb0:	f000 f838 	bl	8005024 <_malloc_usable_size_r>
 8004fb4:	4284      	cmp	r4, r0
 8004fb6:	4607      	mov	r7, r0
 8004fb8:	d802      	bhi.n	8004fc0 <_realloc_r+0x34>
 8004fba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fbe:	d812      	bhi.n	8004fe6 <_realloc_r+0x5a>
 8004fc0:	4621      	mov	r1, r4
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	f7ff ff6e 	bl	8004ea4 <_malloc_r>
 8004fc8:	4605      	mov	r5, r0
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d0ed      	beq.n	8004faa <_realloc_r+0x1e>
 8004fce:	42bc      	cmp	r4, r7
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	bf28      	it	cs
 8004fd6:	463a      	movcs	r2, r7
 8004fd8:	f7ff fed4 	bl	8004d84 <memcpy>
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4640      	mov	r0, r8
 8004fe0:	f7ff fef8 	bl	8004dd4 <_free_r>
 8004fe4:	e7e1      	b.n	8004faa <_realloc_r+0x1e>
 8004fe6:	4635      	mov	r5, r6
 8004fe8:	e7df      	b.n	8004faa <_realloc_r+0x1e>
	...

08004fec <_sbrk_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	2300      	movs	r3, #0
 8004ff0:	4d05      	ldr	r5, [pc, #20]	; (8005008 <_sbrk_r+0x1c>)
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	f7fb fefc 	bl	8000df4 <_sbrk>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_sbrk_r+0x1a>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_sbrk_r+0x1a>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	20000230 	.word	0x20000230

0800500c <__malloc_lock>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__malloc_lock+0x8>)
 800500e:	f000 b811 	b.w	8005034 <__retarget_lock_acquire_recursive>
 8005012:	bf00      	nop
 8005014:	20000234 	.word	0x20000234

08005018 <__malloc_unlock>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__malloc_unlock+0x8>)
 800501a:	f000 b80c 	b.w	8005036 <__retarget_lock_release_recursive>
 800501e:	bf00      	nop
 8005020:	20000234 	.word	0x20000234

08005024 <_malloc_usable_size_r>:
 8005024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005028:	1f18      	subs	r0, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfbc      	itt	lt
 800502e:	580b      	ldrlt	r3, [r1, r0]
 8005030:	18c0      	addlt	r0, r0, r3
 8005032:	4770      	bx	lr

08005034 <__retarget_lock_acquire_recursive>:
 8005034:	4770      	bx	lr

08005036 <__retarget_lock_release_recursive>:
 8005036:	4770      	bx	lr

08005038 <_init>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr

08005044 <_fini>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr
